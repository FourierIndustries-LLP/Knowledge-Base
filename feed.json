{
    "version": "https://jsonfeed.org/version/1",
    "title": "FourierIndustries Knowledge Base",
    "description": "",
    "home_page_url": "https://knowledge.fourier.industries",
    "feed_url": "https://knowledge.fourier.industries/feed.json",
    "user_comment": "",
    "icon": "https://knowledge.fourier.industries/media/website/logo-3.png",
    "author": {
        "name": "FourierIndustries LLP"
    },
    "items": [
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html",
            "title": "From Blocks to Code, Part II",
            "summary": "In this tutorial, we are going to explore functions, understand&hellip;",
            "content_html": "<p>In this tutorial, we are going to explore functions, understand the limitations of block coding, and how to \"multitask\" your SSTuino.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvmoha0d3\">Functions</a>\n<ul>\n<li><a href=\"#mcetoc_1fvp2st7fc\">Ultrasonic Distance Sensor Example</a></li>\n<li><a href=\"#mcetoc_1fvp2st7fd\">Potentiometer Example</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvp2st7fe\">Limitations of Block Code</a></li>\n<li><a href=\"#mcetoc_1fvp2st7ff\">\"Multitasking\" your SSTuino</a>\n<ul>\n<li><a href=\"#mcetoc_1fvp2st7fg\">millis() instead of delay()</a></li>\n<li><a href=\"#mcetoc_1fvpo53oi1c\">Ultrasonic Sensor and Buzzer Example</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvp2st7fh\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvmoha0d3\">Functions</h2>\n<p>Here are the 3 basic parts that you would have in the code.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/SSTuinoIoT8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-md.png 749w\"  alt=\"\" width=\"897\" height=\"387\"></figure>\n<p>However, you can separate code into functions, which create modular pieces of code that perform a defined task. Here are some advantages when you standardise code fragments into functions:</p>\n<ul>\n<li>Functions help the programmer to stay organised and help to conceptualise the program.</li>\n<li>Functions codify one function in one place so that it only has to be thought out and debugged once.</li>\n<li>If the code has to be changed, functions also reduce the errors in modification.</li>\n</ul>\n<p>Functions can also help to have smaller code, especially if particular lines of code are used repeatedly in the program. Although functions have many advantages, do take note that Arduino still requires <code><strong>void setup()</strong></code> and <code><strong>void loop()</strong></code> for the program to work. You can place your additional functions outside of them. Now let's make use of previous examples and implement functions!</p>\n<h3 id=\"mcetoc_1fvp2st7fc\">Ultrasonic Distance Sensor Example</h3>\n<p>We are going to continue to use this circuit from our previous example.</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot19.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-md.png 749w\"  alt=\"\" width=\"1758\" height=\"970\"></figure>\n<p>Here is an edited text version of the blocks code from TinkerCAD. Firstly the device initialises the Serial Monitor. Note that it does not declare the pins inside setup(). We will cover that in the function! üòÅ</p>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n}\n</code></pre>\n<p>Now we will do up the code in loop(). We make the serial print the time taken for the sound wave to bounce back using the function readUltrasonicDistance(5,6) in microseconds and multiply that by half the speed of sound to display the distance in cm.</p>\n<p class=\"msg msg--info\"><strong>Tip: </strong>The speed of sound is 0.0343 centimetre/microsecond. We half that to 0.01723 because the time taken for the sound to bounce back is 2x the total distance (time taken to the object + time taken from the object)</p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  Serial.println(0.01723 * readUltrasonicDistance(5, 6));\n}\n</code></pre>\n<p>And finally the function! We declare it as long as we can use it in the calculation in loop(). The function essentially tells the sensor to \"fire\" the ultrasonic wave and read the time taken for it to travel to and fro.</p>\n<pre><code class=\"language-cpp\">\nlong readUltrasonicDistance(int triggerPin, int echoPin)\n{\n  pinMode(triggerPin, OUTPUT);  // Clear the trigger\n  digitalWrite(triggerPin, LOW);\n  delayMicroseconds(2);\n  // Sets the trigger pin to HIGH state for 10 microseconds\n  digitalWrite(triggerPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(triggerPin, LOW);\n  pinMode(echoPin, INPUT);\n  // Reads the echo pin, and returns the sound wave travel time in microseconds\n  return pulseIn(echoPin, HIGH);\n}\n</code></pre>\n<p>Let's try this out in the Arduino IDE! What other functions would you like to add to this code?</p>\n<h3 id=\"mcetoc_1fvp2st7fd\">Potentiometer Example</h3>\n<p>Let's try out another simple example with the Potentiometer! Set up the circuit as shown:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-md.png 749w\"  alt=\"\" width=\"1159\" height=\"563\"></figure>\n<p>Head over to the Arduino IDE and set up the code. First, let's declare the serial port, input and output pins:</p>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(A0, INPUT);\n  pinMode(6, OUTPUT);\n}\n</code></pre>\n<p>Next, let's leave <code><strong>void loop()</strong></code> alone for a bit üòÜ and set up functions! You can name your functions whatever you want, as long as it is a single word.</p>\n<pre><code class=\"language-cpp\">\nvoid pwmLed() {\n\tanalogWrite(6, (analogRead(A0) / 4));\n}\n\nvoid helloWorld() {\nSerial.println(Hello, World!);\n}\n</code></pre>\n<p>With this, we have just created 2 functions! Let us place them inside <code><strong>void loop()</strong></code></p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  helloWorld();\n  pwmLed();\n}\n</code></pre>\n<p>The advantage of using functions in this scenario is that if I would like to not make a section of code run, I do not need to comment out all the lines inside <code><strong>void loop()</strong></code>. Instead, I just have to comment out the function as so!</p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  //helloWorld(); // This code will not be run.\n  pwmLed();\n}\n</code></pre>\n<h2 id=\"mcetoc_1fvp2st7fe\">Limitations of Block Code</h2>\n<p>Programming with blocks is super simple! Just plop them in and you are good to go! Block coding is a great tool to get people started with little to no programming knowledge. However, as we move to more advanced tutorials like the Internet of Things, block coding would not be able to be used as it is rather limited. While we love introductory tools such as TinkerCAD's block coding functionality, we would like our students to move on to text-based programming languages too!</p>\n<p>Here are some limitations of block code:</p>\n<ul>\n<li>Inability to support external libraries/locked into the platform¬†</li>\n<li>Inability to use sensors that are not supported by the platform</li>\n<li>Delay based programming, not suitable for time-sensitive applications</li>\n</ul>\n<h2 id=\"mcetoc_1fvp2st7ff\">\"Multitasking\" your SSTuino</h2>\n<p>Let's make the device \"multitask\"! For the examples that we have covered so far, we have always used <code><strong>delay()</strong></code> to say light up an LED for 1 second. However, although <code><strong>delay()</strong></code> is handy and works for basic examples, it shouldn't be used in the real world...</p>\n<p>Wait, what? ü§Ø</p>\n<p>Why shouldn't we use <code><strong>delay()</strong></code>? That is because delay is a blocking function. For example, when you do <code><strong>delay(1000)</strong></code>, the Arduino stops on that line for one second. Blocking functions prevent a program from doing anything else until that particular task has been completed. If you need multiple tasks to occur at the same time, you simply cannot use <strong><code>delay()</code></strong>. If your program requires you to constantly read data (e.g. Ultrasonic Sensor), you should avoid using the delay function.</p>\n<h3 id=\"mcetoc_1fvp2st7fg\">millis() instead of delay()</h3>\n<p>Here comes <code><strong>millis()</strong></code> to the rescue! ü•≥ When called, it returns the number of milliseconds that have passed since the program first started. By doing some simple math and comparison, you can verify how much time has passed without blocking your code! Let's take a look at a blink sketch that does not use the <code><strong>delay()</strong></code> function:</p>\n<pre><code class=\"language-cpp\">\n// constants won't change. Used here to set a pin number :\nconst int ledPin =  13;      // the number of the LED pin\n\n// Variables will change :\nint ledState = LOW;             // ledState used to set the LED\n\n// Generally, you should use \"unsigned long\" for variables that hold time\n// The value will quickly become too large for an int to store\nunsigned long previousMillis = 0;        // will store last time LED was updated\n\n// constants won't change :\nconst long interval = 1000;           // interval at which to blink (milliseconds)\n\nvoid setup() {\n  // set the digital pin as output:\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  // here is where you'd put code that needs to be running all the time.\n\n  // check to see if it's time to blink the LED; that is, if the\n  // difference between the current time and last time you blinked\n  // the LED is bigger than the interval at which you want to\n  // blink the LED.\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    // save the last time you blinked the LED\n    previousMillis = currentMillis;\n\n    // if the LED is off turn it on and vice-versa:\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    // set the LED with the ledState of the variable:\n    digitalWrite(ledPin, ledState);\n  }\n}\n</code></pre>\n<p>How the code works is that it subtracts the previously recorded time (previousMillis) from the current time (currentMillis). If the remainder is greater than the interval (1000 milliseconds), the program updates the previousMillis variable to the current time, and either turn the LED on or off.</p>\n<p>As the program is non-blocking, any code that is added outside of the first if statement should work correctly. You can now add other tasks and your LED will blink every second!</p>\n<p>Using the <code><strong>millis()</strong></code> function does take a bit more work than using the <code><strong>delay()</strong></code> function but will be worth it if the program needs to multitask.</p>\n<h3 id=\"mcetoc_1fvpo53oi1c\">Ultrasonic Sensor and Buzzer Example</h3>\n<p>Let's wire up your circuit as so!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot39.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-md.png 749w\"  alt=\"\" width=\"1834\" height=\"985\"></figure>\n<p>Next, head over to the Arduino IDE where we will program the ultrasonic sensor to:</p>\n<ul>\n<li>trigger the ultrasonic wave every 1 millisecond</li>\n<li>print the distance to the serial monitor every 1 second</li>\n<li>turn on and off a buzzer every second if the distance is less than 30cm</li>\n</ul>\n<pre><code class=\"language-cpp\">\nconst int trigPin = 5; //set pin variables\nconst int echoPin = 6;\nconst int buzzerPin = 13;\n\nint trigState = LOW; //state of trigPin\nint interval = 1; // interval in milliseconds at which trigPin turns on\nint interval2 = 1000; //time in milliseconds at which the distance is printed in serial monitors\nint printState = LOW; //whether or not to print distance\nint buzzer = LOW; //whether or not buzzer is on\nunsigned long previousMillis = 0; //microsecond at which the pin was last writen\n\nvoid setup()\n{\n  Serial.begin(9600); //begin serial communication\n  pinMode(trigPin,OUTPUT); //set pinmodes\n  pinMode(echoPin,INPUT);<br>  pinMode(buzzerPin,OUTPUT);\n}\n\nvoid loop()\n{\n  unsigned long currentMillis = millis(); //time in milliseconds from which the code was started\n  if (currentMillis-previousMillis &gt;= interval) { //check \"blink without delay\" code\n    previousMillis = currentMillis;// \n    if (trigState == LOW){\n      (trigState = HIGH);\n    }\n    else {\n      (trigState = LOW);\n    }\n  }\n  // printing speed in serial monitor at an interval of 1s\n  if (currentMillis-previousMillis &gt;= interval2) { //check \"blink without delay\" code\n    previousMillis = currentMillis;\n    if (printState == LOW){\n      (printState = HIGH);\n    }\n    else {\n      (printState = LOW);\n    }\n  }\n  digitalWrite(trigPin,trigState); // Fire the pulse to measure distance\n  int duration, distance; //variables\n  duration = pulseIn(echoPin,HIGH); // Measure the time taken for the pulse\n  distance = duration * 0.01723; // Calculate speed\n  if (printState = HIGH){  //print the data to the serial monitor\n  Serial.print(distance);\n  Serial.println(\"cm\");}\n  \n  if (distance &lt;= 30){ //If distance &lt;30cm, buzzer will sound at an interval of 1s.\n    if (currentMillis-previousMillis &gt;= interval2) { //check \"blink without delay\" code\n    previousMillis = currentMillis;\n    if (buzzer == LOW){\n      (buzzer = HIGH);\n      digitalWrite(buzzerPin,HIGH);\n    }\n    else {\n      (buzzer = LOW);\n      digitalWrite(buzzerPin,LOW);\n    }\n  }\n  }\n  else{\n    digitalWrite(buzzerPin,LOW);\n  }\n}\n</code></pre>\n<h2 id=\"mcetoc_1fvp2st7fh\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://docs.arduino.cc/learn/programming/functions\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: Using functions in a sketch</a></li>\n<li><a href=\"https://randomnerdtutorials.com/why-you-shouldnt-always-use-the-arduino-delay-function/\" target=\"_blank\" rel=\"noopener noreferrer\">Random Nerd Tutorials: Why you shouldn't always use the Arduino delay function</a></li>\n<li><a href=\"https://create.arduino.cc/projecthub/Arduino_Scuola/limitations-of-delay-how-to-do-timers-correctly-833e9e\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino Project Hub: Limitations of delay() &amp; how to do timers correctly</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"#non-existing-post-with-id-25\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-04T14:43:32+08:00",
            "date_modified": "2022-04-04T18:47:23+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html",
            "title": "Light Dependent Resistor",
            "summary": "For this exercise, we will be going to use the&hellip;",
            "content_html": "<p>For this exercise, we will be going to use the Light Dependent Resistor (LDR) to trigger the RGB LED! We can make use of the LDR to turn on the RGB LED when the environment is dark, and use the potentiometer to control the colour of the LED!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvan9u4ng\">About the Component</a></li>\n<li><a href=\"#mcetoc_1fvanutqb1l\">Reading LDR value</a>\n<ul>\n<li><a href=\"#mcetoc_1fvi5ukvv4e\">Calibration of the sensor</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvao1ho31r\">Control RGB LED</a></li>\n<li><a href=\"#mcetoc_1fvi5ukvv4f\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvan9u4ng\">About the Component</h2>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/LDR.jpeg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/LDR-xs.jpeg 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/LDR-sm.jpeg 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/LDR-md.jpeg 749w\"  alt=\"\" width=\"171\" height=\"160\"></figure>\n<p>The Light Dependent Resistor (LDR/Photoresistor) is a type of resistor that reacts with light. When the amount of light it detects changes, the resistance changes. However, as there are many types of LDRs around, the way they change resistance with the amount of light would be different.</p>\n<p>As the LDR reacts to the amount of light it receives, it is very useful as automatic brightness control on your laptops and mobile devices.</p>\n<h2 id=\"mcetoc_1fvanutqb1l\">Reading LDR value</h2>\n<p>Let's create a new circuit on TinkerCAD like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot30.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-md.png 749w\"  alt=\"\" width=\"1852\" height=\"984\"></figure>\n<p>We will read the value from the LDR and output it on the serial monitor:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot14.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-md.png 749w\"  alt=\"\" width=\"447\" height=\"109\"></figure>\n<p>When running the simulation, open up the serial monitor. The result should look something like this:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot31.mp4\" type=\"video/mp4\" /></video></figure>\n<p>While I change the light intensity of the LDR, the readings also change.</p>\n<h3 id=\"mcetoc_1fvi5ukvv4e\">Calibration of the sensor</h3>\n<p>As the sensor has multiple variations, let's check yours out! Construct the circuit on your SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>After you are done uploading the code, open the serial monitor. Now note down the value when the room is lit. Afterwards, turn off the lights in the room and note down the value again. We will need this data afterwards to tell when to turn on the RGB LED.</p>\n<p class=\"msg msg--info\"><strong>Tip: </strong>If the lights in the room are unable to be turned off, you can use your hands to cover the LDR. Similarly, if your environment is originally dark, you can use the torch from your mobile device to shine at it.</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvao1ho31r\">Control RGB LED</h2>\n<p>Now let us make the sensor useful! Make it such that the LED will light up when the environment darkens, and you can use the potentiometer to control the colour. To do so, we edit our code to something like this:</p>\n<p class=\"msg msg--info\"><strong>Tip:¬†</strong>Use the average of your bright and dark value and input it inside the area (Read analog pin A0 &lt; 512)</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot32.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-md.png 749w\"  alt=\"\" width=\"530\" height=\"374\"></figure>\n<p>Afterwards, upload the code to the SSTuino. It should look like this:</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<p>If you have other ideas on how to control the RGB LED, please try them out and share them with your peers too!</p>\n<h2 id=\"mcetoc_1fvi5ukvv4f\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.adafruit.com/photocells\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Photocells</a></li>\n<li><a href=\"https://www.electronics-notes.com/articles/electronic_components/resistors/light-dependent-resistor-ldr.php\" target=\"_blank\" rel=\"noopener noreferrer\">Electronics-notes: Light Dependent Resistor</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-29T19:59:50+08:00",
            "date_modified": "2022-04-01T17:05:42+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html",
            "title": "Ultrasonic Sensor",
            "summary": "In this tutorial, we are going to learn about the&hellip;",
            "content_html": "<p>In this tutorial, we are going to learn about the Ultrasonic Sensor and read its distance using the serial monitor!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvaopr9t49\">About the Sensor</a></li>\n<li><a href=\"#mcetoc_1fvap7cft67\">Using the Sensor</a></li>\n<li><a href=\"#mcetoc_1fvi60h1c4q\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvaopr9t49\">About the Sensor</h2>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot17.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-md.jpg 749w\"  alt=\"\" width=\"221\" height=\"159\"></figure>\n<p>The ultrasonic distance sensor uses ultrasonic waves - a very high-pitched sound that we cannot hear to measure the distance it is from an object.</p>\n<p>It is in a <strong>transceiver</strong>¬†configuration, where both the transmitter and receiver are on the same sensor.</p>\n<p>One of the uses of the ultrasonic distance sensor is in the automotive industry. They are usually used as reverse warning sensors but are increasingly used in self-driving vehicles.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot21.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-md.jpg 749w\"  alt=\"\" width=\"374\" height=\"273\"></figure>\n<h2 id=\"mcetoc_1fvap7cft67\">Using the Sensor</h2>\n<p>The ultrasonic sensor we are going to use is the HC-SR04, which is commonly used in Arduino circuits:</p>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot18.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-md.png 749w\"  alt=\"\" width=\"221\" height=\"129\"></figure>\n<p class=\"msg msg--info\"><strong>Note:</strong> We are using the 4 pin sensor instead of the 3 pin version, which can be found by typing <strong>ultrasonic sensor </strong>in the component search bar.</p>\n<p>Let us go into TinkerCAD and create a new circuit. We are going to assemble it like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot19.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-md.png 749w\"  alt=\"\" width=\"1758\" height=\"970\"></figure>\n<p>We are going to program the Arduino such that the ultrasonic distance sensor will output the distance measured into the serial monitor. The code blocks have been extensively simplified by TinkerCAD and it just looks like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot20.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-md.png 749w\"  alt=\"\" width=\"1708\" height=\"130\"></figure>\n<p>This is what you will see when you start the simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot29.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's build this circuit on the SSTuino and try it out! This is what it looks like on the SSTuino:</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvi60h1c4q\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.adafruit.com/ultrasonic-sonar-distance-sensors\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Ultrasonic Sonar Distance Sensors</a></li>\n<li><a href=\"https://www.maxbotix.com/articles/how-ultrasonic-sensors-work.htm\" target=\"_blank\" rel=\"noopener noreferrer\">MaxBotix: Understanding How Ultrasonic Sensors Work</a></li>\n<li><a href=\"https://www.murata.com/en-sg/products/sensor/ultrasonic/library/apps\" target=\"_blank\" rel=\"noopener noreferrer\">muRata: Ultrasonic Sensors application guide</a></li>\n<li><a href=\"https://www.continental-automotive.com/en-gl/Passenger-Cars/Autonomous-Mobility/Enablers/Ultrasonic-Parking-Sensor\" target=\"_blank\" rel=\"noopener noreferrer\">Continental Automotive: Ultrasonic Parking Sensor</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-28T12:58:27+08:00",
            "date_modified": "2022-04-01T17:06:34+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html",
            "title": "Piezo",
            "summary": "Let us play some tunes with the SSTuino! We are&hellip;",
            "content_html": "<p>Let us play some tunes with the SSTuino! We are now going to insert a piezo element into our circuit.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvdca6hg25\">About the Piezo</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg27\">TinkerCAD Exercise</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg28\">Pieno</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg29\">Enhance the pieno</a></li>\n<li><a href=\"#mcetoc_1fvi5tdb43r\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvdca6hg25\">About the Piezo</h2>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/146-2.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/146-2-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/146-2-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/146-2-md.jpg 749w\"  alt=\"\" width=\"101\" height=\"101\"></figure>\n<p>The Piezo Buzzer provided in the kit uses the piezoelectric effect to produce sound. They are easy to drive (i.e. do not need much energy to generate sound) and are also cheap to produce.</p>\n<p>Generally, Piezo Buzzers are sold in two types:</p>\n<ul>\n<li>A fixed frequency with resonator (will have a fixed pitch when turned on)</li>\n<li>A variable frequency without a resonator (pitch can be controlled externally)</li>\n</ul>\n<p>The buzzer provided in the kit does not come with a resonator so we can change its pitch using the SSTuino.</p>\n<h2 id=\"mcetoc_1fvdca6hg27\">TinkerCAD Exercise</h2>\n<p>Let's set up the buzzer inside TinkerCAD! Configure your circuit like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot8-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-md.png 749w\"  alt=\"\" width=\"1197\" height=\"644\"></figure>\n<p>I am going to play 3 tones on the harmonic scale. Below is how I programmed it. Can you program it to play up to 1 full scale? <em>(Do, Re, Mi, Fa, So, La, Ti Do!)</em></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot9.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-md.png 749w\"  alt=\"\" width=\"879\" height=\"254\"></figure>\n<p>Let's create this circuit on the SSTuino! This is what it looks like:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvdca6hg28\">Pieno</h2>\n<p>We are now going to use the potentiometer to control the tone of the speaker. When you turn the knob on the potentiometer, the pitch of the speaker will change. With the same circuit as the previous exercise, we are going to tweak the code for the Pieno.</p>\n<p>First, we will need to create a new variable called pot. In this exercise, we are going to use the <strong>map to range </strong>function. The potentiometer has a range from <strong>0 to 1023</strong>, but the speaker has an output range of <strong>35 to 127</strong>. By mapping the range, we can make sure that when the potentiometer is at one end of the input range, the speaker is also at one end of its output range.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot10.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-md.png 749w\"  alt=\"\" width=\"494\" height=\"155\"></figure>\n<p>After you have tried this out, run the simulation and create your own music!</p>\n<p>Let's try this on the SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvdca6hg29\">Enhance the pieno</h2>\n<p>Would it be possible to add more functions to the <em>pieno</em>? Sure thing! Let us add 2 more buttons to the circuit as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot11-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-md.png 749w\"  alt=\"\" width=\"1164\" height=\"635\"></figure>\n<p>We will add two functions:</p>\n<ul>\n<li>A button to stop the music (mute button)</li>\n<li>A button to make the piezo beep intermittently</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot12.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-md.png 749w\"  alt=\"\" width=\"396\" height=\"385\"></figure>\n<p>This happens when you press start simulation:</p>\n<pre>Insert video here</pre>\n<p>Let's create this circuit on the SSTuino! This is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvi5tdb43r\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://www.allaboutcircuits.com/technical-articles/how-piezoelectric-speakers-work/\" target=\"_blank\" rel=\"noopener noreferrer\">All About Circuits: How Piezoelectric Speakers Work</a></li>\n<li><a href=\"https://learn.adafruit.com/adafruit-arduino-lesson-10-making-sounds/sound\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Making Sounds</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-27T11:41:42+08:00",
            "date_modified": "2022-04-01T17:04:48+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html",
            "title": "Passive Infra-Red Sensor",
            "summary": "Passive Infra-Red (PIR) sensors are found in a lot of&hellip;",
            "content_html": "<p>Passive Infra-Red (PIR) sensors are found in a lot of buildings and infrastructures to detect the presence of people. For example, the toilets in SST are equipped with PIR sensors to automatically turn on and off the lights to save electricity.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1l\">About the sensor</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1m\">Let's Build it!</a>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1n\">Fresnel Lens</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fv4sotai1o\">Moving into Arduino IDE</a>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1p\">Declaration</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1q\">Setup</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1r\">Loop</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fv4sotai1s\">Your Turn</a></li>\n<li><a href=\"#mcetoc_1fvmivdsr4\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fv4sotai1l\">About the sensor</h2>\n<p>There are two main components of the PIR sensor. The first one is the electronics, which detects the movement of objects crossing the sensor. The second one is the lens, which is the <em>magic sauce</em> to help the sensor increase its detection area.</p>\n<h2 id=\"mcetoc_1fv4sotai1m\">Let's Build it!</h2>\n<p>Head over to TinkerCAD and create a new circuit like the one below:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/20/arduinoPot27.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-md.png 749w\"  alt=\"\" width=\"1860\" height=\"1006\"></figure>\n<p class=\"msg msg--warning\"><strong>Warning:¬†</strong>The pinout for the PIR sensor that is provided with TinkerCAD is different from the kit! We will be talking about the sensor provided in the kit in the sections below.</p>\n<p>Here are the pinout differences between the two sensors:</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/20/gallery/PIR-Motion-Sensor-01.png\" data-size=\"226x205\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/20/gallery/PIR-Motion-Sensor-01-thumbnail.png\" alt=\"\" width=\"226\" height=\"205\"></a>\n<figcaption>Pin out of the PIR Sensor in TinkerCAD</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/20/gallery/Passive-Infrared-PIR-Sensor-Pinout-Diagram.png\" data-size=\"259x311\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/20/gallery/Passive-Infrared-PIR-Sensor-Pinout-Diagram-thumbnail.png\" alt=\"\" width=\"259\" height=\"311\"></a>\n<figcaption>Pin out of the PIR Sensor provided in the SSTuino Innovator's Kit</figcaption>\n</figure>\n</div></div>\n<h3 id=\"mcetoc_1fv4sotai1n\">Fresnel Lens</h3>\n<p>The lens for the PIR sensor helps it to detect objects from a distance! However, this will not work for a classroom environment because there will be too many people attempting this and as a result, the sensor will always detect movement! ü§£</p>\n<p>To prevent this, let us remove the lens to reduce the detection range!</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot38.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's build the circuit on the SSTuino and we will be moving into programming this example with the Arduino IDE!</p>\n<h2 id=\"mcetoc_1fv4sotai1o\">Moving into Arduino IDE</h2>\n<p>Let's start programming on the Arduino IDE! Open up the Arduino app. A new window should appear.</p>\n<p>Let's make use of this template we learned previously:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/20/SSTuinoIoT8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-md.png 749w\"  alt=\"\" width=\"897\" height=\"387\"></figure>\n<h3 id=\"mcetoc_1fv4sotai1p\">Declaration</h3>\n<p>Our code only requires us to light up the LED and send the data to the serial monitor, so I don't think there are any variables to declare. Alternatively, you can do so if you wish to for the numbering of the pins.</p>\n<h3 id=\"mcetoc_1fv4sotai1q\">Setup</h3>\n<p>This section will set up the input pins, output pins and indicate that we want to use the serial monitor.</p>\n<pre><code class=\"language-cpp\">void setup() \n{ \n    pinMode(6, INPUT); // This pin will receive the input signal from the PIR Sensor\n    pinMode(5, OUTPUT); // This pin will turn on and off the LED\n    Serial.begin(9600); // This will initialise the serial monitor\n}\n</code></pre>\n<h3 id=\"mcetoc_1fv4sotai1r\">Loop</h3>\n<p>This section will run the code forever when the SSTuino is powered on.</p>\n<pre><code class=\"language-cpp\">void loop() \n{\n  if (digitalRead(6) == 1) {\n    digitalWrite(5, HIGH); // This if statement states that if the PIR sensor detects movement, the LED will light up and serial monitor will print a new line \"Detected!\"\n    Serial.println(\"Detected!\");\n  } else {\n    digitalWrite(5, LOW); //Else the LED will turn off and print a new line \"Not Detected!\"\n    Serial.println(\"Not Detected!\");\n  }\n}\n</code></pre>\n<h2 id=\"mcetoc_1fv4sotai1s\">Your Turn</h2>\n<p>Let's try this out! This is what it looks like on the SSTuino:</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's make some changes: Could you make the LED flash on and off every second once the PIR sensor detects movement?</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvmivdsr4\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"http://www.glolab.com/pirparts/infrared.html\" target=\"_blank\" rel=\"noopener noreferrer\">Glolab: How Infrared motion detector components work</a></li>\n<li><a href=\"https://learn.adafruit.com/pir-passive-infrared-proximity-motion-sensor/how-pirs-work\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: How PIRs Work</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-26T12:09:36+08:00",
            "date_modified": "2022-04-04T21:18:36+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html",
            "title": "Potentiometer",
            "summary": "In this tutorial, we are going to read data from&hellip;",
            "content_html": "<p>In this tutorial, we are going to read data from the potentiometer and ultimately use it to control cool stuff!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fut95ja3dt\">About the Potentiometer</a></li>\n<li><a href=\"#mcetoc_1fut95ja4dv\">Using the Potentiometer</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e0\">LED Speed Control</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e1\">LED Brightness Control</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e3\">Bar Graph</a></li>\n<li><a href=\"#mcetoc_1fvi5rfai3f\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fut95ja3dt\">About the Potentiometer</h2>\n<p>The potentiometer is essentially a variable resistor. But instead of having 2 pins, it has 3 pins.</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot1.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-md.jpg 749w\"  alt=\"\" width=\"151\" height=\"151\">\n<figcaption >The Bourns 3386F 10K Ohm Potentiometer provided in the kit.</figcaption>\n</figure>\n<p>Potentiometers are used frequently and commonly on electronic devices. A simple example would be the volume knob on speakers or the light dimmers in your house!</p>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-md.png 749w\"  alt=\"\" width=\"104\" height=\"88\"></figure>\n<p>The potentiometer that is provided in the kit is a 10K Ohm potentiometer, which means that when the knob is turned fully to one end it is 0 Ohm, while at the other end it is 10K Ohm.</p>\n<h2 id=\"mcetoc_1fut95ja4dv\">Using the Potentiometer</h2>\n<p>Let us fire up TinkerCAD, create a new circuit and configure your circuit like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-md.png 749w\"  alt=\"\" width=\"1260\" height=\"579\"></figure>\n<p class=\"msg msg--info\">The potentiometer inside TinkerCAD might look different from the one provided in the kit. Fret not as they are the same, but do ensure that the potentiometer inside TinkerCAD is 10k Ohm. üôÇ</p>\n<p>Let us program the board to output the potentiometer reading in our serial monitor!</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot3.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-md.png 749w\"  alt=\"\" width=\"434\" height=\"110\"></figure>\n<p>Once you are done with the circuit and code, let's run the simulation and open the serial monitor!</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot34.mp4\" type=\"video/mp4\" /></video></figure>\n<p>As you interact with the knob on the potentiometer, you should see the number change from 0 to 1023. Why does this happen? ü§î Onboard the SSTuino, there is an Analog to Digital Converter (ADC), and it has a resolution of 10 bits.¬†</p>\n<p>Let us set up this circuit on the SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>There is a cool feature inside the Arduino IDE! You can open the serial plotter as an alternative to the serial monitor as shown:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot35.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-md.png 749w\"  alt=\"\" width=\"291\" height=\"184\"></figure>\n<p>Here is what it looks like on the SSTuino II:</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fut95ja4e0\">LED Speed Control</h2>\n<p>Let us make use of the potentiometer reading we have from the SSTuino to alter the blinking speed of the LED! Fire up TinkerCAD and make a circuit like so:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-md.png 749w\"  alt=\"\" width=\"1159\" height=\"563\"></figure>\n<p>We are going to edit the code such that the location of the knob will affect the speed at which the LED blinks:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot5.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-md.png 749w\"  alt=\"\" width=\"497\" height=\"282\"></figure>\n<p>Here is what it looks like when I press <strong>Start Simulation:</strong></p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot36.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let us build the circuit on the SSTuino! Here is what it looks like:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fut95ja4e1\">LED Brightness Control</h2>\n<p>We will use SSTuino's PWM output function to control the brightness of the LED. There are some pins with the wavy `~` sign, which means that it can output PWM signals.¬†</p>\n<p>PWM stands for Pulse Width Modulation. The pin would output a series of square waves, and depending on the duty cycle, adjusts the width of the square wave. What it essentially does is that it turns on and off the component very quickly, such that our eyes cannot see the difference.</p>\n<p>In the diagram below, you can see how the duty cycle is adjusted by changing the width of the square wave. When the duty cycle is 0, it turns off the component. From 0 to 100, it gradually increases the intensity and is a full power when at 100% duty cycle.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/Screenshot-2022-03-24-at-12.00.59.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-md.png 749w\"  alt=\"\" width=\"231\" height=\"252\"></figure>\n<p>For this exercise, we will use the same circuit and just edit the code:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot6.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-md.png 749w\"  alt=\"\" width=\"538\" height=\"134\"></figure>\n<p>The input is divided by 4 as the range of the PWM output is only from 0-255, while the Analog input is from 0 to 1024<br><br>This is the result I should get:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot37.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Copy this circuit over to your SSTuino board setup.</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>Here is what it looks like on the SSTuino II:</p>\n<h2 id=\"mcetoc_1fut95ja4e3\">Bar Graph</h2>\n<p>Let us control many LEDs using the Potentiometer! The aim is to vary the number of LEDs lit up when the knob of the potentiometer is turned.</p>\n<p>Setup the circuit in TinkerCAD as shown below:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot25.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-md.png 749w\"  alt=\"\" width=\"425\" height=\"507\"></figure>\n<p>In the code, we will be using the¬†<strong>map</strong> function to map the range of the potentiometer input (0 - 1023) to the output pins (2 - 7). The higher the readout from the potentiometer, the more LEDs are light up.</p>\n<p>Below is an embed of the TinkerCAD example. Press on <strong>code</strong> to see the block code. Do you have alternative ways?</p>\n<iframe loading=\"lazy\" width=\"725\" height=\"453\" src=\"https://www.tinkercad.com/embed/45bdZnBKqGZ?editbtn=1\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n<p class=\"msg msg--info\">If you are unable to load this embed, head to <a href=\"https://www.tinkercad.com/things/45bdZnBKqGZ\" target=\"_blank\" rel=\"noopener noreferrer\">this link</a></p>\n<p>In text programming, you can simplify this too! How can it be done?</p>\n<p>This is how it works on the SSTuino II:</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvi5rfai3f\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://www.electronics-tutorials.ws/resistor/potentiometer.html\" target=\"_blank\" rel=\"noopener noreferrer\">Electronics Tutorials: Potentiometers</a></li>\n<li><a href=\"https://www.digikey.sg/en/products/detail/bourns-inc/3386F-1-103TLF/1232544\" target=\"_blank\" rel=\"noopener noreferrer\">Digikey Singapore: Bournes 3386F Potentiometer</a></li>\n<li><a href=\"https://www.arduino.cc/en/Reference/AnalogRead\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: analogRead</a></li>\n<li><a href=\"https://learn.sparkfun.com/tutorials/analog-to-digital-conversion/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun: Analog to Digital Conversion</a></li>\n<li><a href=\"https://docs.arduino.cc/learn/microcontrollers/analog-output\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: Basics of Pulse Width Modulation</a></li>\n<li><a href=\"https://learn.sparkfun.com/tutorials/pulse-width-modulation/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun Learn: Pulse Width Modulation</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-24T14:19:13+08:00",
            "date_modified": "2022-04-01T17:03:46+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html",
            "title": "From Blocks to Code, Part 1",
            "summary": "This tutorial aims to teach you the basics of text&hellip;",
            "content_html": "<p>This tutorial aims to teach you the basics of text coding, using the Arduino IDE. We started using the IDE to edit code frequently and will be using it to program increasingly complex projects in the future.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvhtc1p6gf\">Basic Building Blocks</a></li>\n<li><a href=\"#mcetoc_1fvhtc1p6gg\">Data Types</a></li>\n<li><a href=\"#mcetoc_1fvhtc1p6gh\">Conversion of Data Types</a>\n<ul>\n<li><a href=\"#mcetoc_1fvhtc1p6gi\">String to Int</a>\n<ul>\n<li><a href=\"#mcetoc_1fvhtc1p6gj\">Example Code</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvhtc1p6gk\">String to Float</a>\n<ul>\n<li><a href=\"#mcetoc_1fvhtc1p6gl\">Example Code</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvhtc1p6gm\">Converting different data types to String</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvhtc1p6gn\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvhtc1p6gf\">Basic Building Blocks</h2>\n<figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\" src=\"https://knowledge.fourier.industries/media/posts/18/SSTuinoIoT8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-md.png 749w\"  alt=\"\" width=\"897\" height=\"387\"></figure>\n<p><strong>Declaration -¬†</strong>Used to declare the libraries and variables used in the code. For example, the variable <code>temp</code> is declared as an integer and has the starting value of 0.</p>\n<p><strong>Setup -¬†</strong>Code that is run once to set up your SSTuino. For example, the <code>Serial.begin(9600);</code> tells it to start the serial monitor with a baud rate (speed) of 9600bps (bits per second)</p>\n<p><strong>Loop -¬†</strong>Code that is repeated forever, when the microcontroller is powered. For example, the code inside the example tells it to output temperature data using the serial monitor every 10 milliseconds.</p>\n<h2 id=\"mcetoc_1fvhtc1p6gg\">Data Types</h2>\n<p>In programming, there are various data types. Some are used to store text, and others are used to store more complicated types of data. The common data types include:</p>\n<ul>\n<li><strong>String (<code>String</code>)</strong> - a combination of characters on the keyboard (letters, numbers symbols)</li>\n<li><strong>Character (<code>char</code>)</strong> - single letters like <code>'a'</code></li>\n<li><strong>Integer (<code>int</code>)</strong> - whole numbers ranging from -32,768 to +32,767</li>\n<li><strong>Float (<code>float</code>) </strong>- numbers that contain decimal points like 25.6</li>\n<li><strong>Boolean (<code>bool</code>)¬†</strong>- either <code>true</code> or <code>false</code>. Can also be used to represent a pin state like <code>HIGH</code> or <code>LOW</code>.</li>\n</ul>\n<p>In many programming languages, variables must be declared before they can be used. Here are some examples that are used in Arduino:</p>\n<pre><code class=\"language-cpp\">String password = \"hello world\";\nint temp = 0;\nbool logicStatement = false;\nbool ledState = HIGH;\nfloat temperature = 25.6;\n</code></pre>\n<h2 id=\"mcetoc_1fvhtc1p6gh\">Conversion of Data Types</h2>\n<p>There are expressions that contain variables and constants of different data types. If you need to calculate the expressions, they will need to be converted to the same data type. Below are some common conversion types to help you.</p>\n<h3 id=\"mcetoc_1fvhtc1p6gi\">String to Int</h3>\n<p><code>toInt()</code> - Converts String to Integer. The input string should start with an integer. If the string contains non-integers, the function will stop performing the conversion. In the event where the conversion could not be performed as the String does not start with an integer, a zero (data type: long) is returned.¬†</p>\n<h4 id=\"mcetoc_1fvhtc1p6gj\">Example Code</h4>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n\n  String myString = \"20\";\n  int myInt = myString.toInt(); //This is where the toInt() Function is used\n  Serial.println(myInt);\n}\n\nvoid loop() {\n}\n</code></pre>\n<p>You can copy this code to your Arduino IDE and try it out!</p>\n<h3 id=\"mcetoc_1fvhtc1p6gk\">String to Float</h3>\n<p><code>toFloat()</code> - Converts String to Float. The input string should start with a digit. If the string contains non-digits, the function will stop performing the conversion. In the event where the conversion could not be performed as the String does not start with a digit, a zero (data type: float) is returned.</p>\n<h4 id=\"mcetoc_1fvhtc1p6gl\">Example Code</h4>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n\n  String myString = \"20.56\";\n  float myFloat = myString.toFloat(); //This is where the toFloat() Function is used\n  Serial.println(myFloat);\n}\n\nvoid loop() {\n}\n</code></pre>\n<p>You can copy this code to your Arduino IDE and try it out!</p>\n<h3 id=\"mcetoc_1fvhtc1p6gm\">Converting different data types to String</h3>\n<p>The below code section shows how different data types can be converted to String.</p>\n<pre><code class=\"language-cpp\">\nString stringOne = \"Hello String\";                    // using a constant String\nString stringOne = String('a');                       // converting a constant char into a String\nString stringTwo = String(\"This is a string\");        // converting a constant string into a String object\nString stringOne = String(stringTwo + \" with more\");  // concatenating two strings\nString stringOne = String(13);                        // using a constant integer\nString stringOne = String(analogRead(0), DEC);        // using an int and a base\nString stringOne = String(45, HEX);                   // using an int and a base (hexadecimal)\nString stringOne = String(255, BIN);                  // using an int and a base (binary)\nString stringOne = String(millis(), DEC);             // using a long and a base\nString stringOne = String(5.698, 3);                  // using a float and the decimal places\n</code></pre>\n<h2 id=\"mcetoc_1fvhtc1p6gn\">Resources and Going Further</h2>\n<p>For the more experienced programmers amongst you, do keep in mind that Arduino uses variables in the same way C and C++ do. You can have special variables like unsigned variables (e.g. <code>unsigned int</code>) to represent positive-only numbers, as well as character arrays (e.g. <code>char myString[] = \"string here\";</code>) to represent a string instead of using Arduino's <code>String</code> object.</p>\n<p>For more information on the intricacies of C and C++ style data types, you can refer to this link below for Sparkfun's take on this issue:</p>\n<ul>\n<li><a href=\"https://learn.sparkfun.com/tutorials/data-types-in-arduino/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun's Guide on Data Types in Arduino</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-21T20:53:01+08:00",
            "date_modified": "2022-04-01T14:35:37+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html",
            "title": "Variables and Operators",
            "summary": "In this tutorial, we will cover the usage of variables&hellip;",
            "content_html": "<p>In this tutorial, we will cover the usage of variables and AND/OR Operators.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fulqia872go\">Naming your variables</a></li>\n<li><a href=\"#mcetoc_1fulqia872gp\">Logic Operations</a>\n<ul>\n<li><a href=\"#mcetoc_1fulqia872gq\">Some history...</a></li>\n<li><a href=\"#mcetoc_1fulqia872gr\">AND Operator</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fulqia872gs\">OR Operator</a></li>\n<li><a href=\"#mcetoc_1fulqia872gt\">OR Operator exercise</a></li>\n<li><a href=\"#mcetoc_1fulqia872gv\">AND Operator exercise</a></li>\n<li><a href=\"#mcetoc_1fulqia872h0\">Drag Race example</a></li>\n<li><a href=\"#mcetoc_1fulqia872h1\">Toggle Switch</a></li>\n<li><a href=\"#mcetoc_1fvi5lvf516\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fulqia872go\">Naming your variables</h2>\n<p>After some tinkering with your coding, you may realise that it may be a hassle to change for example a pin, like this example code:</p>\n<pre><code class=\"language-cpp\">\nvoid setup()\n{\n  pinMode(13, OUTPUT);\n}\n\nvoid loop()\n{\n  digitalWrite(13, HIGH);\n  delay(1000); // Wait for 1000 millisecond(s)\n  digitalWrite(13, LOW);\n  delay(1000); // Wait for 1000 millisecond(s)\n}\n</code></pre>\n<p>Imagine that you would have to change all the <code>pin 13</code> to another pin, and would have to scan through the entire code just to change all these values! Isn't it a hassle to change all these numbers?</p>\n<p><em>Introducing... Variable names. </em>üòé Here is a modified version of the code above:</p>\n<pre><code class=\"language-cpp\">\nint LED = 13;\nint wait = 1000;\n\nvoid setup()\n{\n  pinMode(LED, OUTPUT);\n}\n\nvoid loop()\n{\n  digitalWrite(LED, HIGH);\n  delay(wait); // Wait for 1000 millisecond(s)\n  digitalWrite(13, LOW);\n  delay(wait); // Wait for 1000 millisecond(s)\n}\n</code></pre>\n<p><em><strong>Voil√†!</strong></em> I have managed to change all the numbers to variable names. For example, in the event I want to adjust the <code>delay()</code> function in the code, I just have to change the <code>1000</code> in the <code>int wait=1000;</code> into a different number! Now that's straightforward.¬†<em>How about you try it out now?</em></p>\n<h2 id=\"mcetoc_1fulqia872gp\">Logic Operations</h2>\n<p>Logical operations are introduced when we need to evaluate related expressions to return a single value. For this tutorial, we are going to introduce the AND/OR Operators.</p>\n<h3 id=\"mcetoc_1fulqia872gq\">Some history...</h3>\n<p>Back when technology was not this advanced, the various operators were actual hardware logic gates that were placed into the circuit. The chips looked something like this:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton15.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-md.jpg 749w\"  alt=\"\" width=\"390\" height=\"317\"></figure>\n<p>Technology has come a long way, squeezing billions of transistors inside a single chip to provide us with a fast, modern computer.</p>\n<h3 id=\"mcetoc_1fulqia872gr\">AND Operator</h3>\n<p>How it works is that if both Input 1 and Input 2 are <code>high</code>, it will give a <code>high</code> output, as illustrated in this table (emojis added to help you understand üòÑ):</p>\n<table class=\"table-bordered\" style=\"border-collapse: collapse; width: 100%; height: 251.797px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\"><strong>Input 1</strong></td>\n<td style=\"width: 33.2855%; height: 50.3594px;\"><strong>Input 2</strong></td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><strong>Output</strong></td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">0 üò°</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">0 üò°</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\">0 üò°</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">0 üò°</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">1 üôÇ</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\">0 üò°</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">1 üôÇ</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">0 üò°</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\">0 üò°</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">1 üôÇ</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">1 üôÇ</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\">1 üôÇ</td>\n</tr>\n</tbody>\n</table>\n<p>¬†</p>\n<h2 id=\"mcetoc_1fulqia872gs\">OR Operator</h2>\n<p>How it works is that if either Input 1 <strong>OR</strong> Input 2 are <code>high</code>, it will give a <code>high</code> output. If both Inputs are <code>high</code>, it will also give a <code>high</code> output, as illustrated in this table (Emojis added to help you understand üòÑ):¬†</p>\n<table class=\"table-bordered\" style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 33.2855%;\"><strong>Input 1</strong></td>\n<td style=\"width: 33.2855%;\"><strong>Input 2</strong></td>\n<td style=\"width: 33.2866%;\"><strong>Output</strong></td>\n</tr>\n<tr>\n<td style=\"width: 33.2855%;\">0 üò°</td>\n<td style=\"width: 33.2855%;\">0 üò°</td>\n<td style=\"width: 33.2866%;\">0 üò°</td>\n</tr>\n<tr>\n<td style=\"width: 33.2855%;\">0 üò°</td>\n<td style=\"width: 33.2855%;\">1 üôÇ</td>\n<td style=\"width: 33.2866%;\">1 üôÇ</td>\n</tr>\n<tr>\n<td style=\"width: 33.2855%;\">1 üôÇ</td>\n<td style=\"width: 33.2855%;\">0 üò°</td>\n<td style=\"width: 33.2866%;\">1 üôÇ</td>\n</tr>\n<tr>\n<td style=\"width: 33.2855%;\">1 üôÇ</td>\n<td style=\"width: 33.2855%;\">1 üôÇ</td>\n<td style=\"width: 33.2866%;\">1 üôÇ</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mcetoc_1fulqia872gt\">OR Operator exercise</h2>\n<p>Let us create a new circuit in TinkerCAD like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton16.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-md.png 749w\"  alt=\"\" width=\"1818\" height=\"843\"></figure>\n<p>Next, we will need to edit the code such that the LED would light up once <strong>one</strong> of the buttons is pressed:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton17.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-md.png 749w\"  alt=\"\" width=\"1897\" height=\"501\"></figure>\n<p>You would see this when you start simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton34.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Here is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton38.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fulqia872gv\">AND Operator exercise</h2>\n<p>With the same example, we just have to change one part of the code to this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton21.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-md.png 749w\"  alt=\"\" width=\"2032\" height=\"536\"></figure>\n<p class=\"msg msg--info\"><strong>Tip: </strong>To activate the two buttons, you would have to press and hold <strong>SHIFT</strong> on your keyboard while clicking the buttons to activate both buttons.</p>\n<p>You would see this when you start simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton35.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Here is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton39.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fulqia872h0\">Drag Race example</h2>\n<p>Let us duplicate the circuit we have just created in the previous section.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton22.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-md.png 749w\"  alt=\"\" width=\"636\" height=\"374\"></figure>\n<p>We will need to have 3 LEDs this time, to show that:</p>\n<table class=\"table-bordered\" style=\"border-collapse: collapse; width: 100%; height: 251.797px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\"><strong>Button 1</strong></td>\n<td style=\"width: 33.2855%; height: 50.3594px;\"><strong>Button 2</strong></td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><strong>Output</strong></td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">Not Pressed</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">Not Pressed</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><span style=\"color: #e03e2d;\">Red</span> LED</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">Not Pressed</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">Pressed</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><span style=\"color: #f1c40f;\">Yellow</span> LED</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">Pressed</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">Not Pressed</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><span style=\"color: #f1c40f;\">Yellow</span> LED</td>\n</tr>\n<tr style=\"height: 50.3594px;\">\n<td style=\"width: 33.2855%; height: 50.3594px;\">Pressed</td>\n<td style=\"width: 33.2855%; height: 50.3594px;\">Pressed</td>\n<td style=\"width: 33.2866%; height: 50.3594px;\"><span style=\"color: #2dc26b;\">Green</span> LED</td>\n</tr>\n</tbody>\n</table>\n<p>The circuit is built as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton23-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-md.png 749w\"  alt=\"\" width=\"1915\" height=\"872\"></figure>\n<p class=\"msg msg--highlight  msg--success\">How would you program this circuit?</p>\n<p>Here is how I did it:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton24.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-md.png 749w\"  alt=\"\" width=\"1206\" height=\"812\"></figure>\n<p>Here is how the code works:</p>\n<ol>\n<li>Are any of the buttons pressed? If yes go to 2, if not, Red LED.</li>\n<li>Are both of the buttons pressed? If yes, Green LED, if not, Yellow LED.</li>\n</ol>\n<p>So would there be other ways to do it? <em>Certainly!</em> This is just one of the ways you can do it! There are many ways to make it work the same way also!</p>\n<p>For the above code, this is what happens when I press¬†<strong>Start Simulation:</strong></p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton36.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Here is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton40.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fulqia872h1\">Toggle Switch</h2>\n<p>Let us assume that we only have a button to control our lighting. Based on previous examples, if you were want to light up the LED, you would have to press and hold the LED right? What if I was to use the washroom and want the lights to be on? I would then have to press and hold the button for the lights to remain on! üò± To make our lives much better, we can make our button into a toggle switch with some coding... ü•≥</p>\n<p>Build a circuit as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-md.png 749w\"  alt=\"\" width=\"1929\" height=\"853\"></figure>\n<p>For the program, we would have to introduce variables. To create variables, navigate here:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton27.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-md.png 749w\"  alt=\"\" width=\"260\" height=\"230\"></figure>\n<p>Create the variables <code>btn</code> and <code>led</code>. We are going to use these variables to store the state of the button and LED. What this means is that if the button is pressed, I change the state of the variable, and it will remember the state. This also means that if I press and hold the button, it does not spam the ON command. It will just activate once. Same with the LED.</p>\n<p>Here is how the program can be coded:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/17/arduinoButton28.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-md.png 749w\"  alt=\"\" width=\"1152\" height=\"1014\"></figure>\n<p class=\"msg msg--success\">You can explore other ways of programming this too!</p>\n<p>Did you manage to do it? If you did, that's great! Do help your peers out too!</p>\n<p>You would see this when you start simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton37.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Here is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton41.mp4\" type=\"video/mp4\" /></video></figure>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvi5lvf516\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://www.electronics-tutorials.ws/category/logic\" target=\"_blank\" rel=\"noopener noreferrer\">Electronic Tutorials: Logic Gates</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-21T16:41:50+08:00",
            "date_modified": "2022-04-01T17:01:06+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html",
            "title": "Pull-up resistors and If/Else Statements",
            "summary": "In this tutorial, we will learn about pull up resistors,&hellip;",
            "content_html": "<p>In this tutorial, we will learn about pull up resistors, and use push buttons to control lighting.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fulqiifr2he\">Pull-up resistors</a></li>\n<li><a href=\"#mcetoc_1fulqiifr2hg\">Buttons and If/Else Statement</a></li>\n<li><a href=\"#mcetoc_1fulqiifr2hh\">Control your lights</a></li>\n<li><a href=\"#mcetoc_1fulqiifr2hf\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fulqiifr2he\">Pull-up resistors</h2>\n<p>Pull-up resistors are found in digital logic devices and microcontrollers. When a pin in say, the SSTuino is connected as an input and tries to read the state of the pin, it is very difficult to determine whether the pin is actually high or low, due to a lot of factors such as noise in the circuit. This effect is referred to as floating.<br><br>To eliminate this, we will place a pull-up resistor to ensure that the pin is either in its <code>HIGH</code> or <code>LOW</code> state, while using a little bit of current. Pull-up resistors are usually used on buttons and switches where there is a possibility of signal noise.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://cdn.sparkfun.com/assets/6/f/b/c/7/511568b6ce395f1b40000000.jpg\" data-is-external-image=\"true\"  alt=\"\" width=\"315\" height=\"231\"></figure>\n<h2 id=\"mcetoc_1fulqiifr2hg\">Buttons and If/Else Statement</h2>\n<p>We are going to read very simple data from a push button, to know whether it has been pressed or not. Set up your circuit as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/15/arduinoButton1-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-md.png 749w\"  alt=\"\" width=\"1809\" height=\"789\"></figure>\n<p>Next, go to the coding section and then program it like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/15/arduinoButton2-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-md.png 749w\"  alt=\"\" width=\"639\" height=\"329\"></figure>\n<p>What this code does is that the Arduino would wait for the button to be pressed. <strong>If</strong> the button is not pressed, it would output \"Not pressed!\" in the serial monitor. <strong>Else</strong>, it would output \"pressed!\" in the serial monitor. This is how a simple If/Else statement works!</p>\n<p>Now start the simulation and then press the serial monitor:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton3.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's copy this circuit to your SSTuino!¬†</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>After the code has been uploaded to the SSTuino, let's head to the serial monitor of the Arduino IDE:</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton29.png\" data-size=\"1002x494\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton29-thumbnail.png\" alt=\"\" width=\"749\" height=\"369\"></a>\n<figcaption>You can click on the top right hand corner of the Arduino IDE,</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton30.png\" data-size=\"1168x756\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton30-thumbnail.png\" alt=\"\" width=\"749\" height=\"485\"></a>\n<figcaption>or go to Tools &gt; Serial Monitor.</figcaption>\n</figure>\n</div></div>\n<p>Here is how the circuit looks like:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton32.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fulqiifr2hh\">Control your lights</h2>\n<p><em>This time with coding! </em>üòÅ With the data we have read from the push button, we can use it to trigger a reaction. Set up your circuit in TinkerCAD as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/15/arduinoButton4-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-md.png 749w\"  alt=\"\" width=\"1929\" height=\"853\"></figure>\n<p>Next, we will need to edit the code such that the LED will light up when the button is pressed:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/15/arduinoButton5.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-md.png 749w\"  alt=\"\" width=\"1064\" height=\"680\"></figure>\n<p>The block code is similar to the previous exercise, but with LEDs added this time. This will happen after you start simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton31.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's copy this circuit over to your SSTuino! This is how it should look like:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoButton33.mp4\" type=\"video/mp4\" /></video></figure>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fulqiifr2hf\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.sparkfun.com/tutorials/pull-up-resistors/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun: Pull up resistors</a></li>\n<li><a href=\"https://learn.adafruit.com/circuit-playground-digital-input/floating-inputs\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Floating pins</a></li>\n<li><a href=\"https://www.mouser.com/blog/dont-leave-your-pins-floating\" target=\"_blank\" rel=\"noopener noreferrer\">Mouser: Don't leave your pins floating</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-20T11:28:46+08:00",
            "date_modified": "2022-04-01T16:59:52+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii.html",
            "title": "Programming the SSTuino II",
            "summary": "In this tutorial, we will discuss the programming language that&hellip;",
            "content_html": "<p>In this tutorial, we will discuss the programming language that the SSTuino II uses, and explore some examples.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fuihi7fh13k\">Virtual Programming</a></li>\n<li><a href=\"#mcetoc_1fuihi7fh13l\">Pin 13</a></li>\n<li><a href=\"#mcetoc_1fuihi7fh13m\">Transfer program from TinkerCAD to Arduino IDE</a></li>\n<li><a href=\"#mcetoc_1fuihi7fh13o\">Uploading code from Arduino IDE to SSTuino II</a></li>\n<li><a href=\"#mcetoc_1fuihi7fh13p\">Built-in LED</a></li>\n<li><a href=\"#mcetoc_1fvi5ghb7q\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fuihi7fh13k\">Virtual Programming</h2>\n<p>Before we go into programming with the Arduino IDE, let us take things slow with the coding functionality on TinkerCAD!</p>\n<p>The Arduino programming language is very similar to the <a href=\"https://en.wikipedia.org/wiki/C%2B%2B\" target=\"_blank\" rel=\"noopener noreferrer\">C/C++ Language</a> and are actually C/C++ functions that can be called into your code. When the code is uploaded onto the SSTuino, the compiler inside the Arduino IDE will convert it to something that the microcontroller can read. For documentation regarding the Arduino IDE, please visit <a href=\"https://docs.arduino.cc/software/ide-v1/tutorials/arduino-ide-v1-basics\" target=\"_blank\" rel=\"noopener noreferrer\">this website.</a></p>\n<p>Create a new circuit on TinkerCAD, and set it up like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg1-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-md.png 749w\"  alt=\"\" width=\"1836\" height=\"679\"></figure>\n<p>Once you set it up and press start simulation, notice the LED on the Arduino blinking? Why does this happen?</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/arduinoProg2.mp4\" type=\"video/mp4\" /></video></figure>\n<p>The reason this happens is that TinkerCAD automatically inserts a sample code when you add the Arduino into the circuit. Stop the simulation and press the <strong>Code</strong> button. You should see something like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg3-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-md.png 749w\"  alt=\"\" width=\"2880\" height=\"1362\"></figure>\n<p>TinkerCAD is very simple to use as you can use block coding to program the Arduino, and might be familiar if you have done block coding before with environments like Scratch or MIT App Inventor.</p>\n<p>If you would like to program with text in TinkerCAD, you can also do so like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg10-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-md.png 749w\"  alt=\"\" width=\"910\" height=\"379\"></figure>\n<p>They also have another format called Blocks + Code. The text code changes according to the blocks that you place.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg11-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-md.png 749w\"  alt=\"\" width=\"1662\" height=\"822\"></figure>\n<p class=\"msg msg--info\"><strong>Tip:</strong> TinkerCAD will delete your blocks if you switch over to text-based programming and vice versa (i.e. your text programming will be deleted if you switch back to block based programming). <img loading=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%;\" src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg12.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-md.png 749w\"  alt=\"\"></p>\n<p>So what does this block of code do? It tells the Arduino to:</p>\n<ul>\n<li>Turn <strong>on</strong> the built-in LED for 1 second,</li>\n<li>Turn <strong>off</strong> the built-in LED for 1 second</li>\n</ul>\n<p>and it repeats all over until you turn off the circuit by unplugging the Arduino from the power source. In Arduino programming, <strong>HIGH</strong> means to turn something on or give it power, while <strong>LOW</strong> means to turn something off or to not give it power. For this code, there are only 2 states, <strong>HIGH or LOW.</strong> This means that it is either on or off and there is no value in between (either 1 or 0).<br><br>Now change the value of the <a href=\"#\" class=\"btn btn--yellow\">wait ___ seconds</a> to something that you like. What happens then?</p>\n<h2 id=\"mcetoc_1fuihi7fh13l\">Pin 13</h2>\n<p>Now, let us connect up this circuit:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg4-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-md.png 749w\"  alt=\"\" width=\"1919\" height=\"955\"></figure>\n<p>After you start the simulation, it should look something like this:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoProg5.mp4\" type=\"video/mp4\" /></video></figure>\n<p><em>Wait a minute...</em> How come the LED attached turns on and off even though I did not program it? Well, the reason behind it is that the built in LED on the Arduino board is also connected to pin 13. This means in the program, <code>LED_BUILTIN</code> is also pin 13.</p>\n<p class=\"msg msg--info\">For the Arduino Uno in TinkerCAD, the <code>LED_BUILTIN</code>¬†LED pin is the same as pin 13. On the SSTuino II, the <code>LED_BUILTIN</code> LED pin and pin 13 is separate. The SSTuino II has more pins available compared to the Arduino Uno, so we assigned these 2 pins separate from each other. This means that pin 13 does not affect the <code>LED_BUILTIN</code>¬†LED!</p>\n<h2 id=\"mcetoc_1fuihi7fh13m\">Transfer program from TinkerCAD to Arduino IDE</h2>\n<p>In TinkerCAD, another awesome feature is the ability to download the program that you have coded just now! Go to code, and press the download button:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg6.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-md.png 749w\"  alt=\"\" width=\"2880\" height=\"1360\"></figure>\n<p>A <code>.ino</code> file will be downloaded on your LD and can be used on the Arduino IDE. Open the file and you would see a pop-up message. Click on ok. A folder will be generated and you will see the code appear in the Arduino IDE.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg7.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-md.png 749w\"  alt=\"\" width=\"376\" height=\"129\"></figure>\n<p>The Arduino app that you are using right now is called an <strong>Integrated Development Environment</strong> or <strong>IDE</strong>. It is one of the programs that you can program your SSTuino II in. Let us analyse the code we see here:¬†</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-md.png 749w\"  alt=\"\" width=\"306\" height=\"368\"></figure>\n<p>Here is an explanation of how most basic Arduino code works:</p>\n<pre><code class=\"language-cpp\">\n// These two slashes indicate a comment\n/* This also indicates a comment \nThe brackets () indicate a function e.g. int main()\n*/\nvoid setup() //This is only run once when the device first powers up.\n{ //&lt;- The curly brackets are very important. Place them carefully to avoid confusion.\n    pinMode(13, OUTPUT); \n    /*\n    Why is pinMode written as so? That is due to the practice of using camelCase for writing code.\n    We declare pin 13 as the output pin. It can also be written as pinMode(LED_BUILTIN, OUTPUT).\n    The state \"OUTPUT\" must be written in CAPITAL LETTERS.\n    \n    It is also very important to place a semicolon \";\" when you finish your \"sentence\", just like\n    how you write sentences in your essays.\n    */\n    \n}\n\nvoid loop() //loop = runs forever till the end of time (or until you turn off the power)\n{\n  digitalWrite(13, HIGH);// Turn on pin 13\n  delay(1000); // Wait for 1000 millisecond(s)\n  digitalWrite(13, LOW);// Turn off pin 13\n  delay(1000); // Wait for 1000 millisecond(s)\n\n  /* \n  The section above will turn on and off the LED. Note the CAPITAL LETTERS on the \"HIGH\" and \"LOW\"\n  */\n}\n</code></pre>\n<h2 id=\"mcetoc_1fuihi7fh13o\">Uploading code from Arduino IDE to SSTuino II</h2>\n<p>Let us connect our SSTuino like this:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/sstuinoiiDigital.jpeg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-xs.jpeg 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-sm.jpeg 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-md.jpeg 749w\"  alt=\"\" width=\"1008\" height=\"756\"></figure>\n<p>In your Arduino IDE, we will need to configure it to upload code to the SSTuino II.</p>\n<ul>\n<li>Plug in the SSTuino II into your LD</li>\n<li>Select the SSTuino II from\n<ul>\n<li><strong>Tools &gt; Board &gt; SSTuino II &gt; SSTuino II Rev A</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg14.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-md.png 749w\"  alt=\"\" width=\"514\" height=\"251\"></figure>\n<ul>\n<li>Select the correct port:</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg15.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-md.png 749w\"  alt=\"\" width=\"534\" height=\"268\"></figure>\n<ul>\n<li>Upload your code with this button</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg13.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-md.png 749w\"  alt=\"\" width=\"306\" height=\"369\"></figure>\n<p>You should see your circuit light up like this:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/sstuinoiiDigital1.mp4\" type=\"video/mp4\" /></video></figure>\n<p>With this example, we can see that the built-in LED for the SSTuino II is different from the Arduino Uno in TinkerCAD.</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/sstuinoiiDigital4.mp4\" type=\"video/mp4\" /></video></figure>\n<p>The explorer board has a cool feature to help to see if you have connection issues in your circuit!</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/sstuinoiiDigital2.mp4\" type=\"video/mp4\" /></video></figure>\n<p>For this particular example, if I connect the LED incorrectly (e.g. wrong LED polarity), you will notice that the LED on the Explorer Board lights up, but not the LED on the breadboard. I can use this information to diagnose what went wrong with the circuit, instead of wondering if I made a mistake on the circuit or in the programming instead.</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/sstuinoiiDigital3.mp4\" type=\"video/mp4\" /></video></figure>\n<p>This is a neat feature that we hope you would enjoy. üôÇ</p>\n<h2 id=\"mcetoc_1fuihi7fh13p\">Built-in LED</h2>\n<p>If you would like to use the built-in LED on the SSTuino II, you can always do so. Here is a basic example on the Arduino IDE to get you started. Go to:</p>\n<p><strong> File &gt; Examples &gt; 01. Basic &gt; Blink</strong></p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/14/arduinoProg16.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-md.png 749w\"  alt=\"\" width=\"401\" height=\"173\"></figure>\n<p>Plug in your SSTuino II and upload the code. You should see this on the SSTuino II. The Built-in LED on the SSTuino II lights up but not the LED at Pin 13.</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n<source src=\"media/files/sstuinoiiDigital5.mp4\" type=\"video/mp4\" /></video></figure>\n<p class=\"msg msg--info\">Please note that the built-in LED and Pin 13 on the SSTuino II are different pins. üôÇ</p>\n<h2 id=\"mcetoc_1fvi5ghb7q\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Camel_case\">Wikipedia Article: camelCase</a></li>\n<li><a href=\"https://www.arduino.cc/reference/en/\">Official Arduino Language Reference</a></li>\n<li><a href=\"https://www.codecademy.com/learn/learn-c-plus-plus\">Codecademy Course: C++</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-6.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-19T13:48:41+08:00",
            "date_modified": "2022-04-01T16:57:50+08:00"
        }
    ]
}
