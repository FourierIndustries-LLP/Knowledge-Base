{
    "version": "https://jsonfeed.org/version/1",
    "title": "FourierIndustries Knowledge Base",
    "description": "",
    "home_page_url": "https://knowledge.fourier.industries",
    "feed_url": "https://knowledge.fourier.industries/feed.json",
    "user_comment": "",
    "icon": "https://knowledge.fourier.industries/media/website/logo-3.png",
    "author": {
        "name": "FourierIndustries LLP"
    },
    "items": [
        {
            "id": "https://knowledge.fourier.industries/transmit-and-receive.html",
            "url": "https://knowledge.fourier.industries/transmit-and-receive.html",
            "title": "Transmit and Receive",
            "summary": "In this lesson, we will be learning how to send&hellip;",
            "content_html": "<p>In this lesson, we will be learning how to send and receive data to and from Ubidots. Let‚Äôs go!</p>\n<h2>\"Publishing\" Data to Ubidots MQTT</h2>\n<p>Let us send (‚Äúpublish‚Äù) some data to Ubidots! We will be sending the ambient temperature to Ubidots with our TMP36 temperature sensor.</p>\n<p>Open the previous Arduino code where we went through all the Wi-Fi passwords and Ubidots tokens (you should have saved it as ‚ÄúConnect‚Äù), and save it as a new project (name it something like ‚ÄúPublish‚Äù).</p>\n<h3>Arduino Hookup</h3>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/27/arduinoPot40.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-md.png 749w\"  alt=\"\" width=\"1837\" height=\"854\"></figure>\n<p>You will need to connect your SSTuino according to the diagram above, with the TMP36 sensor's output connected to Analog In A0.</p>\n<h3>Transplanting Code</h3>\n<p>Now, let‚Äôs look at the TMP36 code that we built previously in TinkerCAD. It should look something like this:</p>\n<pre><code class=\"language-cpp\">// C++ code\n//\nint temp = 0;\n\nvoid setup()\n{\n  pinMode(A0, INPUT);\n  Serial.begin(9600);\n}\n\nvoid loop()\n{\n  temp = (-40 + 0.488155 * (analogRead(A0) - 20) + 0);\n  Serial.println(temp);\n  delay(10); // Delay a little bit to improve simulation performance\n}</code></pre>\n<p>Based on what we have learned in <a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\">From Blocks To Code - Part I</a>, we will be transplanting the 3 important sections of this code to the IoT template that we are using to connect: <strong>Declaration</strong>, <strong>Setup</strong> and <strong>Loop</strong>. Transplanting code is easy because the example has already marked out where to put your code üòÑ. Find the parts marked by <code>/********* This is where you put your own code *********/</code>.</p>\n<h4>Step 1: Declaration</h4>\n<p>The first part to transplant would be the variable <code>temp</code> for temperature so that we have this variable in our IoT code.</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nWiFiClient network;\nMQTTClient client;\n\n/********* This is where you put your own code *********/\n\n// Variables\nint temp = 0;\n\n/**************** End of your own code *****************/\n\nvoid setup() {\n‚Ä¶</code></pre>\n<h4>Step 2: Setup</h4>\n<p><span style=\"font-weight: 400;\">The second part would be our <code>setup()</code> function, to set Analog Pin A0 as an input. We can ignore the <code>Serial.begin</code> safely as we already set up our Serial connection in the example, so we only need to copy over <code>pinMode()</code>.</span></p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid setup() {\n  Serial.begin(9600);\n\n  /********* This is where you put your own code *********/\n\n  pinMode(A0, INPUT);\n\n  /**************** End of your own code *****************/\n\n  connectToWiFi(SECRET_SSID, SECRET_PASS); // Connect to the WiFi network\n\n  // Setup the MQTT client, but not connecting yet\n  client.begin(MQTT_URL, MQTT_PORT, network);\n  client.onMessage(messageReceived);\n\n  connect(); // Connect to MQTT server\n}\n‚Ä¶</code></pre>\n<h4>Step 3: Loop</h4>\n<p>The third part is the <code>loop()</code> function, to calculate the temperature from the voltage. We only need to transplant the 1st line to our IoT example code, underneath <code>This is where you put your own code</code>, since we only need to calculate the temperature.</p>\n<p>As for the delay, we will increase it to 10 seconds (10000 milliseconds) to prevent it from spamming the server.</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid loop() {\n  client.loop(); // This function must be called on every loop\n\n  // Check if MQTT connection is active, and reconnect if it's broken\n  // This must be called every loop to ensure connection\n  if (!client.connected()) {\n    Serial.println(\"MQTT Client disconnected, reconnecting...\");\n    connect();\n  }\n\n  /********* This is where you put your own code *********/\n\n  // Read the temperature\n  temp = -40 + 0.488155 * (analogRead(A0) - 20);\n  \n  delay(10000);\n\n  /**************** End of your own code *****************/\n}\n‚Ä¶</code></pre>\n<p>Great, now we are done with our transplanting and we are ready to write our first IoT code!</p>\n<p>If you check out the file tab named <strong>‚Äòhelper.h‚Äô</strong>¬†on the tab bar, you will find that we have written a lot of functions to make your life easier. Here‚Äôs a rundown of all the functions that you can use throughout your IoT programs:</p>\n<ul>\n<li><code>connectToWiFi(SSID, password)</code>: Connects to Wi-Fi, and automatically reconnects if the Wi-Fi disconnects</li>\n<li><code>publishUbidots(client, topic, message)</code>: Publishes an MQTT message on a topic</li>\n<li><code>subscribeUbidots(client, topic)</code>: Subscribes to an MQTT topic. You should only use this function at the last part of the `connect()` function</li>\n<li><code>topicMatches(longTopic, shortTopic)</code>: Checks if your topic matches the topic sent by Ubidots</li>\n</ul>\n<p>Since MQTT only allows us to publish the data in the form of Strings, we need to convert our temperature number into a String. Make a new String variable called <code>temperatureString</code> with <code>temp</code> (recall lesson <a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\">From Blocks to Code - Part I</a>).</p>\n<pre><code class=\"language-cpp\">\n  ‚Ä¶\n  temp = -40 + 0.488155 * (analogRead(A0) - 20);\n    \n  // Convert the temperature to a String\n  String temperatureString = String(temp);\n  \n  delay(10000); // repeat every 10 seconds\n  ‚Ä¶\n</code></pre>\n<h4>Step 4: Publish</h4>\n<p>Recall that in the last lesson, we went through what MQTT is and what MQTT topics look like. Let‚Äôs say you have followed all instructions and named your device ‚ÄúSSTuino II‚Äù. Now the name for this device in the topic should be <code>sstuino-ii</code>. Combine this with the name of the Variable you added on Ubidots earlier and you get <code>sstuino-ii/temperature</code>.</p>\n<p>Publishing to Ubidots using MQTT is as simple as calling the <code>publishUbidots()</code> function like so: <code>publishUbidots(client, ‚Äússtuino-ii/temperature‚Äù, temperatureString);</code>. Make sure you place all of this code <i>before</i> the delay so that all of it runs before the microcontroller sleeps for 10 seconds.</p>\n<p>The complete code between the brackets in <code>loop()</code>¬†should look something like this:</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid loop() {\n  ‚Ä¶\n\n  /********* This is where you put your own code *********/\n\n  // Read the temperature\n  temp = -40 + 0.488155 * (analogRead(A0) - 20);\n    \n  // Convert the temperature to a String\n  String temperatureString = String(temp);\n  publishUbidots(client, \"sstuino-ii/temperature\", temperatureString);\n  delay(10000); // repeat every 10 seconds\n\n  /**************** End of your own code *****************/\n}\n‚Ä¶</code></pre>\n<p>Before you upload your program, don't forget to double-check the 'arduino_secrets.h' file to ensure that you have the correct Wi-Fi password and Ubidots account details.</p>\n<p>Connect your SSTuino, upload your program, open your Serial Monitor and go to your Ubidots dashboard. You can now see the current temperature on the dashboard!¬†</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/27/Ubidots-5-Dashboard-7E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-md.png 749w\"  alt=\"\" width=\"564\" height=\"390\"></figure>\n<p>Well done, now you have made your first Internet-connected temperature sensor in 4 steps (Declaration, Setup, Loop, Publish). This simple example can be extended to many other sensors that you may want to build, like motion detectors, air quality sensors, and so on.</p>\n<h2>\"Subscribing\" data from Ubidots MQTT</h2>\n<p>Now that we have sent, or ‚Äúpublished‚Äù data to Ubidots, let‚Äôs try receiving data by ‚Äúsubscribing‚Äù!¬†</p>\n<p>We will be making a very simple example: a smart light switch. Arduino represents a HIGH signal with the number 1, and a LOW signal with the number 0, which means that we can simply represent the state of the light switch as 0s and 1s. Our light switch will use one of the debug lights on the board, meaning that you do not need to connect anything externally for it to work.</p>\n<h3>Ubidots Setup</h3>\n<p>Get started by creating a new Variable under your existing Device with the name ‚ÄúLight‚Äù as shown:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/27/Ubidots-6-Subscribe-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-md.png 749w\"  alt=\"\" width=\"662\" height=\"452\"></figure>\n<p>Next, let‚Äôs create a switch on our dashboard so that we can control this light switch. Press the + button on top and create a new switch, then link it to the ‚ÄúLight‚Äù Variable of your device.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-2.png\" data-size=\"2134x1474\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-2-thumbnail.png\" alt=\"\" width=\"749\" height=\"517\"></a>\n<figcaption>Select 'Switch' to add to your dashboard</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-3.png\" data-size=\"2136x1478\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-3-thumbnail.png\" alt=\"\" width=\"749\" height=\"518\"></a>\n<figcaption>Add the Variable called \"light\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-4.png\" data-size=\"1208x838\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-4-thumbnail.png\" alt=\"\" width=\"749\" height=\"520\"></a>\n<figcaption>Done!</figcaption>\n</figure>\n</div></div>\n<p>This concludes the Ubidots part of the work.</p>\n<h3>Code</h3>\n<p>We can open the code that we used to connect to MQTT previously (should be named Connect) and save it as a new project (name it something like ‚ÄúSubscribe‚Äù). You can also open the Publish code you just built as a side-by-side reference, if you need to.</p>\n<p>We can now start building our code for subscribing with 5 major steps: <strong>Declaration</strong>, <strong>Setup</strong>, <strong>Loop</strong>, <strong>Message Received</strong> and <strong>Connect</strong>. Compared to the previous Publish example, it has 1 extra and 1 changed step.</p>\n<h4>Step 1: Declaration</h4>\n<p>You will first need to store the state of the light, in other words, whether it is on or off (in Arduino terms, HIGH or LOW). Make an integer variable called <code>light</code> and set it to LOW initially.</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nWiFiClient network;\nMQTTClient client;\n\n/********* This is where you put your own code *********/\n\n// Variables\nint light = LOW;\n\n/**************** End of your own code *****************/\n\nvoid setup() {\n‚Ä¶</code></pre>\n<h4>Step 2:¬† Setup</h4>\n<p>In our setup, we need to tell our SSTuino that the pin that we want our light to be an output. We will use Pin 2 in our case as it‚Äôs the first pin with an LED. Use <code>pinMode</code> to set Pin 2 as an output.</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid setup() {\n  Serial.begin(9600);\n\n  /********* This is where you put your own code *********/\n\n  pinMode(2, OUTPUT);\n\n  /**************** End of your own code *****************/\n\n  connectToWiFi(SECRET_SSID, SECRET_PASS); // Connect to the WiFi network\n\n  // Setup the MQTT client, but not connecting yet\n  client.begin(MQTT_URL, MQTT_PORT, network);\n  client.onMessage(messageReceived);\n\n  connect(); // Connect to MQTT server\n}\n‚Ä¶</code></pre>\n<h4>Step 3: Loop</h4>\n<p>Inside the loop, we have to respond to changes to the <code>light</code> variable by properly toggling the light on pin 2 on or off. Whenever a message from the subscribed topic comes in, another function will change the <code>light</code> variable, and over here, we need to ‚Äúapply‚Äù this change by actually using the <code>digitalWrite()</code> function.</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid loop() {\n  client.loop(); // This function must be called on every loop\n\n  // Check if MQTT connection is active, and reconnect if it's broken\n  // This must be called every loop to ensure connection\n  if (!client.connected()) {\n    Serial.println(\"MQTT Client disconnected, reconnecting...\");\n    connect();\n  }\n\n  /********* This is where you put your own code *********/\n\n  digitalWrite(2, light);\n\n  /**************** End of your own code *****************/\n}\n‚Ä¶</code></pre>\n<h4>Step 4: Message Received</h4>\n<p>Inside this special function is where the MQTT subscribe message is actually received. We have to check if it‚Äôs really the correct message by checking the topic, and then changing the value of <code>light</code> based on the value received.¬†</p>\n<p>We do this check by using the <code>topicMatches(shortTopic, longTopic)</code> helper function, which breaks down Ubidot‚Äôs long and hard-to-understand topic format of <code>/v1.6/devices/{DEVICE}/{VARIABLE}/lv</code> into just <code>{DEVICE}/{VARIABLE}</code>.</p>\n<p>If the topic is the one we want (i.e. outcome of this function is <code>true</code>), we will change the <code>light</code> variable based on the payload of the message. To do that, we have to convert the payload from a String to an integer. Recall the <a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\">From Blocks to Code lesson</a>, where we converted data from one type to another. To convert a String to int, we just need to use <code>.toInt()</code> behind the String!</p>\n<pre><code class=\"language-cpp\">‚Ä¶\nvoid messageReceived(String &amp;topic, String &amp;payload) {\n  Serial.println(\"Incoming data: \" + topic + \" - \" + payload);\n\n  /* \n    All the messages your MQTT service receives can be \n    loaded here\n    \n    *NOTE*: Do not use this function to publish, subscribe\n    or unsubscribe as it may cause deadlocks\n  */\n  \n  /********* This is where you put your own code *********/\n\n  if (topicMatches(\"sstuino-ii/light\", topic) == true) {\n    // You can do something with the payload, which is a String\n    light = payload.toInt(); // convert the incoming message from String to int\n  }\n\n  /**************** End of your own code *****************/\n}\n‚Ä¶</code></pre>\n<h4>Step 5: Connect</h4>\n<p>At long last, we have come to the last part we have to change: the bottom part of the <code>connect()</code> function. This function is responsible for connecting to MQTT, but it is also responsible for subscribing to the topics that we want to receive messages from.¬†</p>\n<p>Simply call the <code>subscribeUbidots()</code> function from the helper by coding <code>subscribeUbidots(client, \"sstuino-ii/light\");</code> after the \"Connected to MQTT\" Serial printout and you‚Äôre done!</p>\n<pre><code class=\"language-cpp\">‚Ä¶\n  Serial.println(\"\\nConnected to MQTT!\");\n\n  /********************************************************\n    Subscribe to topics you need here!\n  ********************************************************/\n  subscribeUbidots(client, \"sstuino-ii/light\");\n}\n‚Ä¶</code></pre>\n<p>All 5 steps are done now, so it‚Äôs time to run your project. Plug in your SSTuino, upload this code, open the Serial Monitor and let it connect. Once it is fully connected, you can try press the switch on your Ubidots dashboard to see the LED on Pin 2 light up!</p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-08T14:33:48+08:00",
            "date_modified": "2022-04-08T14:33:48+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/mobile-apps-part-1.html",
            "url": "https://knowledge.fourier.industries/mobile-apps-part-1.html",
            "title": "Mobile Apps, Part I",
            "summary": "In this tutorial, we will create a mobile app with&hellip;",
            "content_html": "<p>In this tutorial, we will create a mobile app with Thunkable and connect your IoT applications with them! Thunkable is an easy to use ‚Äúcode-lite‚Äù mobile app creator, in which you can make mobile apps with only block-based code with no need to write text-based code. You can then upload this to your phone or even publish them on actual app stores if you wish to distribute your app.</p>\n<p class=\"msg msg--info\"><strong>Note: </strong>It is strongly recommended that this tutorial be done at home</p>\n<h2>Signing up to Thunkable</h2>\n<p>We can sign up for Thunkable with our SST Google Account by clicking ‚ÄúSign up with Google‚Äù. It‚Äôs that simple!</p>\n<p class=\"align-center\"><a href=\"https://x.thunkable.com/signup?referrerId=random.rrr3r7\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">Sign up to Thunkable</a></p>\n<p>Once you have completed signup, you can click the links below on your mobile phone to download Thunkable Live so that you can upload the app to your mobile phone:</p>\n<figure class=\"post__image align-center\"><a href=\"https://apps.apple.com/sg/app/thunkable-live/id1223262700\" target=\"_blank\" rel=\"noopener noreferrer\"></a><a href=\"https://apps.apple.com/sg/app/thunkable-live/id1223262700\" target=\"_blank\" rel=\"noopener noreferrer\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/5a902db97f96951c82922874.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-md.png 749w\"  alt=\"\" width=\"179\" height=\"60\"></figure></a><a href=\"https://apps.apple.com/sg/app/thunkable-live/id1223262700\" target=\"_blank\" rel=\"noopener noreferrer\"></a>¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†<a href=\"https://play.google.com/store/apps/details?id=com.thunkable.live\" target=\"_blank\" rel=\"noopener noreferrer\"><figure class=\"post__image align-center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/en_badge_web_generic-4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-md.png 749w\"  alt=\"\" width=\"200\" height=\"59\"></figure></a></p>\n<p>After signing up, you can start creating your first project. For the category, you can put ‚ÄúJust testing‚Äù.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-1-NewProj-1.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-md.png 749w\"  alt=\"\" width=\"516\" height=\"359\"></figure>\n<p>It is highly recommended that you watch some of Thunkable‚Äôs tutorials at the link below, before you start this lesson to have a good idea of how to use Thunkable:¬†</p>\n<p class=\"align-center\"><a href=\"https://docs.thunkable.com/v/drag-and-drop/tutorials\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">Thunkable Drag and Drop Tutorials</a></p>\n<h2>Hello World!</h2>\n<p>Time to start creating our first Thunkable app! This part of the tutorial will assume that you already understand how to operate the user interface of Thunkable and are familiar with some of the key concepts in Thunkable.¬†</p>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-2-Layout-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-md.png 749w\"  alt=\"\" width=\"2124\" height=\"1474\"></figure>\n<p>Now that you are on your app screen, let‚Äôs get familiar with the interface of Thunkable. On the left, you have the Screens and the Add Components menus.¬†</p>\n<p>The Screens menu is for you to add new screens and views to your app. The Add Components menu allows you to easily drag and drop components to your screen.¬†</p>\n<p>On the right side, you can change the properties of the individual components on your screen. For instance, you can change the words or colour of a label, or disable a button, and so on.¬†</p>\n<p>On the top bar, you can see two tabs: Design and Blocks. Design is the tab you are currently in, and lets you design your app screens. Blocks allow you to create the program behind each screen in your app, using block coding just like what you did previously in TinkerCAD.</p>\n<h2>Drag and Drop</h2>\n<p>Let us try dragging and dropping some components into your app! The very first basic, but important component is the Label, which simply displays text on your screen. Drag it directly to the middle of your app.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-md.png 749w\"  alt=\"\" width=\"526\" height=\"491\"></figure>\n<p>If you want to delete your label, simply press the trash can button on the Screens menu to delete the label. This is the same for other components in your app as well.¬†</p>\n<h3>Adjusting the properties of the label</h3>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-2E-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-md.png 749w\"  alt=\"\" width=\"469\" height=\"451\"></figure>\n<p>Click on the Label and you can now adjust the properties for that Label on the right side of the screen. You can change the contents, font, how big the words are, and so on. Try changing the label to say <a href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\" target=\"_blank\" rel=\"noopener noreferrer\">‚ÄúHello World‚Äù</a>!</p>\n<h3>Advanced inputs</h3>\n<p>Let‚Äôs try dragging in a <strong>Button</strong> and <strong>Text Input</strong> this time. You can play around with the position and text on the Button and Text Input for now. When you‚Äôre done, change the text on the different components and drag them into the order shown below:</p>\n<figure class=\"post__image post__image--full\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-3E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-md.png 749w\"  alt=\"\" width=\"2120\" height=\"1472\">\n<figcaption >Drag the elements on the screen into something like this</figcaption>\n</figure>\n<h2>Activating Buttons</h2>\n<p>We are going to make a super simple app: replacing the text of the Label with the text inside your Text Input, the moment that the Button is pressed. Click on the Blocks tab on the top bar to switch to blocks editing.</p>\n<p>We can click on each of the components on the left bar to see the different functions we can use to change the components (e.g. changing the text on a Label, or reading the text from a Text Input):</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-4.png\" data-size=\"1360x1478\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-4-thumbnail.png\" alt=\"\" width=\"749\" height=\"814\"></a>\n<figcaption>Text Input</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-5.png\" data-size=\"1271x1480\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-5-thumbnail.png\" alt=\"\" width=\"749\" height=\"872\"></a>\n<figcaption>Button</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-6.png\" data-size=\"1262x1466\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-6-thumbnail.png\" alt=\"\" width=\"749\" height=\"870\"></a>\n<figcaption>Label</figcaption>\n</figure>\n</div></div>\n<p>For our simple app, we would need to do 3 things:</p>\n<ol>\n<li>Detect when the button is clicked</li>\n<li>Read the text from the Text Input</li>\n<li>Set the contents of the Label to the same contents of the Text Input</li>\n</ol>\n<p>Starting with the first point, we can click the component for our Button and drag the <a href=\"#\" class=\"btn btn--yellow\">when Button1 Click</a> block into our blocks editor. Everything that goes into this block will be acted upon when you click that button.</p>\n<figure class=\"post__image post__image--full\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-7E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-md.png 749w\"  alt=\"\" width=\"2112\" height=\"1472\">\n<figcaption >For completion of point 1, drag the Button Click event block into the editor</figcaption>\n</figure>\n<p>To complete point 2, we can use a variable to temporarily store the text that was read from the Text Input. Start by clicking the Variables option and dragging the <a href=\"#\" class=\"btn btn--yellow\">set ‚Äòapp‚Äô variable ‚Äòname‚Äô to __</a> block into the editor.</p>\n<figure class=\"post__image post__image--full\" ><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-8E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-md.png 749w\"  alt=\"\" width=\"2110\" height=\"1448\"></figure>\n<figcaption >To complete point 2, drag the variable block in</figcaption>\n</figure>\n<p>Let‚Äôs give this variable a name like ‚Äútext‚Äù. Keep this name in mind because we will be using it later.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-9-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-md.png 749w\"  alt=\"\" width=\"435\" height=\"114\"></figure>\n<p>The last part of point 2 will be to actually read the text from the Text Input and store it into this variable.¬†</p>\n<p>We can do that by clicking the Text Input component and dragging the ‚ÄúText‚Äù property of the component into the rear part of the statement.</p>\n<figure class=\"post__image post__image--full\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-10E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-md.png 749w\"  alt=\"\" width=\"2114\" height=\"1454\">\n<figcaption >Drag the text of Text_Input1 into the rear part of the \"set app variable\" block</figcaption>\n</figure>\n<p>Finally, onto point 3: to set the contents of the Label to the ‚Äútext‚Äù variable that we have just set. Click on your Label component on the left and drag the <a href=\"#\" class=\"btn btn--yellow\">set Label1‚Äôs text to ___</a> block into the block editor, and drag the ‚Äúapp variable‚Äù block to the end of the ‚Äúset‚Äù block, so that the code will set the text of your Label to the value of the ‚Äútext‚Äù variable.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-11E.png\" data-size=\"2112x1452\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-11E-thumbnail.png\" alt=\"\" width=\"749\" height=\"515\"></a>\n<figcaption>Add the \"set label text block\"...</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-12E.png\" data-size=\"2110x1450\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-12E-thumbnail.png\" alt=\"\" width=\"749\" height=\"515\"></a>\n<figcaption>...and set the label to the \"text\" variable</figcaption>\n</figure>\n</div></div>\n<p>Fantastic! You have now completed your basic app that handles text input, a user action through a button, and the display of output. Next up, we are going to extend our app by processing the input text using some of Thunkable‚Äôs built-in functions and adding a tab bar at the bottom.</p>\n<figure ><figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-13E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-md.png 749w\"  alt=\"\" width=\"2136\" height=\"422\"></figure>\n<figcaption >Press the Play button to start your app!</figcaption>\n</figure>\n<h2>Navigating with a tab bar</h2>\n<p>Many of you may have seen apps with a tab bar at the bottom, like Apple‚Äôs Music app, or the Android Clock app. Now we are going to make an app with a tab bar just like that.¬†</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/tab-ios.jpeg\" data-size=\"1170x2532\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/tab-ios-thumbnail.jpeg\" alt=\"\" width=\"749\" height=\"1621\"></a></figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/tab-android.jpg\" data-size=\"1080x2412\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/tab-android-thumbnail.jpg\" alt=\"\" width=\"749\" height=\"1673\"></a></figure>\n</div></div>\n<p>We will now extend our app by giving it a Settings page so that we can choose which type of text processing we want our app to do.</p>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-md.png 749w\"  alt=\"\" width=\"1580\" height=\"720\"></figure>\n<p>Click the + button on the Screens menu and click ‚ÄúBottom Tab Navigator‚Äù to add the tab navigator to our app.</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-2E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-md.png 749w\"  alt=\"\" width=\"582\" height=\"571\">\n<figcaption >Click the trashcan icon to delete all the other screens except Setting</figcaption>\n</figure>\n<p>Wow, that‚Äôs a lot of buttons! Let‚Äôs delete the ones unnecessary for now. Since we are adding a Settings page, only Settings is relevant to us, so we can delete all of the rest by clicking the trashcan icon as above.</p>\n<p>Next, drag our ‚ÄúScreen1‚Äù (which is the first screen that we created) under the Tab Navigators so it looks like this:</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-3.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-md.png 749w\"  alt=\"\" width=\"420\" height=\"407\">\n<figcaption >Drag Screen1 to be within the Tab Navigator</figcaption>\n</figure>\n<p>Click on ‚ÄúScreen1‚Äù, and you might notice that the bottom tab bar has an empty image that we don‚Äôt really want. Let‚Äôs get an icon to make it look better: copy and paste <code>https://img.icons8.com/fluency/48/000000/home.png</code>¬†into the field called ‚ÄúActive Tab Icon‚Äù. Next, we want to rename ‚ÄúScreen1‚Äù to something that makes more sense. Click the Screen1 text and you can change it to Home so it matches the icon.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-4E.png\" data-size=\"1328x1334\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-4E-thumbnail.png\" alt=\"\" width=\"749\" height=\"752\"></a>\n<figcaption>Change the tab image here...</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-5E.png\" data-size=\"1314x1334\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-5E-thumbnail.png\" alt=\"\" width=\"749\" height=\"760\"></a>\n<figcaption>...and change the name of Screen1 to \"Home\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-6E.png\" data-size=\"2120x1466\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-6E-thumbnail.png\" alt=\"\" width=\"749\" height=\"518\"></a>\n<figcaption>Don't forget to change the image of the Settings tab!</figcaption>\n</figure>\n</div></div>\n<p>Let us give the Settings page a nicer icon too! Click on the Setting screen on the left and change the link in the ‚ÄúActive Tab Icon‚Äù setting to <code>https://img.icons8.com/fluency/48/000000/settings.png</code>.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-7.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-md.png 749w\"  alt=\"\" width=\"852\" height=\"222\"></figure>\n<p>Much better looking now!</p>\n<h2>Using functions</h2>\n<p>As we have a Settings page now, we can give it some options to turn certain types of text manipulation on and off. Starting with a simple one, we can trim/remove all the spaces to the left and right side of the text we typed in: something like¬†<code> ¬† abcde¬† ¬† </code>¬†will become <code>abcde</code>. There is a built-in function for this, and we can try it out.</p>\n<p>But first, we need to add a switch in Settings so that we can turn this feature on and off.</p>\n<p>Add a Label and a Switch according to the diagram below, and set the default value of the Switch to ‚Äúfalse‚Äù:</p>\n<figure ><figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-md.png 749w\"  alt=\"\" width=\"1578\" height=\"1460\"></figure>\n<figcaption >Add a Label and Switch to the Settings page</figcaption>\n</figure>\n<p>Let‚Äôs switch over to blocks to add our code‚Ä¶We want the value of the Switch to be stored in a variable so that it can be read by our program on the Home tab. Drag the <a href=\"#\" class=\"btn btn--yellow\">when Switch1 on Value Change</a> block into the editor, and set a new variable called <code>removeSpaces</code> to whatever the <code>newValue</code> of the switch is. We are now done with the Settings screen!</p>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-2E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-md.png 749w\"  alt=\"\" width=\"2108\" height=\"1448\"></figure>\n<p><span style=\"font-weight: 400;\">Moving back to the blocks for Home, we can add an `if` block to our button click event so that we check for that setting we just made previously.¬†</span></p>\n<p><span style=\"font-weight: 400;\">After that, drag a Logic <a href=\"#\" class=\"btn btn--green\">__=__</a> block to check if the statement is equal to true, and drag a <a href=\"#\" class=\"btn btn--green\">true</a> block to the right-hand side of the equals sign.</span></p>\n<p><span style=\"font-weight: 400;\">Finally, drag the <a href=\"#\" class=\"btn btn--yellow\">app variable</a> block from the Variables menu to complete the if statement. Change the variable name to <code>removeSpaces</code> so it matches the name on the other screen.</span></p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-3E.png\" data-size=\"2110x1456\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-3E-thumbnail.png\" alt=\"\" width=\"749\" height=\"517\"></a>\n<figcaption>Drag in the \"if\" statement</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-4E.png\" data-size=\"2108x1450\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-4E-thumbnail.png\" alt=\"\" width=\"749\" height=\"515\"></a>\n<figcaption>Add in the = statement to check for true</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-5E.png\" data-size=\"2110x1456\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-5E-thumbnail.png\" alt=\"\" width=\"749\" height=\"517\"></a>\n<figcaption>Finally add the \"app variable\" block</figcaption>\n</figure>\n</div></div>\n<p>At this point, we want to reorder our program a bit so it makes more sense. Recalling that the intention of this app is to:</p>\n<ol>\n<li>Detect when the button is clicked</li>\n<li>Read the text from the Text Input</li>\n<li><strong>(NEW)</strong> Process the text IF the switch on Settings is on</li>\n<li>Set the contents of the Label to the same contents of the Text Input</li>\n</ol>\n<p>We have inserted a new step between the 2nd and last step, which is to process the text IF the switch is active. As such, the program needs to be organised in the same way and here‚Äôs how:</p>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-6E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-md.png 749w\"  alt=\"\" width=\"1420\" height=\"600\"></figure>\n<p>With these changes done, we can drop in the last piece of code that actually performs the change. In programming, we can actually assign a variable back to itself. For example, if you have a statement in Arduino that says <code>i = i+1;</code>, it is perfectly valid as it adds 1 to <code>i</code>. (Note that this is not valid in maths)</p>\n<p>In our case, we can assign the variable called ‚Äútext‚Äù back to itself after we have finished removing the spaces before and after it. We would need to drag 3 types of blocks into the editor: ‚Äúset app variable‚Äù which allows you to set a variable, ‚Äúapp variable‚Äù which gets the contents of a variable, and ‚Äútrim spaces from both sides‚Äù from the Text menu to actually trim the spaces.</p>\n<p>Once complete, your code should look something like this:</p>\n<figure class=\"post__image post__image--full\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-7E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-md.png 749w\"  alt=\"\" width=\"2672\" height=\"700\"></figure>\n<p>Leave the ‚Äúelse‚Äù block empty since we don‚Äôt need to change the text when the switch is off.</p>\n<h2>Finishing touches</h2>\n<p>We are almost entirely done with our app! For the finishing touches, let‚Äôs change the Border Width to 1 pixel, and Text Alignment to ‚ÄúLeft‚Äù so that we can easily see the differences in the text output.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-1.png\" data-size=\"1366x1340\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-1-thumbnail.png\" alt=\"\" width=\"749\" height=\"735\"></a>\n<figcaption>Change the border width to 1 so it has a border</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-2.png\" data-size=\"1360x1424\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-2-thumbnail.png\" alt=\"\" width=\"749\" height=\"784\"></a>\n<figcaption>Change text align to left so spaces are more obvious</figcaption>\n</figure>\n</div></div>\n<p>With that done, your app should look a little bit like this‚Ä¶</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"600\" height=\"300\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/Thunkable-6-Finish-3.mp4\" type=\"video/mp4\" /></video></figure>\n<h2>Resources and Going Further</h2>\n<p>If you want some beautiful icons to use in your apps, projects and presentations, this is the icon suite that was used in this tutorial:¬†</p>\n<p class=\"align-center\"><a href=\"https://icons8.com/icons/fluency\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">Icons8 Fluency Icons</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-07T13:03:44+08:00",
            "date_modified": "2022-04-07T21:50:32+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/getting-started-with-iot.html",
            "url": "https://knowledge.fourier.industries/getting-started-with-iot.html",
            "title": "Getting Started with IoT",
            "summary": "What is the Internet of Things (IoT) all about? A&hellip;",
            "content_html": "<h2>What is the Internet of Things (IoT) all about?</h2>\n<p>A lot of people have been talking about the Internet of Things (IoT), and Industry 4.0, but what does all of this mean for you?</p>\n<p>¬†</p>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/andres-urena-tsBropDpnwE-unsplash-2.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/andres-urena-tsBropDpnwE-unsplash-2-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/andres-urena-tsBropDpnwE-unsplash-2-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/andres-urena-tsBropDpnwE-unsplash-2-md.jpg 749w\"  alt=\"\" width=\"268\" height=\"206\"></figure>Internet of Things, simply put, is the ability for everyday items to connect to the Internet for enhanced functionality. Think of your smart speakers like Alexa, or smart homes that know when you are coming home and automatically prepare the air-con for you.</p>\n<p>Internet of Things is a key component of Industry 4.0 and provides companies with the ability to collect and analyse live data from their devices.¬†</p>\n<p>¬†</p>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/r151-preview-4.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/r151-preview-4-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/r151-preview-4-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/r151-preview-4-md.jpg 749w\"  alt=\"\" width=\"312\" height=\"209\"></figure>For example, newer MRTs that ply Singapore‚Äôs MRT tracks are fitted with sensors to automatically detect faults within the trains and tracks, reducing failure and breakdown, and ensuring better service for all.</p>\n<p>With the SSTuino II, you are empowered to create your own IoT devices and innovations. For students, IoT coupled with devices like the SSTuino allows you to collect data about your surroundings and stream them directly to the Internet, giving you the flexibility to conduct scientific inquiry without the need to hold a datalogger there and wait for data to come in. Or, create your own small automations around your household to make life easier! The sky‚Äôs the limit.</p>\n<h2>What is MQTT, and why use it?</h2>\n<p>MQTT stands for Message Queuing Telemetry Transport, and it is a ‚Äúlanguage‚Äù that your SSTuino uses to talk to the IoT server, just like how your web browser talks to websites to retrieve them, but spends even less data!</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/MQTT-1024x719.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/MQTT-1024x719-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/MQTT-1024x719-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/MQTT-1024x719-md.jpg 749w\"  alt=\"\" width=\"495\" height=\"348\"></figure>\n<p>MQTT has 3 important concepts to understand: ‚ÄúPublish‚Äù, ‚ÄúSubscribe‚Äù and ‚Äútopics‚Äù.</p>\n<ul>\n<li><strong>Topics</strong> are like the address of a website, allowing you to specify a certain device and its resources. For example, you could have a topic that looks like <code>sstuino-ii/temperature</code>, which would mean that you want to access the ‚Äòtemperature‚Äô Variable within the ‚Äòsstuino-ii‚Äô Device.</li>\n<li>To <strong>Publish</strong> data means that you are transmitting data from your device to the server, with a given topic. It is a bit like submitting a form on a website.</li>\n<li>To <strong>Subscribe</strong> to a topic is to receive data from the server to your device. If you ever subscribed to a YouTube channel and clicked the bell icon, you would be notified whenever the channel posts something new. The same applies here when you subscribe to an MQTT topic and have new data pushed to your device the moment it appears.</li>\n</ul>\n<p>MQTT is lightweight and fault-tolerant, making it perfect for use with our IoT devices.</p>\n<h2>Creating an Ubidots STEM account</h2>\n<p>You will need to create an account with Ubidots for this exercise. Ubidots is an IoT service that provides you with the ability to connect IoT devices, and display beautiful dashboards with data from your devices.</p>\n<p>We will be using Ubidots STEM, which is a special educational only version of Ubidots.</p>\n<p class=\"align-center\"><a href=\"https://ubidots.com/stem/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">Sign up to Ubidots here!</a></p>\n<p>Please sign up with Ubidots STEM using your SST email.</p>\n<div class=\"gallery-wrapper gallery-wrapper--full\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-1.png\" data-size=\"2038x1398\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-1-thumbnail.png\" alt=\"\" width=\"749\" height=\"514\"></a>\n<figcaption>Sign up page</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-2E.png\" data-size=\"2058x1416\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-2E-thumbnail.png\" alt=\"\" width=\"749\" height=\"515\"></a>\n<figcaption>Click \"Take me to Ubidots STEM\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-3.png\" data-size=\"2136x1412\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-2-Signup-3-thumbnail.png\" alt=\"\" width=\"749\" height=\"495\"></a>\n<figcaption>You should see this when you complete the signup</figcaption>\n</figure>\n</div></div>\n<p>Note that Ubidots STEM has a few limitations that you have to take note of when deploying your IoT devices and applications:</p>\n<ul>\n<li>Can only be used in <strong>educational</strong> settings</li>\n<li>Can only create up to <strong>3 devices</strong>, each device with <strong>10 variables</strong> (sometimes also called channels)</li>\n<li>Up to <strong>4,000 data points per day</strong> (2-3 data points per minute) across all devices, so if your device sends data 24/7, please make sure to not exceed this limit</li>\n<li>Maximum rate of <strong>1 data point per second</strong>, no faster than that</li>\n<li>Up to <strong>3 dashboards</strong>, each with 10 widgets max</li>\n<li>For the full list of limitations, please refer to <a href=\"https://help.ubidots.com/en/articles/639806-what-is-the-difference-between-ubidots-and-ubidots-stem\" target=\"_blank\" rel=\"noopener noreferrer\">this link</a>¬†</li>\n</ul>\n<h2>How Ubidots works</h2>\n<p>Each device that you connect to Ubidots is simply called a ‚ÄúDevice‚Äù, which can have many ‚ÄúVariables‚Äù. These ‚ÄúVariables‚Äù are data sets that you can send. For example, you can have a Variable for temperature, another Variable for distance, and another Variable for a light switch. Within a Variable, there can be ‚ÄúDots‚Äù, which is Ubidot‚Äôs way of describing a single data point at a certain time. If your temperature sensor sends ‚Äú25.6‚Äù to the temperature Variable at 10:30 am, that counts as a single ‚ÄúDot‚Äù.</p>\n<p>Ubidots only allows you to send numbers, which means you cannot send texts through their service. To represent a light switch, you would have to send a number of either 1 or 0. If you need to represent a fading light with <code>analogWrite</code>, you may have to use numbers from 0 to 255.</p>\n<h2>Setting up Ubidots</h2>\n<p>Please login with the details you used to sign up just now at:</p>\n<p class=\"align-center\"><a href=\"https://stem.ubidots.com/accounts/signin/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">Ubidots Login</a></p>\n<h3>Creating a new Device</h3>\n<p>We are going to create a Device first. Click on the topbar <strong>‚ÄúDevices &gt; Devices‚Äù</strong> to go to the Devices menu.</p>\n<div class=\"gallery-wrapper gallery-wrapper--full\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-1E.png\" data-size=\"2134x1410\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-1E-thumbnail.png\" alt=\"\" width=\"749\" height=\"495\"></a>\n<figcaption>Go to the Devices menu</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-2E.png\" data-size=\"2116x1414\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-2E-thumbnail.png\" alt=\"\" width=\"749\" height=\"501\"></a>\n<figcaption>Press the + button</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-3E.png\" data-size=\"2108x1418\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-3E-thumbnail.png\" alt=\"\" width=\"749\" height=\"504\"></a>\n<figcaption>Select \"Blank Device\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-4.png\" data-size=\"2134x1412\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-4-thumbnail.png\" alt=\"\" width=\"749\" height=\"496\"></a>\n<figcaption>Name the device \"SSTuino II\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-5.png\" data-size=\"2136x1408\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-3-Device-5-thumbnail.png\" alt=\"\" width=\"749\" height=\"494\"></a>\n<figcaption>Done!</figcaption>\n</figure>\n</div></div>\n<p>Create a Device by pressing the + button and selecting ‚ÄúBlank Device‚Äù. Name it something sensible, in our example, we simply name it ‚ÄúSSTuino II‚Äù. Now we have a device created!</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/Ubidots-4-Variable-1E-4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/Ubidots-4-Variable-1E-4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/Ubidots-4-Variable-1E-4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/Ubidots-4-Variable-1E-4-md.png 749w\"  alt=\"\" width=\"508\" height=\"457\"></figure>\n<p>Go to your device and you will notice a few key things that you will need to take note of, namely the ‚ÄúAPI Label‚Äù, ID and ‚ÄúToken‚Äù.</p>\n<ul>\n<li>The <strong>API Label</strong> is the name of your device for a computer to recognise, like your name on Facebook or Instagram</li>\n<li>The <strong>ID</strong> is the unique ID that your device will be connecting with, a bit like a <strong>username</strong></li>\n<li>The <strong>Token</strong> is the unique <strong>password</strong> of your device</li>\n</ul>\n<p>Note these details down in your Notes app, because we will be using them later.</p>\n<h3>Creating a new Variable</h3>\n<p>Now that you‚Äôre done with creating a Device, it‚Äôs time to create a Variable! Press the big ‚ÄúAdd Variable‚Äù sign in the middle of the screen and name your Variable something sensible. In our case, we are going to be measuring the temperature of the surroundings, so we will name it ‚ÄúTemperature‚Äù.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-4-Variable-2.png\" data-size=\"2100x1472\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-4-Variable-2-thumbnail.png\" alt=\"\" width=\"749\" height=\"525\"></a>\n<figcaption>This is what you should see after creating the Variable</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-4-Variable-3E.png\" data-size=\"2100x1482\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-4-Variable-3E-thumbnail.png\" alt=\"\" width=\"749\" height=\"529\"></a>\n<figcaption>Take note of the Variable's \"API Label\"</figcaption>\n</figure>\n</div></div>\n<p class=\"msg msg--warning\"><strong>Warning</strong>: Do not name your Variables and Device names with anything else, as the example code provided relies on the Device being named \"SSTuino II\" and Variable as \"Temperature\"</p>\n<p>When you click on the Temperature Variable, you can see the <strong>API Label</strong> of this variable which is <code>temperature</code>. Remember this name, because this is the name of this Variable for computers that need to communicate with it. You can choose to create more Variables here to suit what you need to do.</p>\n<h3>Creating a new Dashboard</h3>\n<p>With Variables out of the way, let‚Äôs create our first Dashboard. Go to the top bar, <strong>Data &gt; Dashboards</strong> and click ‚ÄúAdd New Dashboard‚Äù. Give it a simple name like ‚ÄúMy Dashboard‚Äù and set the Default Time Range to ‚ÄúLast 1 hour‚Äù so that the dashboard shows data generally from the last hour. Press the green arrow to add the new dashboard.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-1E.png\" data-size=\"2104x463\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-1E-thumbnail.png\" alt=\"\" width=\"749\" height=\"165\"></a>\n<figcaption>Click on \"Dashboards\" under \"Data\"</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-2E.png\" data-size=\"2128x1468\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-2E-thumbnail.png\" alt=\"\" width=\"749\" height=\"517\"></a>\n<figcaption>Select \"Last 1 hour\" to be the Default time range</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-3E.png\" data-size=\"2104x764\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-3E-thumbnail.png\" alt=\"\" width=\"749\" height=\"272\"></a>\n<figcaption>Add a new widget to your dashboard with the + icon!</figcaption>\n</figure>\n</div></div>\n<h3>Adding a new widget to the dashboard</h3>\n<p>With your dashboard, you can add up to 10 widgets to monitor the status of your devices connected to Ubidots. Click ‚ÄúAdd New Widget'' and select ‚ÄúThermometer‚Äù from it. Under the ‚ÄúData‚Äù section, press ‚ÄúAdd Variables‚Äù and select your Variable from the SSTuino II device.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"4\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-4.png\" data-size=\"2108x1474\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-4-thumbnail.png\" alt=\"\" width=\"749\" height=\"524\"></a>\n<figcaption>Select the Temperature widget</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-5E.png\" data-size=\"2134x1464\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-5E-thumbnail.png\" alt=\"\" width=\"749\" height=\"514\"></a>\n<figcaption>Click Add Variables</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-6.png\" data-size=\"2132x1468\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-6-thumbnail.png\" alt=\"\" width=\"749\" height=\"516\"></a>\n<figcaption>Select the \"Temperature\" Variable</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-7.png\" data-size=\"2106x1482\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Ubidots-5-Dashboard-7-thumbnail.png\" alt=\"\" width=\"749\" height=\"527\"></a>\n<figcaption>Done!</figcaption>\n</figure>\n</div></div>\n<h2>Connecting your SSTuino II to Ubidots</h2>\n<p>Phew, that was a lot of things to go through! Let‚Äôs start to connect your SSTuino II to Ubidots. Go to your Arduino examples and open up the <code>Ubidots_1_Connect</code> example by going to <strong>File &gt; Examples &gt; WiFiNINA &gt; Ubidots_1_Connect</strong>.</p>\n<p>Wow, the code looks quite scary! Not to worry, because we have placed comments to let you know where to put code and where to not place any code.</p>\n<p>In Arduino programs, you can actually have more than one file! Go to the <code>arduino_secrets.h</code> tab located on the tab bar. Here is where you place all the details of your WiFi network and your Ubidots device info.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/Arduino-1E.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-1E-md.png 749w\"  alt=\"\" width=\"430\" height=\"537\"></figure>\n<p>Remember the 3 things, <strong>API Label</strong>, <strong>ID</strong> and <strong>Token</strong> that you noted down when setting up Ubidots? It‚Äôs time to copy and paste them into your code. Follow the comments given inside the code and paste them in the right places, in between the <code>\"\"</code> quotation marks.</p>\n<p>For the Wi-Fi network details, you will need to set up your own Wi-Fi hotspot using your phone, as the SSTuino does not support the higher frequency (5GHz) Wi-Fi networks used by the school.</p>\n<p>If you have a newer phone, please enable ‚ÄúMaximise Compatibility‚Äù for iOS and certain Android devices, or ‚ÄúAdvanced &gt; AP Band: 2.4GHz‚Äù for other Android devices.</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"3\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/iOS_14_0_1_Personal_Hotspot_settings_maximize_compatibility_highlighted_001-768x592.png\" data-size=\"768x592\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/iOS_14_0_1_Personal_Hotspot_settings_maximize_compatibility_highlighted_001-768x592-thumbnail.png\" alt=\"\" width=\"749\" height=\"577\"></a>\n<figcaption>iOS</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/Screenshot_20210421-213941-2.png\" data-size=\"1080x1397\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/Screenshot_20210421-213941-2-thumbnail.png\" alt=\"\" width=\"749\" height=\"969\"></a>\n<figcaption>Android 12</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/26/gallery/hotspot-switch-to-2.4GHz-ap-band.png\" data-size=\"1494x1080\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/26/gallery/hotspot-switch-to-2.4GHz-ap-band-thumbnail.png\" alt=\"\" width=\"749\" height=\"541\"></a>\n<figcaption>Android 11 and Below</figcaption>\n</figure>\n</div></div>\n<p>With that done, let‚Äôs upload your code. Open the Serial Monitor and see if it connects to the Internet with the sentence <code>Connected to MQTT!</code>. If so, congratulations! Your SSTuino has successfully connected to the Internet and Ubidots.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/26/Arduino-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/26/responsive/Arduino-2-md.png 749w\"  alt=\"\" width=\"554\" height=\"261\"></figure>\n<p>Don't forget to save your code to your Arduino sketchbooks folder as ‚ÄúConnect‚Äù. We will be using this code as our base for the next few lessons.</p>\n<p>If your code isn‚Äôt working, check out the list below for some of the common issues:</p>\n<ul>\n<li><strong>It‚Äôs stuck at ‚ÄúRetrying WiFi Connection‚Äù!</strong>: Double check if your Wi-Fi password and name are correct, and your Wi-Fi network is turned on and discoverable. For iPhones, you have to keep the Personal Hotspot page in settings open for the network to be discoverable.</li>\n<li><strong>‚ÄúConnecting to MQTT‚Ä¶‚Ä¶.‚Äù keeps having more dots but never connects</strong>: There is a network issue with your Wi-Fi hotspot. It might be possible that your mobile signal is bad in the classroom. Try using someone else‚Äôs hotspot that is known to be working.</li>\n<li><strong>An error code appeared during ‚ÄúConnecting to MQTT‚Äù!</strong>: Check out the ‚ÄúQuick Status/Error Codes Reference‚Äù section at the bottom of the <code>helper.h</code> file tab.</li>\n</ul>\n<h2>Resources and Going Further</h2>\n<p>If you are interested to learn more about the inner workings of MQTT, and how it came about, check out these two excellent articles made by Adafruit.</p>\n<ul>\n<li><a href=\"https://learn.adafruit.com/mqtt-adafruit-io-and-you/why-mqtt\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Why use MQTT?</a></li>\n<li><a href=\"https://learn.adafruit.com/alltheiot-protocols/mqtt\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: MQTT Protocol in detail</a></li>\n</ul>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-06T19:25:41+08:00",
            "date_modified": "2022-04-07T22:01:45+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-3.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-3.html",
            "title": "Temperature Sensor",
            "summary": "In this tutorial, we are going to learn about the&hellip;",
            "content_html": "<p>In this tutorial, we are going to learn about the TMP36 Temperature Sensor. Next, we will get started with a simple circuit, and challenge yourselves with a task!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvroan26f\">About the Sensor</a></li>\n<li><a href=\"#mcetoc_1fvrp9fai1r\">TinkerCAD Example</a>\n<ul>\n<li><a href=\"#mcetoc_1fvrp9fai1s\">Explanation of Text Code</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvrr1ms32g\">Challenge yourself</a></li>\n<li><a href=\"#mcetoc_1fvrr7cv532\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvroan26f\">About the Sensor</h2>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/25/arduinoPot22.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot22-xs.png 300w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot22-sm.png 480w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot22-md.png 749w\"  alt=\"\" width=\"162\" height=\"161\"></figure>\n<p>The TMP36 Temperature Sensor is cheap and simple to use. It is able to measure temperature both below and above 0¬∫ C. It has no mercury as compared to traditional thermometers. Instead, it is a solid-state device that changes the voltage across a diode when the temperature changes.</p>\n<p>It generates an analog signal that is proportionate to temperature change, which is very easy to read from a microcontroller like the SSTuino!</p>\n<h2 id=\"mcetoc_1fvrp9fai1r\">TinkerCAD Example</h2>\n<p>Let's create a new circuit, and set up the TinkerCAD circuit like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/25/arduinoPot40.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot40-xs.png 300w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot40-sm.png 480w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot40-md.png 749w\"  alt=\"\" width=\"1837\" height=\"854\"></figure>\n<p>Next, we will program it in blocks such that it outputs temperature to the serial monitor, with options to calibrate the sensor by adding or subtracting the result.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/25/arduinoPot24.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot24-xs.png 300w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot24-sm.png 480w ,https://knowledge.fourier.industries/media/posts/25/responsive/arduinoPot24-md.png 749w\"  alt=\"\" width=\"543\" height=\"99\"></figure>\n<p>This is what it looks like when you start the simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot41.mp4\" type=\"video/mp4\" /></video></figure>\n<h3 id=\"mcetoc_1fvrp9fai1s\">Explanation of Text Code</h3>\n<p>Let's download the code from TinkerCAD and open it in the Arduino IDE. Attached below is an \"explained\" version of the code:</p>\n<pre><code class=\"language-cpp\">\nint temp = 0; // Setup the variable 'temp' as an integer and starts as 0\n\nvoid setup()\n{\n  pinMode(A0, INPUT); //initilise pin A0 as input\n  Serial.begin(9600); //initilise serial\n\n}\n\nvoid loop()\n{\n  temp = (-40 + 0.488155 * (analogRead(A0) - 20) + 0); //calculations to convert voltage drop measured from A0 into temperature. Adjust 0 to calibrate sensor.\n  Serial.println(temp); //print variable 'temp' to serial monitor\n}\n</code></pre>\n<p>Let's try this on the SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>Here is what it looks like:</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvrr1ms32g\">Challenge yourself</h2>\n<p>Using the bar graph example we did in the previous tutorials, how would you set the temperature sensor up such that when it is hotter, more LEDs will light up?</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvrr7cv532\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.adafruit.com/tmp36-temperature-sensor\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: TMP36 Temperature Sensor</a></li>\n<li><a href=\"https://www.analog.com/media/en/technical-documentation/data-sheets/TMP35_36_37.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Analog Devices: TMP36 datasheet</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/getting-started-with-iot.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-05T11:10:32+08:00",
            "date_modified": "2022-04-06T12:18:25+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html",
            "title": "From Blocks to Code, Part II",
            "summary": "In this tutorial, we are going to explore functions, understand&hellip;",
            "content_html": "<p>In this tutorial, we are going to explore functions, understand the limitations of block coding, and how to \"multitask\" your SSTuino.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvmoha0d3\">Functions</a>\n<ul>\n<li><a href=\"#mcetoc_1fvp2st7fc\">Ultrasonic Distance Sensor Example</a></li>\n<li><a href=\"#mcetoc_1fvp2st7fd\">Potentiometer Example</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvp2st7fe\">Limitations of Block Code</a></li>\n<li><a href=\"#mcetoc_1fvp2st7ff\">\"Multitasking\" your SSTuino</a>\n<ul>\n<li><a href=\"#mcetoc_1fvp2st7fg\">millis() instead of delay()</a></li>\n<li><a href=\"#mcetoc_1fvpo53oi1c\">Ultrasonic Sensor and Buzzer Example</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvp2st7fh\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvmoha0d3\">Functions</h2>\n<p>Here are the 3 basic parts that you would have in the code.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/SSTuinoIoT8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/SSTuinoIoT8-md.png 749w\"  alt=\"\" width=\"897\" height=\"387\"></figure>\n<p>However, you can separate code into functions, which create modular pieces of code that perform a defined task. Here are some advantages when you standardise code fragments into functions:</p>\n<ul>\n<li>Functions help the programmer to stay organised and help to conceptualise the program.</li>\n<li>Functions codify one function in one place so that it only has to be thought out and debugged once.</li>\n<li>If the code has to be changed, functions also reduce the errors in modification.</li>\n</ul>\n<p>Functions can also help to have smaller code, especially if particular lines of code are used repeatedly in the program. Although functions have many advantages, do take note that Arduino still requires <code><strong>void setup()</strong></code> and <code><strong>void loop()</strong></code> for the program to work. You can place your additional functions outside of them. Now let's make use of previous examples and implement functions!</p>\n<h3 id=\"mcetoc_1fvp2st7fc\">Ultrasonic Distance Sensor Example</h3>\n<p>We are going to continue to use this circuit from our previous example.</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot19.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot19-md.png 749w\"  alt=\"\" width=\"1758\" height=\"970\"></figure>\n<p>Here is an edited text version of the blocks code from TinkerCAD. Firstly the device initialises the Serial Monitor. Note that it does not declare the pins inside setup(). We will cover that in the function! üòÅ</p>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n}\n</code></pre>\n<p>Now we will do up the code in loop(). We make the serial print the time taken for the sound wave to bounce back using the function readUltrasonicDistance(5,6) in microseconds and multiply that by half the speed of sound to display the distance in cm.</p>\n<p class=\"msg msg--info\"><strong>Tip: </strong>The speed of sound is 0.0343 centimetre/microsecond. We half that to 0.01723 because the time taken for the sound to bounce back is 2x the total distance (time taken to the object + time taken from the object)</p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  Serial.println(0.01723 * readUltrasonicDistance(5, 6));\n}\n</code></pre>\n<p>And finally the function! We declare it as long as we can use it in the calculation in loop(). The function essentially tells the sensor to \"fire\" the ultrasonic wave and read the time taken for it to travel to and fro.</p>\n<pre><code class=\"language-cpp\">\nlong readUltrasonicDistance(int triggerPin, int echoPin)\n{\n  pinMode(triggerPin, OUTPUT);  // Clear the trigger\n  digitalWrite(triggerPin, LOW);\n  delayMicroseconds(2);\n  // Sets the trigger pin to HIGH state for 10 microseconds\n  digitalWrite(triggerPin, HIGH);\n  delayMicroseconds(10);\n  digitalWrite(triggerPin, LOW);\n  pinMode(echoPin, INPUT);\n  // Reads the echo pin, and returns the sound wave travel time in microseconds\n  return pulseIn(echoPin, HIGH);\n}\n</code></pre>\n<p>Let's try this out in the Arduino IDE! What other functions would you like to add to this code?</p>\n<h3 id=\"mcetoc_1fvp2st7fd\">Potentiometer Example</h3>\n<p>Let's try out another simple example with the Potentiometer! Set up the circuit as shown:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot4-md.png 749w\"  alt=\"\" width=\"1159\" height=\"563\"></figure>\n<p>Head over to the Arduino IDE and set up the code. First, let's declare the serial port, input and output pins:</p>\n<pre><code class=\"language-cpp\">\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(A0, INPUT);\n  pinMode(6, OUTPUT);\n}\n</code></pre>\n<p>Next, let's leave <code><strong>void loop()</strong></code> alone for a bit üòÜ and set up functions! You can name your functions whatever you want, as long as it is a single word.</p>\n<pre><code class=\"language-cpp\">\nvoid pwmLed() {\n\tanalogWrite(6, (analogRead(A0) / 4));\n}\n\nvoid helloWorld() {\nSerial.println(Hello, World!);\n}\n</code></pre>\n<p>With this, we have just created 2 functions! Let us place them inside <code><strong>void loop()</strong></code></p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  helloWorld();\n  pwmLed();\n}\n</code></pre>\n<p>The advantage of using functions in this scenario is that if I would like to not make a section of code run, I do not need to comment out all the lines inside <code><strong>void loop()</strong></code>. Instead, I just have to comment out the function as so!</p>\n<pre><code class=\"language-cpp\">\nvoid loop()\n{\n  //helloWorld(); // This code will not be run.\n  pwmLed();\n}\n</code></pre>\n<h2 id=\"mcetoc_1fvp2st7fe\">Limitations of Block Code</h2>\n<p>Programming with blocks is super simple! Just plop them in and you are good to go! Block coding is a great tool to get people started with little to no programming knowledge. However, as we move to more advanced tutorials like the Internet of Things, block coding would not be able to be used as it is rather limited. While we love introductory tools such as TinkerCAD's block coding functionality, we would like our students to move on to text-based programming languages too!</p>\n<p>Here are some limitations of block code:</p>\n<ul>\n<li>Inability to support external libraries/locked into the platform¬†</li>\n<li>Inability to use sensors that are not supported by the platform</li>\n<li>Delay based programming, not suitable for time-sensitive applications</li>\n</ul>\n<h2 id=\"mcetoc_1fvp2st7ff\">\"Multitasking\" your SSTuino</h2>\n<p>Let's make the device \"multitask\"! For the examples that we have covered so far, we have always used <code><strong>delay()</strong></code> to say light up an LED for 1 second. However, although <code><strong>delay()</strong></code> is handy and works for basic examples, it shouldn't be used in the real world...</p>\n<p>Wait, what? ü§Ø</p>\n<p>Why shouldn't we use <code><strong>delay()</strong></code>? That is because delay is a blocking function. For example, when you do <code><strong>delay(1000)</strong></code>, the Arduino stops on that line for one second. Blocking functions prevent a program from doing anything else until that particular task has been completed. If you need multiple tasks to occur at the same time, you simply cannot use <strong><code>delay()</code></strong>. If your program requires you to constantly read data (e.g. Ultrasonic Sensor), you should avoid using the delay function.</p>\n<h3 id=\"mcetoc_1fvp2st7fg\">millis() instead of delay()</h3>\n<p>Here comes <code><strong>millis()</strong></code> to the rescue! ü•≥ When called, it returns the number of milliseconds that have passed since the program first started. By doing some simple math and comparison, you can verify how much time has passed without blocking your code! Let's take a look at a blink sketch that does not use the <code><strong>delay()</strong></code> function:</p>\n<pre><code class=\"language-cpp\">\n// constants won't change. Used here to set a pin number :\nconst int ledPin =  13;      // the number of the LED pin\n\n// Variables will change :\nint ledState = LOW;             // ledState used to set the LED\n\n// Generally, you should use \"unsigned long\" for variables that hold time\n// The value will quickly become too large for an int to store\nunsigned long previousMillis = 0;        // will store last time LED was updated\n\n// constants won't change :\nconst long interval = 1000;           // interval at which to blink (milliseconds)\n\nvoid setup() {\n  // set the digital pin as output:\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop() {\n  // here is where you'd put code that needs to be running all the time.\n\n  // check to see if it's time to blink the LED; that is, if the\n  // difference between the current time and last time you blinked\n  // the LED is bigger than the interval at which you want to\n  // blink the LED.\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis &gt;= interval) {\n    // save the last time you blinked the LED\n    previousMillis = currentMillis;\n\n    // if the LED is off turn it on and vice-versa:\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    // set the LED with the ledState of the variable:\n    digitalWrite(ledPin, ledState);\n  }\n}\n</code></pre>\n<p>How the code works is that it subtracts the previously recorded time (previousMillis) from the current time (currentMillis). If the remainder is greater than the interval (1000 milliseconds), the program updates the previousMillis variable to the current time, and either turn the LED on or off.</p>\n<p>As the program is non-blocking, any code that is added outside of the first if statement should work correctly. You can now add other tasks and your LED will blink every second!</p>\n<p>Using the <code><strong>millis()</strong></code> function does take a bit more work than using the <code><strong>delay()</strong></code> function but will be worth it if the program needs to multitask.</p>\n<h3 id=\"mcetoc_1fvpo53oi1c\">Ultrasonic Sensor and Buzzer Example</h3>\n<p>Let's wire up your circuit as so!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/24/arduinoPot39.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-xs.png 300w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-sm.png 480w ,https://knowledge.fourier.industries/media/posts/24/responsive/arduinoPot39-md.png 749w\"  alt=\"\" width=\"1834\" height=\"985\"></figure>\n<p>Next, head over to the Arduino IDE where we will program the ultrasonic sensor to:</p>\n<ul>\n<li>trigger the ultrasonic wave every 1 millisecond</li>\n<li>print the distance to the serial monitor every 1 second</li>\n<li>turn on and off a buzzer every second if the distance is less than 30cm</li>\n</ul>\n<pre><code class=\"language-cpp\">\nconst int trigPin = 5; //set pin variables\nconst int echoPin = 6;\nconst int buzzerPin = 13;\n\nint trigState = LOW; //state of trigPin\nint interval = 1; // interval in milliseconds at which trigPin turns on\nint interval2 = 1000; //time in milliseconds at which the distance is printed in serial monitors\nint printState = LOW; //whether or not to print distance\nint buzzer = LOW; //whether or not buzzer is on\nunsigned long previousMillis = 0; //microsecond at which the pin was last writen\n\nvoid setup()\n{\n  Serial.begin(9600); //begin serial communication\n  pinMode(trigPin,OUTPUT); //set pinmodes\n  pinMode(echoPin,INPUT);<br>  pinMode(buzzerPin,OUTPUT);\n}\n\nvoid loop()\n{\n  unsigned long currentMillis = millis(); //time in milliseconds from which the code was started\n  if (currentMillis-previousMillis &gt;= interval) { //check \"blink without delay\" code\n    previousMillis = currentMillis;// \n    if (trigState == LOW){\n      (trigState = HIGH);\n    }\n    else {\n      (trigState = LOW);\n    }\n  }\n  // printing speed in serial monitor at an interval of 1s\n  if (currentMillis-previousMillis &gt;= interval2) { //check \"blink without delay\" code\n    previousMillis = currentMillis;\n    if (printState == LOW){\n      (printState = HIGH);\n    }\n    else {\n      (printState = LOW);\n    }\n  }\n  digitalWrite(trigPin,trigState); // Fire the pulse to measure distance\n  int duration, distance; //variables\n  duration = pulseIn(echoPin,HIGH); // Measure the time taken for the pulse\n  distance = duration * 0.01723; // Calculate speed\n  if (printState = HIGH){  //print the data to the serial monitor\n  Serial.print(distance);\n  Serial.println(\"cm\");}\n  \n  if (distance &lt;= 30){ //If distance &lt;30cm, buzzer will sound at an interval of 1s.\n    if (currentMillis-previousMillis &gt;= interval2) { //check \"blink without delay\" code\n    previousMillis = currentMillis;\n    if (buzzer == LOW){\n      (buzzer = HIGH);\n      digitalWrite(buzzerPin,HIGH);\n    }\n    else {\n      (buzzer = LOW);\n      digitalWrite(buzzerPin,LOW);\n    }\n  }\n  }\n  else{\n    digitalWrite(buzzerPin,LOW);\n  }\n}\n</code></pre>\n<h2 id=\"mcetoc_1fvp2st7fh\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://docs.arduino.cc/learn/programming/functions\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: Using functions in a sketch</a></li>\n<li><a href=\"https://randomnerdtutorials.com/why-you-shouldnt-always-use-the-arduino-delay-function/\" target=\"_blank\" rel=\"noopener noreferrer\">Random Nerd Tutorials: Why you shouldn't always use the Arduino delay function</a></li>\n<li><a href=\"https://create.arduino.cc/projecthub/Arduino_Scuola/limitations-of-delay-how-to-do-timers-correctly-833e9e\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino Project Hub: Limitations of delay() &amp; how to do timers correctly</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10-3.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-04-04T14:43:32+08:00",
            "date_modified": "2022-04-05T11:04:47+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html",
            "title": "Light Dependent Resistor",
            "summary": "For this exercise, we will be going to use the&hellip;",
            "content_html": "<p>For this exercise, we will be going to use the Light Dependent Resistor (LDR) to trigger the RGB LED! We can make use of the LDR to turn on the RGB LED when the environment is dark, and use the potentiometer to control the colour of the LED!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvan9u4ng\">About the Component</a></li>\n<li><a href=\"#mcetoc_1fvanutqb1l\">Reading LDR value</a>\n<ul>\n<li><a href=\"#mcetoc_1fvi5ukvv4e\">Calibration of the sensor</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fvao1ho31r\">Control RGB LED</a></li>\n<li><a href=\"#mcetoc_1fvi5ukvv4f\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvan9u4ng\">About the Component</h2>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/LDR.jpeg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/LDR-xs.jpeg 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/LDR-sm.jpeg 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/LDR-md.jpeg 749w\"  alt=\"\" width=\"171\" height=\"160\"></figure>\n<p>The Light Dependent Resistor (LDR/Photoresistor) is a type of resistor that reacts with light. When the amount of light it detects changes, the resistance changes. However, as there are many types of LDRs around, the way they change resistance with the amount of light would be different.</p>\n<p>As the LDR reacts to the amount of light it receives, it is very useful as automatic brightness control on your laptops and mobile devices.</p>\n<h2 id=\"mcetoc_1fvanutqb1l\">Reading LDR value</h2>\n<p>Let's create a new circuit on TinkerCAD like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot30.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot30-md.png 749w\"  alt=\"\" width=\"1852\" height=\"984\"></figure>\n<p>We will read the value from the LDR and output it on the serial monitor:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot14.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot14-md.png 749w\"  alt=\"\" width=\"447\" height=\"109\"></figure>\n<p>When running the simulation, open up the serial monitor. The result should look something like this:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot31.mp4\" type=\"video/mp4\" /></video></figure>\n<p>While I change the light intensity of the LDR, the readings also change.</p>\n<h3 id=\"mcetoc_1fvi5ukvv4e\">Calibration of the sensor</h3>\n<p>As the sensor has multiple variations, let's check yours out! Construct the circuit on your SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>After you are done uploading the code, open the serial monitor. Now note down the value when the room is lit. Afterwards, turn off the lights in the room and note down the value again. We will need this data afterwards to tell when to turn on the RGB LED.</p>\n<p class=\"msg msg--info\"><strong>Tip: </strong>If the lights in the room are unable to be turned off, you can use your hands to cover the LDR. Similarly, if your environment is originally dark, you can use the torch from your mobile device to shine at it.</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot46.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fvao1ho31r\">Control RGB LED</h2>\n<p>Now let us make the sensor useful! Make it such that the LED will light up when the environment darkens, and you can use the potentiometer to control the colour. To do so, we edit our code to something like this:</p>\n<p class=\"msg msg--info\"><strong>Tip:¬†</strong>Use the average of your bright and dark value and input it inside the area (Read analog pin A0 &lt; 512)</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/22/arduinoPot32.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-xs.png 300w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-sm.png 480w ,https://knowledge.fourier.industries/media/posts/22/responsive/arduinoPot32-md.png 749w\"  alt=\"\" width=\"530\" height=\"374\"></figure>\n<p>Afterwards, upload the code to the SSTuino. It should look like this:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot47.mp4\" type=\"video/mp4\" /></video></figure>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<p>If you have other ideas on how to control the RGB LED, please try them out and share them with your peers too!</p>\n<h2 id=\"mcetoc_1fvi5ukvv4f\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.adafruit.com/photocells\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Photocells</a></li>\n<li><a href=\"https://www.electronics-notes.com/articles/electronic_components/resistors/light-dependent-resistor-ldr.php\" target=\"_blank\" rel=\"noopener noreferrer\">Electronics-notes: Light Dependent Resistor</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-29T19:59:50+08:00",
            "date_modified": "2022-04-05T18:56:34+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-10.html",
            "title": "Ultrasonic Sensor",
            "summary": "In this tutorial, we are going to learn about the&hellip;",
            "content_html": "<p>In this tutorial, we are going to learn about the Ultrasonic Sensor and read its distance using the serial monitor!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvaopr9t49\">About the Sensor</a></li>\n<li><a href=\"#mcetoc_1fvap7cft67\">Using the Sensor</a></li>\n<li><a href=\"#mcetoc_1fvi60h1c4q\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvaopr9t49\">About the Sensor</h2>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot17.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot17-md.jpg 749w\"  alt=\"\" width=\"221\" height=\"159\"></figure>\n<p>The ultrasonic distance sensor uses ultrasonic waves - a very high-pitched sound that we cannot hear to measure the distance it is from an object.</p>\n<p>It is in a <strong>transceiver</strong>¬†configuration, where both the transmitter and receiver are on the same sensor.</p>\n<p>One of the uses of the ultrasonic distance sensor is in the automotive industry. They are usually used as reverse warning sensors but are increasingly used in self-driving vehicles.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot21.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot21-md.jpg 749w\"  alt=\"\" width=\"374\" height=\"273\"></figure>\n<h2 id=\"mcetoc_1fvap7cft67\">Using the Sensor</h2>\n<p>The ultrasonic sensor we are going to use is the HC-SR04, which is commonly used in Arduino circuits:</p>\n<figure class=\"post__image post__image--right\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot18.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot18-md.png 749w\"  alt=\"\" width=\"221\" height=\"129\"></figure>\n<p class=\"msg msg--info\"><strong>Note:</strong> We are using the 4 pin sensor instead of the 3 pin version, which can be found by typing <strong>ultrasonic sensor </strong>in the component search bar.</p>\n<p>Let us go into TinkerCAD and create a new circuit. We are going to assemble it like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot19.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot19-md.png 749w\"  alt=\"\" width=\"1758\" height=\"970\"></figure>\n<p>We are going to program the Arduino such that the ultrasonic distance sensor will output the distance measured into the serial monitor. The code blocks have been extensively simplified by TinkerCAD and it just looks like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/23/arduinoPot20.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-xs.png 300w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-sm.png 480w ,https://knowledge.fourier.industries/media/posts/23/responsive/arduinoPot20-md.png 749w\"  alt=\"\" width=\"1708\" height=\"130\"></figure>\n<p>This is what you will see when you start the simulation:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot29.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's build this circuit on the SSTuino and try it out! This is what it looks like on the SSTuino:</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvi60h1c4q\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://learn.adafruit.com/ultrasonic-sonar-distance-sensors\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Ultrasonic Sonar Distance Sensors</a></li>\n<li><a href=\"https://www.maxbotix.com/articles/how-ultrasonic-sensors-work.htm\" target=\"_blank\" rel=\"noopener noreferrer\">MaxBotix: Understanding How Ultrasonic Sensors Work</a></li>\n<li><a href=\"https://www.murata.com/en-sg/products/sensor/ultrasonic/library/apps\" target=\"_blank\" rel=\"noopener noreferrer\">muRata: Ultrasonic Sensors application guide</a></li>\n<li><a href=\"https://www.continental-automotive.com/en-gl/Passenger-Cars/Autonomous-Mobility/Enablers/Ultrasonic-Parking-Sensor\" target=\"_blank\" rel=\"noopener noreferrer\">Continental Automotive: Ultrasonic Parking Sensor</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-28T12:58:27+08:00",
            "date_modified": "2022-04-07T13:00:00+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html",
            "title": "Piezo",
            "summary": "Let us play some tunes with the SSTuino! We are&hellip;",
            "content_html": "<p>Let us play some tunes with the SSTuino! We are now going to insert a piezo element into our circuit.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fvdca6hg25\">About the Piezo</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg27\">TinkerCAD Exercise</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg28\">Pieno</a></li>\n<li><a href=\"#mcetoc_1fvdca6hg29\">Enhance the pieno</a></li>\n<li><a href=\"#mcetoc_1fvi5tdb43r\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fvdca6hg25\">About the Piezo</h2>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/146-2.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/146-2-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/146-2-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/146-2-md.jpg 749w\"  alt=\"\" width=\"101\" height=\"101\"></figure>\n<p>The Piezo Buzzer provided in the kit uses the piezoelectric effect to produce sound. They are easy to drive (i.e. do not need much energy to generate sound) and are also cheap to produce.</p>\n<p>Generally, Piezo Buzzers are sold in two types:</p>\n<ul>\n<li>A fixed frequency with resonator (will have a fixed pitch when turned on)</li>\n<li>A variable frequency without a resonator (pitch can be controlled externally)</li>\n</ul>\n<p>The buzzer provided in the kit does not come with a resonator so we can change its pitch using the SSTuino.</p>\n<h2 id=\"mcetoc_1fvdca6hg27\">TinkerCAD Exercise</h2>\n<p>Let's set up the buzzer inside TinkerCAD! Configure your circuit like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot8-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-md.png 749w\"  alt=\"\" width=\"1197\" height=\"644\"></figure>\n<p>I am going to play 3 tones on the harmonic scale. Below is how I programmed it. Can you program it to play up to 1 full scale? <em>(Do, Re, Mi, Fa, So, La, Ti Do!)</em></p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot9.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-md.png 749w\"  alt=\"\" width=\"879\" height=\"254\"></figure>\n<p>Let's create this circuit on the SSTuino! This is what it looks like:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvdca6hg28\">Pieno</h2>\n<p>We are now going to use the potentiometer to control the tone of the speaker. When you turn the knob on the potentiometer, the pitch of the speaker will change. With the same circuit as the previous exercise, we are going to tweak the code for the Pieno.</p>\n<p>First, we will need to create a new variable called pot. In this exercise, we are going to use the <strong>map to range </strong>function. The potentiometer has a range from <strong>0 to 1023</strong>, but the speaker has an output range of <strong>35 to 127</strong>. By mapping the range, we can make sure that when the potentiometer is at one end of the input range, the speaker is also at one end of its output range.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot10.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-md.png 749w\"  alt=\"\" width=\"494\" height=\"155\"></figure>\n<p>After you have tried this out, run the simulation and create your own music!</p>\n<p>Let's try this on the SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<h2 id=\"mcetoc_1fvdca6hg29\">Enhance the pieno</h2>\n<p>Would it be possible to add more functions to the <em>pieno</em>? Sure thing! Let us add 2 more buttons to the circuit as shown:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot11-2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-md.png 749w\"  alt=\"\" width=\"1164\" height=\"635\"></figure>\n<p>We will add two functions:</p>\n<ul>\n<li>A button to stop the music (mute button)</li>\n<li>A button to make the piezo beep intermittently</li>\n</ul>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/21/arduinoPot12.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-md.png 749w\"  alt=\"\" width=\"396\" height=\"385\"></figure>\n<p>This happens when you press start simulation:</p>\n<pre>Insert video here</pre>\n<p>Let's create this circuit on the SSTuino! This is what it looks like on the SSTuino:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvi5tdb43r\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://www.allaboutcircuits.com/technical-articles/how-piezoelectric-speakers-work/\" target=\"_blank\" rel=\"noopener noreferrer\">All About Circuits: How Piezoelectric Speakers Work</a></li>\n<li><a href=\"https://learn.adafruit.com/adafruit-arduino-lesson-10-making-sounds/sound\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: Making Sounds</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-9.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-27T11:41:42+08:00",
            "date_modified": "2022-04-01T17:04:48+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html",
            "title": "Passive Infra-Red Sensor",
            "summary": "Passive Infra-Red (PIR) sensors are found in a lot of&hellip;",
            "content_html": "<p>Passive Infra-Red (PIR) sensors are found in a lot of buildings and infrastructures to detect the presence of people. For example, the toilets in SST are equipped with PIR sensors to automatically turn on and off the lights to save electricity.</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1l\">About the sensor</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1m\">Let's Build it!</a>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1n\">Fresnel Lens</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fv4sotai1o\">Moving into Arduino IDE</a>\n<ul>\n<li><a href=\"#mcetoc_1fv4sotai1p\">Declaration</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1q\">Setup</a></li>\n<li><a href=\"#mcetoc_1fv4sotai1r\">Loop</a></li>\n</ul>\n</li>\n<li><a href=\"#mcetoc_1fv4sotai1s\">Your Turn</a></li>\n<li><a href=\"#mcetoc_1fvmivdsr4\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fv4sotai1l\">About the sensor</h2>\n<p>There are two main components of the PIR sensor. The first one is the electronics, which detects the movement of objects crossing the sensor. The second one is the lens, which is the <em>magic sauce</em> to help the sensor increase its detection area.</p>\n<h2 id=\"mcetoc_1fv4sotai1m\">Let's Build it!</h2>\n<p>Head over to TinkerCAD and create a new circuit like the one below:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/20/arduinoPot27.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-md.png 749w\"  alt=\"\" width=\"1860\" height=\"1006\"></figure>\n<p class=\"msg msg--warning\"><strong>Warning:¬†</strong>The pinout for the PIR sensor that is provided with TinkerCAD is different from the kit! We will be talking about the sensor provided in the kit in the sections below.</p>\n<p>Here are the pinout differences between the two sensors:</p>\n<div class=\"gallery-wrapper\"><div class=\"gallery\"  data-is-empty=\"false\" data-translation=\"Add images\" data-columns=\"2\">\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/20/gallery/PIR-Motion-Sensor-01.png\" data-size=\"226x205\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/20/gallery/PIR-Motion-Sensor-01-thumbnail.png\" alt=\"\" width=\"226\" height=\"205\"></a>\n<figcaption>Pin out of the PIR Sensor in TinkerCAD</figcaption>\n</figure>\n<figure class=\"gallery__item\"><a href=\"https://knowledge.fourier.industries/media/posts/20/gallery/IMG_5480.JPG\" data-size=\"2720x2267\"><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/20/gallery/IMG_5480-thumbnail.JPG\" alt=\"\" width=\"749\" height=\"624\"></a>\n<figcaption>Pin out of the PIR sensor in the Kit (Lens removed)</figcaption>\n</figure>\n</div></div>\n<h3 id=\"mcetoc_1fv4sotai1n\">Fresnel Lens</h3>\n<p>The lens for the PIR sensor helps it to detect objects from a distance! However, this will not work for a classroom environment because there will be too many people attempting this and as a result, the sensor will always detect movement! ü§£</p>\n<p>To prevent this, let us remove the lens to reduce the detection range!</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot38.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let's build the circuit on the SSTuino and we will be moving into programming this example with the Arduino IDE!</p>\n<h2 id=\"mcetoc_1fv4sotai1o\">Moving into Arduino IDE</h2>\n<p>Let's start programming on the Arduino IDE! Open up the Arduino app. A new window should appear.</p>\n<p>Let's make use of this template we learned previously:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/20/SSTuinoIoT8.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-md.png 749w\"  alt=\"\" width=\"897\" height=\"387\"></figure>\n<h3 id=\"mcetoc_1fv4sotai1p\">Declaration</h3>\n<p>Our code only requires us to light up the LED and send the data to the serial monitor, so I don't think there are any variables to declare. Alternatively, you can do so if you wish to for the numbering of the pins.</p>\n<h3 id=\"mcetoc_1fv4sotai1q\">Setup</h3>\n<p>This section will set up the input pins, output pins and indicate that we want to use the serial monitor.</p>\n<pre><code class=\"language-cpp\">void setup() \n{ \n    pinMode(6, INPUT); // This pin will receive the input signal from the PIR Sensor\n    pinMode(5, OUTPUT); // This pin will turn on and off the LED\n    Serial.begin(9600); // This will initialise the serial monitor\n}\n</code></pre>\n<h3 id=\"mcetoc_1fv4sotai1r\">Loop</h3>\n<p>This section will run the code forever when the SSTuino is powered on.</p>\n<pre><code class=\"language-cpp\">void loop() \n{\n  if (digitalRead(6) == 1) {\n    digitalWrite(5, HIGH); // This if statement states that if the PIR sensor detects movement, the LED will light up and serial monitor will print a new line \"Detected!\"\n    Serial.println(\"Detected!\");\n  } else {\n    digitalWrite(5, LOW); //Else the LED will turn off and print a new line \"Not Detected!\"\n    Serial.println(\"Not Detected!\");\n  }\n}\n</code></pre>\n<h2 id=\"mcetoc_1fv4sotai1s\">Your Turn</h2>\n<p>Let's try this out! This is what it looks like on the SSTuino:</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's make some changes: Could you make the LED flash on and off every second once the PIR sensor detects movement?</p>\n<pre>Insert video here</pre>\n<p class=\"msg msg--success\">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>\n<h2 id=\"mcetoc_1fvmivdsr4\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"http://www.glolab.com/pirparts/infrared.html\" target=\"_blank\" rel=\"noopener noreferrer\">Glolab: How Infrared motion detector components work</a></li>\n<li><a href=\"https://learn.adafruit.com/pir-passive-infrared-proximity-motion-sensor/how-pirs-work\" target=\"_blank\" rel=\"noopener noreferrer\">Adafruit: How PIRs Work</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-26T12:09:36+08:00",
            "date_modified": "2022-04-05T12:14:46+08:00"
        },
        {
            "id": "https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html",
            "url": "https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html",
            "title": "Potentiometer",
            "summary": "In this tutorial, we are going to read data from&hellip;",
            "content_html": "<p>In this tutorial, we are going to read data from the potentiometer and ultimately use it to control cool stuff!</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fut95ja3dt\">About the Potentiometer</a></li>\n<li><a href=\"#mcetoc_1fut95ja4dv\">Using the Potentiometer</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e0\">LED Speed Control</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e1\">LED Brightness Control</a></li>\n<li><a href=\"#mcetoc_1fut95ja4e3\">Bar Graph</a></li>\n<li><a href=\"#mcetoc_1fvi5rfai3f\">Resources and Going Further</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1fut95ja3dt\">About the Potentiometer</h2>\n<p>The potentiometer is essentially a variable resistor. But instead of having 2 pins, it has 3 pins.</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot1.jpg\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-md.jpg 749w\"  alt=\"\" width=\"151\" height=\"151\">\n<figcaption >The Bourns 3386F 10K Ohm Potentiometer provided in the kit.</figcaption>\n</figure>\n<p>Potentiometers are used frequently and commonly on electronic devices. A simple example would be the volume knob on speakers or the light dimmers in your house!</p>\n<figure class=\"post__image post__image--left\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-md.png 749w\"  alt=\"\" width=\"104\" height=\"88\"></figure>\n<p>The potentiometer that is provided in the kit is a 10K Ohm potentiometer, which means that when the knob is turned fully to one end it is 0 Ohm, while at the other end it is 10K Ohm.</p>\n<h2 id=\"mcetoc_1fut95ja4dv\">Using the Potentiometer</h2>\n<p>Let us fire up TinkerCAD, create a new circuit and configure your circuit like this:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot2.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-md.png 749w\"  alt=\"\" width=\"1260\" height=\"579\"></figure>\n<p class=\"msg msg--info\">The potentiometer inside TinkerCAD might look different from the one provided in the kit. Fret not as they are the same, but do ensure that the potentiometer inside TinkerCAD is 10k Ohm. üôÇ</p>\n<p>Let us program the board to output the potentiometer reading in our serial monitor!</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot3.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-md.png 749w\"  alt=\"\" width=\"434\" height=\"110\"></figure>\n<p>Once you are done with the circuit and code, let's run the simulation and open the serial monitor!</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot34.mp4\" type=\"video/mp4\" /></video></figure>\n<p>As you interact with the knob on the potentiometer, you should see the number change from 0 to 1023. Why does this happen? ü§î Onboard the SSTuino, there is an Analog to Digital Converter (ADC), and it has a resolution of 10 bits.¬†</p>\n<p>Let us set up this circuit on the SSTuino!</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>There is a cool feature inside the Arduino IDE! You can open the serial plotter as an alternative to the serial monitor as shown:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot35.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot35-md.png 749w\"  alt=\"\" width=\"291\" height=\"184\"></figure>\n<p>Here is what it looks like on the SSTuino II:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot42.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fut95ja4e0\">LED Speed Control</h2>\n<p>Let us make use of the potentiometer reading we have from the SSTuino to alter the blinking speed of the LED! Fire up TinkerCAD and make a circuit like so:</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot4.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-md.png 749w\"  alt=\"\" width=\"1159\" height=\"563\"></figure>\n<p>We are going to edit the code such that the location of the knob will affect the speed at which the LED blinks:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot5.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-md.png 749w\"  alt=\"\" width=\"497\" height=\"282\"></figure>\n<p>Here is what it looks like when I press <strong>Start Simulation:</strong></p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot36.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Let us build the circuit on the SSTuino! Here is what it looks like:</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot43.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fut95ja4e1\">LED Brightness Control</h2>\n<p>We will use SSTuino's PWM output function to control the brightness of the LED. There are some pins with the wavy `~` sign, which means that it can output PWM signals.¬†</p>\n<p>PWM stands for Pulse Width Modulation. The pin would output a series of square waves, and depending on the duty cycle, adjusts the width of the square wave. What it essentially does is that it turns on and off the component very quickly, such that our eyes cannot see the difference.</p>\n<p>In the diagram below, you can see how the duty cycle is adjusted by changing the width of the square wave. When the duty cycle is 0, it turns off the component. From 0 to 100, it gradually increases the intensity and is a full power when at 100% duty cycle.</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/Screenshot-2022-03-24-at-12.00.59.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-md.png 749w\"  alt=\"\" width=\"231\" height=\"252\"></figure>\n<p>For this exercise, we will use the same circuit and just edit the code:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot6.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-md.png 749w\"  alt=\"\" width=\"538\" height=\"134\"></figure>\n<p>The input is divided by 4 as the range of the PWM output is only from 0-255, while the Analog input is from 0 to 1024<br><br>This is the result I should get:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot37.mp4\" type=\"video/mp4\" /></video></figure>\n<p>Copy this circuit over to your SSTuino board setup.</p>\n<p class=\"msg msg--warning\"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>\n<p>Here is what it looks like on the SSTuino II:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot44.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fut95ja4e3\">Bar Graph</h2>\n<p>Let us control many LEDs using the Potentiometer! The aim is to vary the number of LEDs lit up when the knob of the potentiometer is turned.</p>\n<p>Setup the circuit in TinkerCAD as shown below:</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://knowledge.fourier.industries/media/posts/19/arduinoPot25.png\" sizes=\"(max-width: 749px) 100vw, 749px\" srcset=\"https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-md.png 749w\"  alt=\"\" width=\"425\" height=\"507\"></figure>\n<p>In the code, we will be using the¬†<strong>map</strong> function to map the range of the potentiometer input (0 - 1023) to the output pins (2 - 7). The higher the readout from the potentiometer, the more LEDs are light up.</p>\n<p>Below is an embed of the TinkerCAD example. Press on <strong>code</strong> to see the block code. Do you have alternative ways?</p>\n<iframe loading=\"lazy\" width=\"725\" height=\"453\" src=\"https://www.tinkercad.com/embed/45bdZnBKqGZ?editbtn=1\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n<p class=\"msg msg--info\">If you are unable to load this embed, head to <a href=\"https://www.tinkercad.com/things/45bdZnBKqGZ\" target=\"_blank\" rel=\"noopener noreferrer\">this link</a></p>\n<p>In text programming, you can simplify this too! How can it be done?</p>\n<p>This is how it works on the SSTuino II:</p>\n<figure class=\"post__video\"><video loading=\"lazy\" width=\"300\" height=\"150\" playsinline=\"\" autoplay=\"autoplay\" muted=\"\" loop=\"loop\" data-mce-fragment=\"1\">\n    <source src=\"media/files/arduinoPot45.mp4\" type=\"video/mp4\" /></video></figure>\n<h2 id=\"mcetoc_1fvi5rfai3f\">Resources and Going Further</h2>\n<ul>\n<li><a href=\"https://www.electronics-tutorials.ws/resistor/potentiometer.html\" target=\"_blank\" rel=\"noopener noreferrer\">Electronics Tutorials: Potentiometers</a></li>\n<li><a href=\"https://www.digikey.sg/en/products/detail/bourns-inc/3386F-1-103TLF/1232544\" target=\"_blank\" rel=\"noopener noreferrer\">Digikey Singapore: Bournes 3386F Potentiometer</a></li>\n<li><a href=\"https://www.arduino.cc/en/Reference/AnalogRead\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: analogRead</a></li>\n<li><a href=\"https://learn.sparkfun.com/tutorials/analog-to-digital-conversion/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun: Analog to Digital Conversion</a></li>\n<li><a href=\"https://docs.arduino.cc/learn/microcontrollers/analog-output\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino: Basics of Pulse Width Modulation</a></li>\n<li><a href=\"https://learn.sparkfun.com/tutorials/pulse-width-modulation/all\" target=\"_blank\" rel=\"noopener noreferrer\">Sparkfun Learn: Pulse Width Modulation</a></li>\n</ul>\n<p><a href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html\" class=\"btn btn--outline\">‚¨ÖÔ∏è Back</a><a style=\"float: right;\" href=\"https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html\" class=\"btn btn--green\">Next ‚û°Ô∏è</a></p>",
            "author": {
                "name": "FourierIndustries LLP"
            },
            "tags": [
            ],
            "date_published": "2022-03-24T14:19:13+08:00",
            "date_modified": "2022-04-05T18:55:48+08:00"
        }
    ]
}
