<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>FourierIndustries Knowledge Base</title>
    <link href="https://knowledge.fourier.industries/feed.xml" rel="self" />
    <link href="https://knowledge.fourier.industries" />
    <updated>2022-03-27T11:41:42+08:00</updated>
    <author>
        <name>FourierIndustries LLP</name>
    </author>
    <id>https://knowledge.fourier.industries</id>

    <entry>
        <title>Piezo</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html</id>

        <updated>2022-03-27T11:41:42+08:00</updated>
            <summary>
                <![CDATA[
                    Let us play some tunes with the SSTuino! We are&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Let us play some tunes with the SSTuino! We are now going to insert a piezo element into our circuit. Configure your circuit like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/21/arduinoPot8-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot8-2-md.png 749w"  alt="" width="1197" height="644"></figure>
<p>I am going to play 3 tones on the harmonic scale. Below is how I programmed it. Can you program it to play up to 1 full scale? <em>(Do, Re, Mi, Fa, So, La, Ti Do!)</em></p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/21/arduinoPot9.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot9-md.png 749w"  alt="" width="879" height="254"></figure>
<p>Let's create this circuit on the SSTuino! This is what it looks like:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<pre>Insert video here</pre>
<h2>Pieno</h2>
<p>We are now going to use the potentiometer to control the tone of the speaker. When you turn the knob on the potentiometer, the pitch of the speaker will change. With the same circuit as the previous exercise, we are going to tweak the code for the Pieno.</p>
<p>First, we will need to create a new variable called pot. In this exercise, we are going to use the <strong>map to range </strong>function. The potentiometer has a range from <strong>0 to 1023</strong>, but the speaker has an output range of <strong>35 to 127</strong>. By mapping the range, we can make sure that when the potentiometer is at one end of the input range, the speaker is also at one end of its output range.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/21/arduinoPot10.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot10-md.png 749w"  alt="" width="494" height="155"></figure>
<p>After you have tried this out, run the simulation and create your own music!</p>
<p>Let's try this on the SSTuino!</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<pre>Insert video here</pre>
<h2>Enhance the pieno</h2>
<p>Would it be possible to add more functions to the <em>pieno</em>? Sure thing! Let us add 2 more buttons to the circuit as shown:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/21/arduinoPot11-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot11-2-md.png 749w"  alt="" width="1164" height="635"></figure>
<p>We will add two functions:</p>
<ul>
<li>A button to stop the music (mute button)</li>
<li>A button to make the piezo beep intermittently</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/21/arduinoPot12.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-xs.png 300w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-sm.png 480w ,https://knowledge.fourier.industries/media/posts/21/responsive/arduinoPot12-md.png 749w"  alt="" width="396" height="385"></figure>
<p>This happens when you press start simulation:</p>
<pre>Insert video here</pre>
<p>Let's create this circuit on the SSTuino! This is what it looks like on the SSTuino:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<pre>Insert video here</pre>
<p class="msg msg--success">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="#non-existing-post-with-id-22" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Proximity Infra-Red Sensor</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html</id>

        <updated>2022-03-27T11:20:01+08:00</updated>
            <summary>
                <![CDATA[
                    Proximity Infra-Red (PIR) sensors are found in a lot of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Proximity Infra-Red (PIR) sensors are found in a lot of buildings and infrastructures to detect the presence of people. For example, the toilets in SST are equipped with PIR sensors to automatically turn on and off the lights to save electricity.</p>
<p>There are two main components of the PIR sensor. The first one is the electronics, which detects the movement of objects crossing the sensor. The second one is the lens, which is the <em>magic sauce</em> to help the sensor increase its detection area.</p>
<h2>Let's Build it!</h2>
<p>Head over to TinkerCAD and create a new circuit like the one below:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/20/arduinoPot27.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/arduinoPot27-md.png 749w"  alt="" width="1860" height="1006"></figure>
<p class="msg msg--warning"><strong>Warning:¬†</strong>The pinout for the PIR sensor that is provided with TinkerCAD is different from the kit! We will be talking about the sensor provided in the kit in the sections below.</p>
<p>Here are the pinout differences between the two sensors:</p>
<p>Insert gallery here</p>
<h3>Fresnel Lens</h3>
<p>The lens for the PIR sensor helps it to detect objects from a distance! However, this will not work for a classroom environment because there will be too many people attempting this and as a result, the sensor will always detect movement! ü§£</p>
<p>To prevent this, let us remove the lens to reduce the detection range!</p>
<pre>Insert video here</pre>
<p>Let's build the circuit on the SSTuino and we will be moving into programming this example with the Arduino IDE!</p>
<h2>Moving into Arduino IDE</h2>
<p>Let's start programming on the Arduino IDE! Let us follow this template</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/20/SSTuinoIoT8.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/20/responsive/SSTuinoIoT8-md.png 749w"  alt="" width="897" height="387"></figure>
<h3>Declaration</h3>
<p>Our code only requires us to light up the LED and send the data to the serial monitor, so I don't think there are any variables to declare. Alternatively, you can do so if you wish to for the numbering of the pins.</p>
<h3>Setup</h3>
<p>This section will set up the input pins, output pins and indicate that we want to use the serial monitor.</p>
<pre><code class="language-cpp">
void setup() 
{ 
    pinMode(6, INPUT); // This pin will receive the input signal from the PIR Sensor
    pinMode(5, OUTPUT); // This pin will turn on and off the LED
    Serial.begin(9600); // This will initialise the serial monitor
}
    </code></pre>
<h3>Loop</h3>
<p>This section will run the code forever when the SSTuino is powered on.</p>
<pre><code class="language-cpp">
void loop() 
{
  if (digitalRead(6) == 1) {
    digitalWrite(5, HIGH); // This if statement states that if the PIR sensor detects movement, the LED will light up and serial monitor will print a new line "Detected!"
    Serial.println("Detected!");
  } else {
    digitalWrite(5, LOW); //Else the LED will turn off and print a new line "Not Detected!"
    Serial.println("Not Detected!");
  }
}
    </code></pre>
<h2>Your Turn</h2>
<p>Let's try this out! This is what it looks like on the SSTuino:</p>
<pre>Insert video here</pre>
<p class="msg msg--success">Let's make some changes: Could you make the LED flash on and off every second once the PIR sensor detects movement?</p>
<pre>Insert video here</pre>
<p class="msg msg--success">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-8.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Potentiometer</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html</id>

        <updated>2022-03-24T15:13:35+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we are going to read data from&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we are going to read data from the potentiometer and ultimately use it to control cool stuff!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fut95ja3dt">About the Potentiometer</a>
<ul>
<li><a href="#mcetoc_1fut95ja4du">Resources and Going Further</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fut95ja4dv">Using the Potentiometer</a></li>
<li><a href="#mcetoc_1fut95ja4e0">LED Speed Control</a></li>
<li><a href="#mcetoc_1fut95ja4e1">LED Brightness Control</a>
<ul>
<li><a href="#mcetoc_1fut95ja4e2">Resources and Going Further</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fut95ja4e3">Bar Graph</a></li>
</ul>
</div>
<h2 id="mcetoc_1fut95ja3dt">About the Potentiometer</h2>
<p>The potentiometer is essentially a variable resistor. But instead of having 2 pins, it has 3 pins.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/19/arduinoPot1.jpg" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot1-md.jpg 749w"  alt="" width="151" height="151">
<figcaption >The Bourns 3386F 10K Ohm Potentiometer provided in the kit.</figcaption>
</figure>
<p>Potentiometers are used frequently and commonly on electronic devices. A simple example would be the volume knob on speakers or the light dimmers in your house!<figure class="post__image post__image--left"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot-md.png 749w"  alt="" width="155" height="131"></figure>
<p>The potentiometer that is provided in the kit is a 10K Ohm potentiometer, which means that when the knob is turned fully to one end it is 0 Ohm, while at the other end it is 10K Ohm.</p>
<h3 id="mcetoc_1fut95ja4du">Resources and Going Further</h3>
<ul>
<li><a href="https://www.electronics-tutorials.ws/resistor/potentiometer.html" target="_blank" rel="noopener noreferrer">Electronics Tutorials: Potentiometers</a></li>
<li><a href="https://www.digikey.sg/en/products/detail/bourns-inc/3386F-1-103TLF/1232544" target="_blank" rel="noopener noreferrer">Digikey Singapore: Bournes 3386F Potentiometer</a></li>
</ul>
<h2 id="mcetoc_1fut95ja4dv">Using the Potentiometer</h2>
<p>Let us fire up TinkerCAD, create a new circuit and configure your circuit like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot2-md.png 749w"  alt="" width="1260" height="579"></figure>
<p class="msg msg--info">The potentiometer inside TinkerCAD might look different from the one provided in the kit. Fret not as they are the same, but do ensure that the potentiometer inside TinkerCAD is 10k Ohm. üôÇ</p>
<p>Let us program the board to output the potentiometer reading in our serial monitor!</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot3.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot3-md.png 749w"  alt="" width="434" height="110"></figure>
<p>Once you are done with the circuit and code, let's run the simulation and open the serial monitor!</p>
<pre>Insert video here</pre>
<p>As you interact with the knob on the potentiometer, you should see the number change from 0 to 1023. Why does this happen? ü§î Onboard the SSTuino, there is an Analog to Digital Converter (ADC), and it has a resolution of 10 bits.¬†</p>
<p>Let us set up this circuit on the SSTuino!</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<p>There is a cool feature inside the Arduino IDE! You can open the serial plotter as an alternative to the serial monitor as shown:</p>
<p>Here is what it looks like on the SSTuino II:</p>
<pre>Insert video here</pre>
<h2 id="mcetoc_1fut95ja4e0">LED Speed Control</h2>
<p>Let us make use of the potentiometer reading we have from the SSTuino to alter the blinking speed of the LED! Fire up TinkerCAD and make a circuit like so:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot4.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot4-md.png 749w"  alt="" width="1159" height="563"></figure>
<p>We are going to edit the code such that the location of the knob will affect the speed at which the LED blinks:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot5.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot5-md.png 749w"  alt="" width="497" height="282"></figure>
<p>Here is what it looks like when I press <strong>Start Simulation:</strong></p>
<pre>Insert video here</pre>
<p>Let us build the circuit on the SSTuino! Here is what it looks like:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<pre>Insert video here</pre>
<p>You can also use the serial plotter in this example too!</p>
<h2 id="mcetoc_1fut95ja4e1">LED Brightness Control</h2>
<p>We will use SSTuino's PWM output function to control the brightness of the LED. There are some pins with the wavy `~` sign, which means that it can output PWM signals.¬†</p>
<p>PWM stands for Pulse Width Modulation. The pin would output a series of square waves, and depending on the duty cycle, adjusts the width of the square wave. What it essentially does is that it turns on and off the component very quickly, such that our eyes cannot see the difference.</p>
<p>In the diagram below, you can see how the duty cycle is adjusted by changing the width of the square wave. When the duty cycle is 0, it turns off the component. From 0 to 100, it gradually increases the intensity and is a full power when at 100% duty cycle.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/Screenshot-2022-03-24-at-12.00.59.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/Screenshot-2022-03-24-at-12.00.59-md.png 749w"  alt="" width="231" height="252"></figure>
<h3 id="mcetoc_1fut95ja4e2">Resources and Going Further</h3>
<ul>
<li><a href="https://docs.arduino.cc/learn/microcontrollers/analog-output" target="_blank" rel="noopener noreferrer">Arduino: Basics of Pulse Width Modulation</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/pulse-width-modulation/all" target="_blank" rel="noopener noreferrer">Sparkfun Learn: Pulse Width Modulation</a></li>
</ul>
<p>For this exercise, we will use the same circuit and just edit the code:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot6.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot6-md.png 749w"  alt="" width="538" height="134"></figure>
<p>I divide the input by 4 as the range of the PWM output is only from 0-255, while the Analog input is from 0 to 1024<br><br>This is the result I should get:</p>
<pre>Insert video here</pre>
<p>Copy this circuit over to your SSTuino board setup.</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<p>Here is what it looks like on the SSTuino II:</p>
<h2 id="mcetoc_1fut95ja4e3">Bar Graph</h2>
<p>Let us control many LEDs using the Potentiometer! The aim is to vary the number of LEDs lit up when the knob of the potentiometer is turned.</p>
<p>Setup the circuit in TinkerCAD as shown below:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/19/arduinoPot25.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-xs.png 300w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-sm.png 480w ,https://knowledge.fourier.industries/media/posts/19/responsive/arduinoPot25-md.png 749w"  alt="" width="425" height="507"></figure>
<p>In the code, we will be using the¬†<strong>map</strong> function to map the range of the potentiometer input (0 - 1023) to the output pins (2 - 7). The higher the readout from the potentiometer, the more LEDs are light up.</p>
<p>Below is an embed of the TinkerCAD example. Press on <strong>code</strong> to see the block code. Do you have alternative ways?</p>
<div class="post__iframe"><iframe loading="lazy" width="725" height="453" src="https://www.tinkercad.com/embed/45bdZnBKqGZ?editbtn=1" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>
<p class="msg msg--info">If you are unable to load this embed, head to <a href="https://www.tinkercad.com/things/45bdZnBKqGZ" target="_blank" rel="noopener noreferrer">this link</a></p>
<p>In text programming, you can simplify this too! How can it be done?</p>
<p>Here is what happens when I start the simulation:</p>
<pre>Insert video here</pre>
<p>This is how it works on the SSTuino II:</p>
<pre>Insert video here</pre>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-7.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>From Blocks to Code, Part 1</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html</id>

        <updated>2022-03-21T20:53:01+08:00</updated>
            <summary>
                <![CDATA[
                    This tutorial aims to teach you the basics of text&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>This tutorial aims to teach you the basics of text coding, using the Arduino IDE. We started using the IDE to edit code frequently and will be using it to program increasingly complex projects in the future.</p>
<h2>Basic Building Blocks</h2>
<figure class="post__image"><img loading="lazy"  style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);" src="https://knowledge.fourier.industries/media/posts/18/SSTuinoIoT8.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/18/responsive/SSTuinoIoT8-md.png 749w"  alt="" width="897" height="387"></figure>
<p><strong>Declaration -¬†</strong>Used to declare the libraries and variables used in the code. For example, the variable <code>temp</code> is declared as an integer and has the starting value of 0.</p>
<p><strong>Setup -¬†</strong>Code that is run once to set up your SSTuino. For example, the <code>Serial.begin(9600);</code> tells it to start the serial monitor with a baud rate (speed) of 9600bps (bits per second)</p>
<p><strong>Loop -¬†</strong>Code that is repeated forever, when the microcontroller is powered. For example, the code inside the example tells it to output temperature data using the serial monitor every 10 milliseconds.</p>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-6.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Variables and Operators</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html</id>

        <updated>2022-03-23T14:43:15+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we will cover the usage of variables&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we will cover the usage of variables and AND/OR Operators.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fulqia872go">Naming your variables</a></li>
<li><a href="#mcetoc_1fulqia872gp">Logic Operations</a>
<ul>
<li><a href="#mcetoc_1fulqia872gq">Some history...</a></li>
<li><a href="#mcetoc_1fulqia872gr">AND Operator</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fulqia872gs">OR Operator</a>
<ul>
<li><a href="#mcetoc_1fulqia872gt">Resources and Going Further</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fulqia872gu">OR Operator exercise</a></li>
<li><a href="#mcetoc_1fulqia872gv">AND Operator exercise</a></li>
<li><a href="#mcetoc_1fulqia872h0">Drag Race example</a></li>
<li><a href="#mcetoc_1fulqia872h1">Toggle Switch</a></li>
</ul>
</div>
<h2 id="mcetoc_1fulqia872go">Naming your variables</h2>
<p>After some tinkering with your coding, you may realise that it may be a hassle to change for example a pin, like this example code:</p>
<pre><code class="language-cpp">
void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13, HIGH);
  delay(1000); // Wait for 1000 millisecond(s)
  digitalWrite(13, LOW);
  delay(1000); // Wait for 1000 millisecond(s)
}
</code></pre>
<p>Imagine that you would have to change all the <code>pin 13</code> to another pin, and would have to scan through the entire code just to change all these values! Isn't it a hassle to change all these numbers?</p>
<p><em>Introducing... Variable names. </em>üòé Here is a modified version of the code above:</p>
<pre><code class="language-cpp">
int LED = 13;
int wait = 1000;

void setup()
{
  pinMode(LED, OUTPUT);
}

void loop()
{
  digitalWrite(LED, HIGH);
  delay(wait); // Wait for 1000 millisecond(s)
  digitalWrite(13, LOW);
  delay(wait); // Wait for 1000 millisecond(s)
}
</code></pre>
<p><em><strong>Voil√†!</strong></em> I have managed to change all the numbers to variable names. For example, in the event I want to adjust the <code>delay()</code> function in the code, I just have to change the <code>1000</code> in the <code>int wait=1000;</code> into a different number! Now that's straightforward.¬†<em>How about you try it out now?</em></p>
<h2 id="mcetoc_1fulqia872gp">Logic Operations</h2>
<p>Logical operations are introduced when we need to evaluate related expressions to return a single value. For this tutorial, we are going to introduce the AND/OR Operators.</p>
<h3 id="mcetoc_1fulqia872gq">Some history...</h3>
<p>Back when technology was not this advanced, the various operators were actual hardware logic gates that were placed into the circuit. The chips looked something like this:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton15.jpg" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton15-md.jpg 749w"  alt="" width="390" height="317"></figure>
<p>Technology has come a long way, squeezing billions of transistors inside a single chip to provide us with a fast, modern computer.</p>
<h3 id="mcetoc_1fulqia872gr">AND Operator</h3>
<p>How it works is that if both Input 1 and Input 2 are <code>high</code>, it will give a <code>high</code> output, as illustrated in this table (emojis added to help you understand üòÑ):</p>
<table class="table-bordered" style="border-collapse: collapse; width: 100%; height: 251.797px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;"><strong>Input 1</strong></td>
<td style="width: 33.2855%; height: 50.3594px;"><strong>Input 2</strong></td>
<td style="width: 33.2866%; height: 50.3594px;"><strong>Output</strong></td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">0 üò°</td>
<td style="width: 33.2855%; height: 50.3594px;">0 üò°</td>
<td style="width: 33.2866%; height: 50.3594px;">0 üò°</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">0 üò°</td>
<td style="width: 33.2855%; height: 50.3594px;">1 üôÇ</td>
<td style="width: 33.2866%; height: 50.3594px;">0 üò°</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">1 üôÇ</td>
<td style="width: 33.2855%; height: 50.3594px;">0 üò°</td>
<td style="width: 33.2866%; height: 50.3594px;">0 üò°</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">1 üôÇ</td>
<td style="width: 33.2855%; height: 50.3594px;">1 üôÇ</td>
<td style="width: 33.2866%; height: 50.3594px;">1 üôÇ</td>
</tr>
</tbody>
</table>
<p>¬†</p>
<h2 id="mcetoc_1fulqia872gs">OR Operator</h2>
<p>How it works is that if either Input 1 <strong>OR</strong> Input 2 are <code>high</code>, it will give a <code>high</code> output. If both Inputs are <code>high</code>, it will also give a <code>high</code> output, as illustrated in this table (Emojis added to help you understand üòÑ):¬†</p>
<table class="table-bordered" style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 33.2855%;"><strong>Input 1</strong></td>
<td style="width: 33.2855%;"><strong>Input 2</strong></td>
<td style="width: 33.2866%;"><strong>Output</strong></td>
</tr>
<tr>
<td style="width: 33.2855%;">0 üò°</td>
<td style="width: 33.2855%;">0 üò°</td>
<td style="width: 33.2866%;">0 üò°</td>
</tr>
<tr>
<td style="width: 33.2855%;">0 üò°</td>
<td style="width: 33.2855%;">1 üôÇ</td>
<td style="width: 33.2866%;">1 üôÇ</td>
</tr>
<tr>
<td style="width: 33.2855%;">1 üôÇ</td>
<td style="width: 33.2855%;">0 üò°</td>
<td style="width: 33.2866%;">1 üôÇ</td>
</tr>
<tr>
<td style="width: 33.2855%;">1 üôÇ</td>
<td style="width: 33.2855%;">1 üôÇ</td>
<td style="width: 33.2866%;">1 üôÇ</td>
</tr>
</tbody>
</table>
<h3 id="mcetoc_1fulqia872gt">Resources and Going Further</h3>
<ul>
<li><a href="https://www.electronics-tutorials.ws/category/logic" target="_blank" rel="noopener noreferrer">Electronic Tutorials: Logic Gates</a></li>
</ul>
<h2 id="mcetoc_1fulqia872gu">OR Operator exercise</h2>
<p>Let us create a new circuit in TinkerCAD like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton16.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton16-md.png 749w"  alt="" width="1818" height="843"></figure>
<p>Next, we will need to edit the code such that the LED would light up once <strong>one</strong> of the buttons is pressed:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton17.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton17-md.png 749w"  alt="" width="1897" height="501"></figure>
<p>You would see this when you start simulation:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton34.mp4" type="video/mp4" /></video></figure>
<p>Here is what it looks like on the SSTuino:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton38.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1fulqia872gv">AND Operator exercise</h2>
<p>With the same example, we just have to change one part of the code to this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton21.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton21-md.png 749w"  alt="" width="2032" height="536"></figure>
<p class="msg msg--info"><strong>Tip: </strong>To activate the two buttons, you would have to press and hold <strong>SHIFT</strong> on your keyboard while clicking the buttons to activate both buttons.</p>
<p>You would see this when you start simulation:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton35.mp4" type="video/mp4" /></video></figure>
<p>Here is what it looks like on the SSTuino:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton39.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1fulqia872h0">Drag Race example</h2>
<p>Let us duplicate the circuit we have just created in the previous section.</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton22.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton22-md.png 749w"  alt="" width="636" height="374"></figure>
<p>We will need to have 3 LEDs this time, to show that:</p>
<table class="table-bordered" style="border-collapse: collapse; width: 100%; height: 251.797px;" border="1">
<tbody>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;"><strong>Button 1</strong></td>
<td style="width: 33.2855%; height: 50.3594px;"><strong>Button 2</strong></td>
<td style="width: 33.2866%; height: 50.3594px;"><strong>Output</strong></td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">Not Pressed</td>
<td style="width: 33.2855%; height: 50.3594px;">Not Pressed</td>
<td style="width: 33.2866%; height: 50.3594px;"><span style="color: #e03e2d;">Red</span> LED</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">Not Pressed</td>
<td style="width: 33.2855%; height: 50.3594px;">Pressed</td>
<td style="width: 33.2866%; height: 50.3594px;"><span style="color: #f1c40f;">Yellow</span> LED</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">Pressed</td>
<td style="width: 33.2855%; height: 50.3594px;">Not Pressed</td>
<td style="width: 33.2866%; height: 50.3594px;"><span style="color: #f1c40f;">Yellow</span> LED</td>
</tr>
<tr style="height: 50.3594px;">
<td style="width: 33.2855%; height: 50.3594px;">Pressed</td>
<td style="width: 33.2855%; height: 50.3594px;">Pressed</td>
<td style="width: 33.2866%; height: 50.3594px;"><span style="color: #2dc26b;">Green</span> LED</td>
</tr>
</tbody>
</table>
<p>The circuit is built as shown:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton23-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton23-2-md.png 749w"  alt="" width="1915" height="872"></figure>
<p class="msg msg--highlight  msg--success">How would you program this circuit?</p>
<p>Here is how I did it:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton24.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton24-md.png 749w"  alt="" width="1206" height="812"></figure>
<p>Here is how the code works:</p>
<ol>
<li>Are any of the buttons pressed? If yes go to 2, if not, Red LED.</li>
<li>Are both of the buttons pressed? If yes, Green LED, if not, Yellow LED.</li>
</ol>
<p>So would there be other ways to do it? <em>Certainly!</em> This is just one of the ways you can do it! There are many ways to make it work the same way also!</p>
<p>For the above code, this is what happens when I press¬†<strong>Start Simulation:</strong></p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton36.mp4" type="video/mp4" /></video></figure>
<p>Here is what it looks like on the SSTuino:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton40.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1fulqia872h1">Toggle Switch</h2>
<p>Let us assume that we only have a button to control our lighting. Based on previous examples, if you were want to light up the LED, you would have to press and hold the LED right? What if I was to use the washroom and want the lights to be on? I would then have to press and hold the button for the lights to remain on! üò± To make our lives much better, we can make our button into a toggle switch with some coding... ü•≥</p>
<p>Build a circuit as shown:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton4.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton4-md.png 749w"  alt="" width="1929" height="853"></figure>
<p>For the program, we would have to introduce variables. To create variables, navigate here:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton27.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton27-md.png 749w"  alt="" width="260" height="230"></figure>
<p>Create the variables <code>btn</code> and <code>led</code>. We are going to use these variables to store the state of the button and LED. What this means is that if the button is pressed, I change the state of the variable, and it will remember the state. This also means that if I press and hold the button, it does not spam the ON command. It will just activate once. Same with the LED.</p>
<p>Here is how the program can be coded:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/17/arduinoButton28.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-xs.png 300w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-sm.png 480w ,https://knowledge.fourier.industries/media/posts/17/responsive/arduinoButton28-md.png 749w"  alt="" width="1152" height="1014"></figure>
<p class="msg msg--success">You can explore other ways of programming this too!</p>
<p>Did you manage to do it? If you did, that's great! Do help your peers out too!</p>
<p>You would see this when you start simulation:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton37.mp4" type="video/mp4" /></video></figure>
<p>Here is what it looks like on the SSTuino:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton41.mp4" type="video/mp4" /></video></figure>
<p class="msg msg--success">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Pull-up resistors and If/Else Statements</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html</id>

        <updated>2022-03-22T15:52:18+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we will learn about pull up resistors,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we will learn about pull up resistors, and use push buttons to control lighting.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fulqiifr2he">Pull-up resistors</a>
<ul>
<li><a href="#mcetoc_1fulqiifr2hf">Resources and Going Further</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fulqiifr2hg">Buttons and If/Else Statement</a></li>
<li><a href="#mcetoc_1fulqiifr2hh">Control your lights</a></li>
</ul>
</div>
<h2 id="mcetoc_1fulqiifr2he">Pull-up resistors</h2>
<p>Pull-up resistors are found in digital logic devices and microcontrollers. When a pin in say, the SSTuino is connected as an input and tries to read the state of the pin, it is very difficult to determine whether the pin is actually high or low, due to a lot of factors such as noise in the circuit. This effect is referred to as floating.<br><br>To eliminate this, we will place a pull-up resistor to ensure that the pin is either in its <code>HIGH</code> or <code>LOW</code> state, while using a little bit of current. Pull-up resistors are usually used on buttons and switches where there is a possibility of signal noise.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://cdn.sparkfun.com/assets/6/f/b/c/7/511568b6ce395f1b40000000.jpg" data-is-external-image="true"  alt="" width="315" height="231"></figure>
<h3 id="mcetoc_1fulqiifr2hf">Resources and Going Further</h3>
<ul>
<li><a href="https://learn.sparkfun.com/tutorials/pull-up-resistors/all" target="_blank" rel="noopener noreferrer">Sparkfun: Pull up resistors</a></li>
<li><a href="https://learn.adafruit.com/circuit-playground-digital-input/floating-inputs" target="_blank" rel="noopener noreferrer">Adafruit: Floating pins</a></li>
<li><a href="https://www.mouser.com/blog/dont-leave-your-pins-floating" target="_blank" rel="noopener noreferrer">Mouser: Don't leave your pins floating</a></li>
</ul>
<h2 id="mcetoc_1fulqiifr2hg">Buttons and If/Else Statement</h2>
<p>We are going to read very simple data from a push button, to know whether it has been pressed or not. Set up your circuit as shown:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/15/arduinoButton1-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton1-2-md.png 749w"  alt="" width="1809" height="789"></figure>
<p>Next, go to the coding section and then program it like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/15/arduinoButton2-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton2-2-md.png 749w"  alt="" width="639" height="329"></figure>
<p>What this code does is that the Arduino would wait for the button to be pressed. <strong>If</strong> the button is not pressed, it would output "Not pressed!" in the serial monitor. <strong>Else</strong>, it would output "pressed!" in the serial monitor. This is how a simple If/Else statement works!</p>
<p>Now start the simulation and then press the serial monitor:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton3.mp4" type="video/mp4" /></video></figure>
<p>Let's copy this circuit to your SSTuino!¬†</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<p>After the code has been uploaded to the SSTuino, let's head to the serial monitor of the Arduino IDE:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton29.png" data-size="1002x494"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton29-thumbnail.png" alt="" width="749" height="369"></a>
<figcaption>You can click on the top right hand corner of the Arduino IDE,</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton30.png" data-size="1168x756"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/15/gallery/arduinoButton30-thumbnail.png" alt="" width="749" height="485"></a>
<figcaption>or go to Tools &gt; Serial Monitor.</figcaption>
</figure>
</div></div>
<p>Here is how the circuit looks like:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton32.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1fulqiifr2hh">Control your lights</h2>
<p><em>This time with coding! </em>üòÅ With the data we have read from the push button, we can use it to trigger a reaction. Set up your circuit in TinkerCAD as shown:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/15/arduinoButton4-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton4-2-md.png 749w"  alt="" width="1929" height="853"></figure>
<p>Next, we will need to edit the code such that the LED will light up when the button is pressed:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/15/arduinoButton5.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/15/responsive/arduinoButton5-md.png 749w"  alt="" width="1064" height="680"></figure>
<p>The block code is similar to the previous exercise, but with LEDs added this time. This will happen after you start simulation:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton31.mp4" type="video/mp4" /></video></figure>
<p>Let's copy this circuit over to your SSTuino! This is how it should look like:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoButton33.mp4" type="video/mp4" /></video></figure>
<p class="msg msg--success">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>
<p><a href="https://knowledge.fourier.industries/programming-the-sstuino-ii.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-4.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Programming the SSTuino II</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/programming-the-sstuino-ii.html"/>
        <id>https://knowledge.fourier.industries/programming-the-sstuino-ii.html</id>

        <updated>2022-03-24T14:04:05+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we will discuss the programming language that&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we will discuss the programming language that the SSTuino II uses, and explore some examples.</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fuihi7fh13k">Virtual Programming</a></li>
<li><a href="#mcetoc_1fuihi7fh13l">Pin 13</a></li>
<li><a href="#mcetoc_1fuihi7fh13m">Transfer program from TinkerCAD to Arduino IDE</a>
<ul>
<li><a href="#mcetoc_1fuihi7fh13n">Additional Information</a></li>
</ul>
</li>
<li><a href="#mcetoc_1fuihi7fh13o">Uploading code from Arduino IDE to SSTuino II</a></li>
<li><a href="#mcetoc_1fuihi7fh13p">Built-in LED</a></li>
</ul>
</div>
<h2 id="mcetoc_1fuihi7fh13k">Virtual Programming</h2>
<p>Before we go into programming with the Arduino IDE, let us take things slow with the coding functionality on TinkerCAD!</p>
<p>The Arduino programming language is very similar to the <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener noreferrer">C/C++ Language</a> and are actually C/C++ functions that can be called into your code. When the code is uploaded onto the SSTuino, the compiler inside the Arduino IDE will convert it to something that the microcontroller can read. For documentation regarding the Arduino IDE, please visit <a href="https://docs.arduino.cc/software/ide-v1/tutorials/arduino-ide-v1-basics" target="_blank" rel="noopener noreferrer">this website.</a></p>
<p>Create a new circuit on TinkerCAD, and set it up like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg1-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg1-2-md.png 749w"  alt="" width="1836" height="679"></figure>
<p>Once you set it up and press start simulation, notice the LED on the Arduino blinking? Why does this happen?</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/arduinoProg2.mp4" type="video/mp4" /></video></figure>
<p>The reason this happens is that TinkerCAD automatically inserts a sample code when you add the Arduino into the circuit. Stop the simulation and press the <strong>Code</strong> button. You should see something like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg3-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg3-2-md.png 749w"  alt="" width="2880" height="1362"></figure>
<p>TinkerCAD is very simple to use as you can use block coding to program the Arduino, and might be familiar if you have done block coding before with environments like Scratch or MIT App Inventor.</p>
<p>If you would like to program with text in TinkerCAD, you can also do so like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg10-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg10-2-md.png 749w"  alt="" width="910" height="379"></figure>
<p>They also have another format called Blocks + Code. The text code changes according to the blocks that you place.</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg11-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg11-2-md.png 749w"  alt="" width="1662" height="822"></figure>
<p class="msg msg--info"><strong>Tip:</strong> TinkerCAD will delete your blocks if you switch over to text-based programming and vice versa (i.e. your text programming will be deleted if you switch back to block based programming). <img loading="lazy" style="display: block; margin-left: auto; margin-right: auto; width: 50%;" src="https://knowledge.fourier.industries/media/posts/14/arduinoProg12.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg12-md.png 749w"  alt=""></p>
<p>So what does this block of code do? It tells the Arduino to:</p>
<ul>
<li>Turn <strong>on</strong> the built-in LED for 1 second,</li>
<li>Turn <strong>off</strong> the built-in LED for 1 second</li>
</ul>
<p>and it repeats all over until you turn off the circuit by unplugging the Arduino from the power source. In Arduino programming, <strong>HIGH</strong> means to turn something on or give it power, while <strong>LOW</strong> means to turn something off or to not give it power. For this code, there are only 2 states, <strong>HIGH or LOW.</strong> This means that it is either on or off and there is no value in between (either 1 or 0).<br><br>Now change the value of the <a href="#" class="btn btn--yellow">wait ___ seconds</a> to something that you like. What happens then?</p>
<h2 id="mcetoc_1fuihi7fh13l">Pin 13</h2>
<p>Now, let us connect up this circuit:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg4-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg4-2-md.png 749w"  alt="" width="1919" height="955"></figure>
<p>After you start the simulation, it should look something like this:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduinoProg5.mp4" type="video/mp4" /></video></figure>
<p><em>Wait a minute...</em> How come the LED attached turns on and off even though I did not program it? Well, the reason behind it is that the built in LED on the Arduino board is also connected to pin 13. This means in the program, <code>LED_BUILTIN</code> is also pin 13.</p>
<p class="msg msg--info">For the Arduino Uno in TinkerCAD, the <code>LED_BUILTIN</code>¬†LED pin is the same as pin 13. On the SSTuino II, the <code>LED_BUILTIN</code> LED pin and pin 13 is separate. The SSTuino II has more pins available compared to the Arduino Uno, so we assigned these 2 pins separate from each other. This means that pin 13 does not affect the <code>LED_BUILTIN</code>¬†LED!</p>
<h2 id="mcetoc_1fuihi7fh13m">Transfer program from TinkerCAD to Arduino IDE</h2>
<p>In TinkerCAD, another awesome feature is the ability to download the program that you have coded just now! Go to code, and press the download button:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg6.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg6-md.png 749w"  alt="" width="2880" height="1360"></figure>
<p>A <code>.ino</code> file will be downloaded on your LD and can be used on the Arduino IDE. Open the file and you would see a pop-up message. Click on ok. A folder will be generated and you will see the code appear in the Arduino IDE.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg7.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg7-md.png 749w"  alt="" width="376" height="129"></figure>
<p>The Arduino app that you are using right now is called an <strong>Integrated Development Environment</strong> or <strong>IDE</strong>. It is one of the programs that you can program your SSTuino II in. Let us analyse the code we see here:¬†</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg8.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg8-md.png 749w"  alt="" width="306" height="368"></figure>
<p>Here is an explanation of how most basic Arduino code works:</p>
<pre><code class="language-cpp">
// These two slashes indicate a comment
/* This also indicates a comment 
The brackets () indicate a function e.g. int main()
*/
void setup() //This is only run once when the device first powers up.
{ //&lt;- The curly brackets are very important. Place them carefully to avoid confusion.
    pinMode(13, OUTPUT); 
    /*
    Why is pinMode written as so? That is due to the practice of using camelCase for writing code.
    We declare pin 13 as the output pin. It can also be written as pinMode(LED_BUILTIN, OUTPUT).
    The state "OUTPUT" must be written in CAPITAL LETTERS.
    
    It is also very important to place a semicolon ";" when you finish your "sentence", just like
    how you write sentences in your essays.
    */
    
}

void loop() //loop = runs forever till the end of time (or until you turn off the power)
{
  digitalWrite(13, HIGH);// Turn on pin 13
  delay(1000); // Wait for 1000 millisecond(s)
  digitalWrite(13, LOW);// Turn off pin 13
  delay(1000); // Wait for 1000 millisecond(s)

  /* 
  The section above will turn on and off the LED. Note the CAPITAL LETTERS on the "HIGH" and "LOW"
  */
}
</code></pre>
<h3 id="mcetoc_1fuihi7fh13n">Resources and Going Further</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Camel_case">Wikipedia Article: camelCase</a></li>
<li><a href="https://www.arduino.cc/reference/en/">Official Arduino Language Reference</a></li>
<li><a href="https://www.codecademy.com/learn/learn-c-plus-plus">Codecademy Course: C++</a></li>
</ul>
<h2 id="mcetoc_1fuihi7fh13o">Uploading code from Arduino IDE to SSTuino II</h2>
<p>Let us connect our SSTuino like this:</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/sstuinoiiDigital.jpeg" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-xs.jpeg 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-sm.jpeg 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/sstuinoiiDigital-md.jpeg 749w"  alt="" width="1008" height="756"></figure>
<p>In your Arduino IDE, we will need to configure it to upload code to the SSTuino II.</p>
<ul>
<li>Plug in the SSTuino II into your LD</li>
<li>Select the SSTuino II from
<ul>
<li><strong>Tools &gt; Board &gt; SSTuino II &gt; SSTuino II Rev A</strong></li>
</ul>
</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg14.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg14-md.png 749w"  alt="" width="514" height="251"></figure>
<ul>
<li>Select the correct port:</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg15.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg15-md.png 749w"  alt="" width="534" height="268"></figure>
<ul>
<li>Upload your code with this button</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg13.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg13-md.png 749w"  alt="" width="306" height="369"></figure>
<p>You should see your circuit light up like this:</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/sstuinoiiDigital1.mp4" type="video/mp4" /></video></figure>
<p>With this example, we can see that the built-in LED for the SSTuino II is different from the Arduino Uno in TinkerCAD.</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/sstuinoiiDigital4.mp4" type="video/mp4" /></video></figure>
<p>The explorer board has a cool feature to help to see if you have connection issues in your circuit!</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/sstuinoiiDigital2.mp4" type="video/mp4" /></video></figure>
<p>For this particular example, if I connect the LED incorrectly (e.g. wrong LED polarity), you will notice that the LED on the Explorer Board lights up, but not the LED on the breadboard. I can use this information to diagnose what went wrong with the circuit, instead of wondering if I made a mistake on the circuit or in the programming instead.</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/sstuinoiiDigital3.mp4" type="video/mp4" /></video></figure>
<p>This is a neat feature that we hope you would enjoy. üôÇ</p>
<h2 id="mcetoc_1fuihi7fh13p">Built-in LED</h2>
<p>If you would like to use the built-in LED on the SSTuino II, you can always do so. Here is a basic example on the Arduino IDE to get you started. Go to:</p>
<p><strong> File &gt; Examples &gt; 01. Basic &gt; Blink</strong></p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/14/arduinoProg16.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-xs.png 300w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-sm.png 480w ,https://knowledge.fourier.industries/media/posts/14/responsive/arduinoProg16-md.png 749w"  alt="" width="401" height="173"></figure>
<p>Plug in your SSTuino II and upload the code. You should see this on the SSTuino II. The Built-in LED on the SSTuino II lights up but not the LED at Pin 13.</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
<source src="media/files/sstuinoiiDigital5.mp4" type="video/mp4" /></video></figure>
<p class="msg msg--info">Please note that the built-in LED and Pin 13 on the SSTuino II are different pins. üôÇ</p>
<p><a href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-6.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii-2.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Building a circuit on SSTuino</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-6.html"/>
        <id>https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-6.html</id>

        <updated>2022-03-21T13:28:40+08:00</updated>
            <summary>
                <![CDATA[
                    So you have built yourself some very simple circuits. Now&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>So you have built yourself some very simple circuits. Now let us build circuits, but with the SSTuino!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fuihis4c140">Adding a button</a></li>
<li><a href="#mcetoc_1fuihis4c141">Photoresistor</a></li>
</ul>
</div>
<p>In TinkerCAD, create a new circuit. In this new circuit, drag out an Arduino Uno, a breadboard, one resistor and a LED. Connect it in this manner, with the <span style="color: #e03e2d;"><strong>Positive(+)</strong></span> connect to <span style="color: #e03e2d;"><strong>5V</strong></span> and the <strong>Negative(-)</strong> connect to <strong>GND</strong>.</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/arduino1-3.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/arduino1-3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino1-3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino1-3-md.png 749w"  alt="" width="2160" height="985"></figure>
<p>Press¬†<strong>Start Simulation</strong> and see your circuit light up!</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/arduino2-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/arduino2-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino2-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino2-2-md.png 749w"  alt="" width="2117" height="1004"></figure>
<p>Now, copy your circuit from TinkerCAD onto your SSTuino.</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<p>It should look something like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/sstuinoii1.jpg" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/sstuinoii1-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/sstuinoii1-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/sstuinoii1-md.jpg 749w"  alt="" width="3790" height="2621"></figure>
<p>Let us go back to the simulation and change the circuit like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/arduino7-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/arduino7-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino7-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino7-2-md.png 749w"  alt="" width="1947" height="981"></figure>
<p>What would happen and why?</p>
<p class="msg msg--info"><strong>Tip: </strong>Remember, it is important to add a resistor in your circuit to prevent too much current flowing through your components.</p>
<h2 id="mcetoc_1fuihis4c140">Adding a button</h2>
<p>Let us add a button to control the circuit! Set up your circuit like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/arduino4-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/arduino4-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino4-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino4-2-md.png 749w"  alt="" width="2199" height="1005"></figure>
<p>What this circuit allows you to do is to turn on and off your LED. This push button works something like this: When you press the button, the circuit is closed and current can flow to the LED, which makes the LED light up. When the button is not pressed, the circuit is considered open and current will not flow to the LED, which makes the LED not light up.</p>
<p>Copy this circuit over to your SSTuino board setup. This is how it looks:¬†</p>
<p class="msg msg--warning"><strong>Warning: </strong>To prevent damage to your Learning Device or your components, please¬†<strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<figure class="post__video"><video loading="lazy" width="492" height="246" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/sstuinoii2.mp4" type="video/mp4" /></video></figure>
<p>You can consider adding more LEDs to the circuit. How would you add the LEDs to the circuit? What kind of reaction does your circuit have?</p>
<h2 id="mcetoc_1fuihis4c141">Photoresistor</h2>
<p>The photoresistor is a resistor that reacts to light. It changes resistance when the amount of light it detects changes. Create a new circuit and set up your circuit like this:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/13/arduino5-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/13/responsive/arduino5-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino5-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/13/responsive/arduino5-2-md.png 749w"  alt="" width="1797" height="906"></figure>
<p>What this circuit allows you to see is the difference in LED brightness as you cover the photoresistor or shine a torch on it.</p>
<figure class="post__video"><video loading="lazy" width="492" height="246" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/arduino6.mp4" type="video/mp4" /></video></figure>
<p>Copy this circuit over to your SSTuino board setup.</p>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit.¬†</p>
<p>What happens to the LED brightness as you play with the photoresistor?</p>
<p class="msg msg--success">Let's share your work! Record and post a video onto Instagram with the hashtag <em><strong>#sstuino</strong></em>!</p>
<p><a href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-5.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/programming-the-sstuino-ii.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TinkerCAD Introduction</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-5.html"/>
        <id>https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-5.html</id>

        <updated>2022-03-24T12:22:40+08:00</updated>
            <summary>
                <![CDATA[
                    Let us create our first virtual circuit! Circuit Simulation is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Let us create our first virtual circuit! Circuit Simulation is a great tool to test out your circuit design before assembling it in real life. This helps to reduce the possibility of your components being spoilt due to an incorrect circuit design.¬†</p>
<p class="msg msg--warning"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">As we will be progressing towards tinkering and creating a circuit, please do not connect the circuit/project to power before completing it. This helps to lower the risk of a component failure due to an improperly constructed circuit. üôÇ</span></p>
<p>For our virtual circuits, we will be using TinkerCAD! It is one of the most popular classroom tools for creating simple designs from scratch. It is also a simple to use online 3D design and prototyping program.</p>
<p>Let us set up TinkerCAD and have fun with a mini project!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fug4oiglbn">Sign in to TinkerCAD</a></li>
<li><a href="#mcetoc_1fug4oiglbo">Create a Circuit</a></li>
</ul>
</div>
<h2 id="mcetoc_1fug4oiglbn">Sign in to TinkerCAD</h2>
<p>Signing in to TinkerCAD is very simple! Simply head over to the website:</p>
<p class="align-center"><a href="https://www.tinkercad.com" class="btn" target="_blank" rel="noopener noreferrer">Visit TinkerCAD here</a></p>
<p>Click on <strong>Join Now</strong></p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/12/Screenshot-2022-03-19-at-11.09.42-AM.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/12/responsive/Screenshot-2022-03-19-at-11.09.42-AM-xs.png 300w ,https://knowledge.fourier.industries/media/posts/12/responsive/Screenshot-2022-03-19-at-11.09.42-AM-sm.png 480w ,https://knowledge.fourier.industries/media/posts/12/responsive/Screenshot-2022-03-19-at-11.09.42-AM-md.png 749w"  alt="" width="2880" height="1638"></figure>
<p>Click on¬†<strong>Create a personal account</strong>, and¬†<strong>Sign in with Google</strong>. Proceed to sign up with your SST Gmail account.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/Screenshot-2022-03-19-at-11.12.27-AM-2.png" data-size="726x1058"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/Screenshot-2022-03-19-at-11.12.27-AM-2-thumbnail.png" alt="" width="726" height="1058"></a>
<figcaption>Click on "create a personal account"</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/Screenshot-2022-03-19-at-11.16.25-AM.png" data-size="720x1054"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/Screenshot-2022-03-19-at-11.16.25-AM-thumbnail.png" alt="" width="720" height="1054"></a>
<figcaption>Click on Sign in with Google</figcaption>
</figure>
</div></div>
<h2 id="mcetoc_1fug4oiglbo">Create a Circuit</h2>
<p>There are a lot of functions inside TinkerCAD! However, for the purposes of the SSTuino, we are going to use the "Circuits" function. Click on "Circuits" on the sidebar and click on "Create new Circuit".</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/12/createCircuit.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/12/responsive/createCircuit-xs.png 300w ,https://knowledge.fourier.industries/media/posts/12/responsive/createCircuit-sm.png 480w ,https://knowledge.fourier.industries/media/posts/12/responsive/createCircuit-md.png 749w"  alt="" width="2880" height="1364"></figure>
<p class="msg msg--highlight  msg--info">It is a very good habit to create a new circuit after you have finished your previous tutorial, instead of overwriting the current circuit. That way, you would be able to refer to previous tutorials done when you need help with your future projects.</p>
<p>After you have created the new circuit, it should look like this. We have also included a legend on the interface of the TinkerCAD Circuits function.</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/12/tinkercadLegend2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/12/responsive/tinkercadLegend2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/12/responsive/tinkercadLegend2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/12/responsive/tinkercadLegend2-md.png 749w"  alt="" width="1636" height="411"></figure>
<p>Let us bring out a 9V battery then connect it as follows. After you have connected the circuit, click on <strong>Start Simulation</strong> on the top right-hand corner of the website. You will notice that the LED immediately "explodes". ü§≠</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="1">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test.png" data-size="1786x636"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test-thumbnail.png" alt="" width="749" height="267"></a></figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test2.png" data-size="1738x544"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test2-thumbnail.png" alt="" width="749" height="234"></a></figure>
</div></div>
<p>The LED burns as there is no resistor used to limit the flow of the current. Instead, connect a resistor like this. With the resistor attached, the LED lights up without burning up. üôÇ Try this with different resistor values. What kind of changes would happen here?</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/12/9V_Test3-2.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/12/responsive/9V_Test3-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/12/responsive/9V_Test3-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/12/responsive/9V_Test3-2-md.png 749w"  alt="" width="1434" height="625"></figure>
<p>Now, let us try this out using different types of batteries. TinkerCAD mainly provides 3 types of batteries: 9V, 3V and 1.5V. Connect your circuit up as shown. The next picture illustrates when you start the simulation:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test5-2.png" data-size="1375x934"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test5-2-thumbnail.png" alt="" width="749" height="509"></a>
<figcaption>Connect up your circuit as shown</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test4-2.png" data-size="1414x964"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/12/gallery/9V_Test4-2-thumbnail.png" alt="" width="749" height="511"></a>
<figcaption>This is what happens after you start simulation</figcaption>
</figure>
</div></div>
<p>Why would this happen? This is because LEDs have a minimum voltage to light up. If you look at the spec sheet located here:</p>
<figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/12/ledSpec.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/12/responsive/ledSpec-xs.png 300w ,https://knowledge.fourier.industries/media/posts/12/responsive/ledSpec-sm.png 480w ,https://knowledge.fourier.industries/media/posts/12/responsive/ledSpec-md.png 749w"  alt="" width="2408" height="638"></figure>
<p>The 1.5V battery would be barely able to light up the circuit, and only the 2 other battery types will be able to light up the LED.</p>
<p><a href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-4.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-6.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Essential Theory</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-4.html"/>
        <id>https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-4.html</id>

        <updated>2022-03-21T13:30:22+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we will learn the basics of electronic&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we will learn the basics of electronic circuits, Ohm's Law, and a guide to the components provided in the SSTuino Innovator's Kit v2.</p>
<p class="msg msg--warning"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">As we will be progressing towards tinkering and creating a circuit, please do not connect the circuit/project to power before completing it. This helps to lower the risk of a component failure due to an improperly constructed circuit. üôÇ</span></p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fuihjt2m14c">How do circuits work?</a></li>
<li><a href="#mcetoc_1fuihjt2m14d">Ohm's Law</a></li>
</ul>
</div>
<h2 id="mcetoc_1fuihjt2m14c">How do circuits work?</h2>
<div>
<p>A basic electrical circuit has 3 items:</p>
<ol>
<li>Power Source (Battery, Wall Plug, etc.)</li>
<li>Wires/Conductors</li>
<li>Consumer (e.g. Light bulb, Speaker, Servo, etc.)</li>
</ol>
<p>The power source provides the electrical energy required by the consumer by travelling through the wires. For example, the battery in this circuit provides energy to the LED.</p>
<p>To prevent too much energy from travelling through the circuit to the consumer, we "limit" it by using resistors. Introducing Ohm's Law.</p>
<h2 id="mcetoc_1fuihjt2m14d">Ohm's Law</h2>
<p>In a basic circuit, there are 3 variables to consider:</p>
<ol>
<li>Voltage</li>
<li>Current</li>
<li>Resistance</li>
</ol>
<p>Voltage is the potential difference measured across the component. For example, the potential difference measured across a typical AA battery is 1.5V.¬†<strong>The unit for voltage is V.</strong></p>
<p>Current is the rate at which the electricity flows throughout the circuit and is measured in Amperes. <strong>The unit for current is A.</strong></p>
<p>The resistance resists the flow of electricity, to prevent the consumer from being damaged due to too much current flowing through it. <strong>The unit for resistance is Œ©</strong>.</p>
<p>Here are 2 examples, the one with a resistor to the right, the one without on the left.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/10/resistorCircuit.png" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/10/responsive/resistorCircuit-xs.png 300w ,https://knowledge.fourier.industries/media/posts/10/responsive/resistorCircuit-sm.png 480w ,https://knowledge.fourier.industries/media/posts/10/responsive/resistorCircuit-md.png 749w"  alt="" width="425" height="306"></figure>
<p>Although the LED on the left is glowing much brighter than the one on the right, its lifespan is significantly reduced due to the excessive current flowing through the LED. If batteries with more voltage were used (e.g. 9-Volt Battery), it would probably cause the LED to be permanently damaged immediately.</p>
<p>To keep it simple for learning, we have 2 main resistors (330Œ© and 10KŒ©) provided in the SSTuino Innovator's Kit v2 that would be just nice for the included components.</p>
<p>Below is a simple example of a circuit with a resistor.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://cdn.sparkfun.com/assets/6/e/8/3/c/51f93d85757b7f2049270817.png" data-is-external-image="true"  alt="" width="362" height="215"></figure>
<p><a href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-3.html" class="btn btn--outline">‚¨ÖÔ∏è Back</a><a style="float: right;" href="https://knowledge.fourier.industries/sstuino-innovators-kit-v2-parts-list-5.html" class="btn btn--green">Next ‚û°Ô∏è</a></p>
</div>
            ]]>
        </content>
    </entry>
</feed>
