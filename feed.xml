<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>FourierIndustries Knowledge Base</title>
    <link href="https://knowledge.fourier.industries/feed.xml" rel="self" />
    <link href="https://knowledge.fourier.industries" />
    <updated>2023-05-11T14:17:35+08:00</updated>
    <author>
        <name>FourierIndustries LLP</name>
    </author>
    <id>https://knowledge.fourier.industries</id>

    <entry>
        <title>Displays</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/utilising-smart-led-strips-with-sstuino-ii-3.html"/>
        <id>https://knowledge.fourier.industries/utilising-smart-led-strips-with-sstuino-ii-3.html</id>
            <category term="Intermediate"/>
            <category term="Actuators"/>

        <updated>2022-08-31T11:56:11+08:00</updated>
            <summary>
                <![CDATA[
                    Overview Ever wondered if you could display your data on&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0lchs4a6">Overview</a></li>
<li><a href="#mcetoc_1gbouqub8h">Adafruit SSD1306 Demo</a>
<ul>
<li><a href="#mcetoc_1ga0lc3e7a3">Wiring it up</a></li>
<li><a href="#mcetoc_1ga0ld9r2ag">Code</a>
<ul>
<li><a href="#mcetoc_1ga0nbb3sjf">Software Setup</a></li>
<li><a href="#mcetoc_1ga0nbb3sjg">Example code</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#mcetoc_1gbouqub8i">Room Thermometer with TMP36</a>
<ul>
<li><a href="#mcetoc_1gbov9t2h1c">Wiring it up</a></li>
<li><a href="#mcetoc_1gbov9t2h1d">Code</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ga0ld9r2ah">Resources and Going Further</a></li>
</ul>
</div>
<h2 id="mcetoc_1ga0lchs4a6">Overview</h2>
<p>Ever wondered if you could display your data on a screen? In this tutorial, we will explore how to use the SSD1306 OLED Display!</p>
<figure class="post__image post__image--center" ><figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/43/61FlaWpfVYL._SL1001_.jpg" alt="" width="333" height="333" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/43/responsive/61FlaWpfVYL._SL1001_-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/43/responsive/61FlaWpfVYL._SL1001_-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/43/responsive/61FlaWpfVYL._SL1001_-md.jpg 749w"></figure>
<figcaption >The SSD1306 OLED Display.</figcaption>
</figure>
<h2 id="mcetoc_1gbouqub8h">Adafruit SSD1306 Demo</h2>
<p>We will make use of the demo provided by Adafruit to test the OLED Display out!</p>
<h3 id="mcetoc_1ga0lc3e7a3">Wiring it up</h3>
<p>First, we will need to connect the SSD1306 to the SSTuino as follows:</p>
<ul>
<li>GND of display to GND of SSTuino</li>
<li>VCC/Vin of display to 5V of SSTuino</li>
<li>SCL of display to SCL of SSTuino</li>
<li>SDA of display to SDA of SSTuino</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/43/Screenshot-2022-08-23-at-09.58.28.png" alt="" width="370" height="400" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-xs.png 300w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-sm.png 480w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-md.png 749w"></figure>
<h3 id="mcetoc_1ga0ld9r2ag">Code</h3>
<h4 id="mcetoc_1ga0nbb3sjf">Software Setup</h4>
<p>You will need to install two external libraries to your Arduino IDE, called "Adafruit_SSD1306 and Adafruit_GFX". Simply open the Library Manager under the Tools top bar menu and search for "adafruit ssd1306" and "adafruit gfx". </p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-09.50.51.png" data-size="1598x412"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-09.50.51-thumbnail.png" alt="" width="749" height="193"></a>
<figcaption>Adafruit SSD1306</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-09.51.48.png" data-size="1600x406"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-09.51.48-thumbnail.png" alt="" width="749" height="190"></a>
<figcaption>Adafruit GFX</figcaption>
</figure>
</div></div>
<h4 id="mcetoc_1ga0nbb3sjg">Example code</h4>
<p>Next open up the example code by going to <strong>File &gt; Examples &gt; Adafruit SSD1306 &gt; SSD1306_128x64_i2c. </strong>Change the address to 0x3C for our specific OLED Display as indicated in the picture below:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-10.06.57-2.png" data-size="1380x1730"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-10.06.57-2-thumbnail.png" alt="" width="749" height="939"></a>
<figcaption>Open the example file.</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-10.08.59.png" data-size="998x1198"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/43/gallery/Screenshot-2022-08-23-at-10.08.59-thumbnail.png" alt="" width="749" height="899"></a>
<figcaption>change the address to 0x3C</figcaption>
</figure>
</div></div>
<p>Upload the code to the SSTuino. The OLED Display should light up with its own test sequence!</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/OLED_test.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1gbouqub8i">Room Thermometer with TMP36</h2>
<p>Next, we are going to use the TMP36 to measure the temperature of your surroundings and display it on the OLED Display.</p>
<h3 id="mcetoc_1gbov9t2h1c">Wiring it up</h3>
<p>First, we will need to connect the SSD1306 to the SSTuino as follows:</p>
<ul>
<li>GND of display to GND of SSTuino</li>
<li>VCC/Vin of display to 5V of SSTuino</li>
<li>SCL of display to SCL of SSTuino</li>
<li>SDA of display to SDA of SSTuino</li>
</ul>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/43/Screenshot-2022-08-23-at-09.58.28.png" alt="" width="370" height="400" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-xs.png 300w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-sm.png 480w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-23-at-09.58.28-md.png 749w"></figure>
<p>Then connect the TMP36 to the SSTuino as follows:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/43/Screenshot-2022-08-31-at-11.36.15.png" alt="" width="513" height="346" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-31-at-11.36.15-xs.png 300w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-31-at-11.36.15-sm.png 480w ,https://knowledge.fourier.industries/media/posts/43/responsive/Screenshot-2022-08-31-at-11.36.15-md.png 749w"></figure>
<h3 id="mcetoc_1gbov9t2h1d">Code</h3>
<pre><code class="language-cpp">
/*
Temperature Sensor + OLED Tutorial for SSTuino II
Written by Goh Qian Zhe, with code derived from Adafruit's libraries.
Find out more at knowledge.fourier.industries
 */
#include &lt;SPI.h&gt;
#include &lt;Wire.h&gt;
#include &lt;Adafruit_GFX.h&gt;
#include &lt;Adafruit_SSD1306.h&gt;
#include &lt;Fonts/FreeSans9pt7b.h&gt; // Additional Fonts
#include &lt;Fonts/FreeSans24pt7b.h&gt;

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///&lt; See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);
int temp = 0;

void setup() {
  pinMode(A0, INPUT);
  Serial.begin(9600);
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setFont(&amp;FreeSans9pt7b);
  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 24);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font
  display.write("Temperature        Sensor"); // Welcome page
  display.display();
  delay(5000);
  display.setFont();
}

void loop() {
  // This area is the code for the sensor to read and display data.
  temp = ((-40 + 0.488155 * (analogRead(A0) - 20)) + 0);
  Serial.println(temp);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.cp437(true);
  display.write("Current Temperature:"); // Sets the top line
  display.setTextSize(1);
  display.setFont(&amp;FreeSans24pt7b);
  display.setCursor(0, 56);
  char _buffer[8];
  sprintf(_buffer, "%02u", temp); // Converts int to char
  display.write(_buffer); // Displays the temperature
  display.drawCircle(84, 24, 3, SSD1306_WHITE); // Degrees sign
  display.setCursor(96, 56);
  display.write("C");
  display.display(); 
  display.setFont(); 
  delay(10000); // Refreshes every 10 seconds
}
</code></pre>
<p>This is how it looks like!</p>
<figure class="post__video"><video loading="lazy" width="300" height="150" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/OLED_TMP36.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1ga0ld9r2ah">Resources and Going Further</h2>
<p>If you would like to learn more about the OLED display, do hit up the resources below:</p>
<ul>
<li><strong><a href="https://learn.adafruit.com/monochrome-oled-breakouts/overview" target="_blank" rel="noopener noreferrer">https://learn.adafruit.com/16-channel-pwm-servo-driverhttps://learn.adafruit.com/monochrome-oled-breakouts/overview</a></strong></li>
<li><strong><a href="https://randomnerdtutorials.com/guide-for-oled-display-with-arduino/" target="_blank" rel="noopener noreferrer">https://randomnerdtutorials.com/guide-for-oled-display-with-arduino/</a></strong></li>
<li><strong><a href="https://learn.adafruit.com/adafruit-gfx-graphics-library/overview" target="_blank" rel="noopener">https://learn.adafruit.com/adafruit-gfx-graphics-library/overview</a></strong></li>
</ul>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>SSTuino II without the Explorer Board!</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/how-to-use-sstuino-iis-onboard-rgb-led-2.html"/>
        <id>https://knowledge.fourier.industries/how-to-use-sstuino-iis-onboard-rgb-led-2.html</id>
            <category term="Beginner"/>
            <category term="Actuators"/>

        <updated>2022-08-22T10:58:31+08:00</updated>
            <summary>
                <![CDATA[
                    Overview Feeling confident on how to use the SSTuino? Or&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0j33qu8c">Overview</a></li>
<li><a href="#mcetoc_1ga0j88bc9s">Wiring it up</a></li>
<li><a href="#mcetoc_1ga0j88bc9t">Code</a>
<ul>
<li><a href="#mcetoc_1ga0j33qu8e">Switching it up</a></li>
<li><a href="#mcetoc_1ga0j33qu8f">Completed code</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ga0j88bc9u">Resources and Going Further</a></li>
</ul>
</div>
<h2 id="mcetoc_1ga0j33qu8c">Overview</h2>
<p>Feeling confident on how to use the SSTuino? Or wanting to integrate your SSTuino into smaller projects? This short tutorial will teach you how to detach the Explorer Board and the SSTuino II, and place it back afterwards.</p>
<h2 id="mcetoc_1ga0j88bc9s">Disassembly</h2>
<p>Before we detach the 2 items, we must make sure that the SSTuino is not:</p>
<ul>
<li>Connected to your LD</li>
<li>Connected to your breadboard circuits</li>
</ul>
<p>Next, detach the JST Cable on the side as so:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7023.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7023-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Hold the wire and pull it out as shown.</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7024.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7024-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Pull only the SSTuino part out, the other side can remain as is.</figcaption>
</figure>
</div></div>
<p class="msg msg--warning">The next step will potentially damage your device if not done properly! <strong>Please be gentle</strong> while detaching the SSTuino from the Explorer Board.</p>
<p>With fingers on both the short end of the SSTuino, pull if off the Explorer Board as so <strong>(gently)</strong>:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/41/IMG_7025.jpg" alt="" width="1008" height="756" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7025-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7025-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7025-md.jpg 749w"></figure>
<p>With this, you have successfully detached the SSTuino from the Explorer Board.</p>
<h2>How to integrate the SSTuino into your project?</h2>
<p>There are exposed pins below the SSTuino after you detach it from the Explorer Board. Hence, please make sure that the surface that the SSTuino is placed on is non-electrically conductive. Other than that, the SSTuino can be placed anywhere in your project!</p>
<h2>Assembly</h2>
<p class="msg msg--warning">The next step will potentially damage your device if not done properly! <strong>Please be gentle</strong> while attaching the SSTuino to the Explorer Board.</p>
<p>To assemble the SSTuino back into the Explorer Board, carefully align the pins of both devices and press them in like so:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7027.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7027-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Make sure all the pins are aligned.</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7028.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7028-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Press the SSTuino into the Explorer board gently.</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7029.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7029-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>And it's done!</figcaption>
</figure>
</div></div>
<p>Afterwards, connect back the JST connector like so:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7030.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7030-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Gently connect back the JST connector like so:</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7031.jpg" data-size="4032x3024"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/41/gallery/IMG_7031-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Make sure that it is installed like this.</figcaption>
</figure>
</div></div>
<h2>Troubleshooting</h2>
<p>If you happen to bend the pins, please do not worry. <strong>Gently</strong> bend back the pins and plug the SSTuino into the intended component.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/41/IMG_7026.jpg" alt="" width="4032" height="3024" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7026-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7026-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/41/responsive/IMG_7026-md.jpg 749w"></figure>
<p class="msg msg--warning">Please do not use any large tools such as pliers as they may potentially break the pins.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Utilising Smart LED Strips with SSTuino II</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/utilising-smart-led-strips-with-sstuino-ii.html"/>
        <id>https://knowledge.fourier.industries/utilising-smart-led-strips-with-sstuino-ii.html</id>
            <category term="Intermediate"/>
            <category term="Actuators"/>

        <updated>2022-08-09T16:34:21+08:00</updated>
            <summary>
                <![CDATA[
                    Overview Have you ever seen products like Razer's Chroma and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0lchs4a6">Overview</a></li>
<li><a href="#mcetoc_1ga0lc3e7a3">Wiring it up</a></li>
<li><a href="#mcetoc_1ga0ld9r2ag">Code</a>
<ul>
<li><a href="#mcetoc_1ga0nbb3sjf">Software Setup</a></li>
<li><a href="#mcetoc_1ga0nbb3sjg">Example code</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ga0ldmuaak">Troubleshooting</a></li>
<li><a href="#mcetoc_1ga0ld9r2ah">Resources and Going Further</a></li>
</ul>
</div>
<h2 id="mcetoc_1ga0lchs4a6">Overview</h2>
<p>Have you ever seen products like Razer's Chroma and thought to yourself: wouldn't it be great if I could make one myself? Well, now you can! </p>
<p>Most smart LED strips on the market use a special kind of RGB LED called a "WS2812B" LED. Sometimes, they are marketed online as "NeoPixels" by Adafruit, or simply "individually addressable LEDs" by other manufacturers. Most of these products are compatible with each other and the terms above are interchangeable, to a certain degree. For convenience's sake, we will call them "smart LEDs".</p>
<p>The WS2812B is a tiny computer chip that sits inside the LED package, allowing you to control the smart LED's brightness without having to have 3 digital pins doing <code>analogWrite()</code>. Furthermore, you can daisy chain the LEDs to each other to individually control other LEDs down the LED strip. </p>
<p>On the left image below, you can see an ordinary RGB LED. On the right side, you can see this smart RGB LED that has the WS2812B chip inside the LED package. </p>
<div class="gallery-wrapper gallery-wrapper--full"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/40/gallery/26b8f435099d0355514254fd08-2.jpg" data-size="604x604"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/40/gallery/26b8f435099d0355514254fd08-2-thumbnail.jpg" alt="" width="604" height="604"></a>
<figcaption>Normal RGB LED</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/40//gallery/WS2812B_SMD_Closeup.jpg" data-size="600x600"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/40//gallery/WS2812B_SMD_Closeup-thumbnail.jpg" alt="" width="600" height="600"></a>
<figcaption>Special WS2812B LED</figcaption>
</figure>
</div></div>
<p>The major advantage of using smart LEDs is that you only need 1 single wire to control a lot of LEDs at once, which is especially useful if you need to control an entire array or strip of LEDs.</p>
<h2 id="mcetoc_1ga0lc3e7a3">Wiring it up</h2>
<figure class="post__image post__image--center" ><figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/40//Screenshot-2022-08-09-at-12.36.29.png" alt="TinkerCAD diagram for a &quot;Neopixel&quot; strip" width="1128" height="616" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/40//responsive/Screenshot-2022-08-09-at-12.36.29-xs.png 300w ,https://knowledge.fourier.industries/media/posts/40//responsive/Screenshot-2022-08-09-at-12.36.29-sm.png 480w ,https://knowledge.fourier.industries/media/posts/40//responsive/Screenshot-2022-08-09-at-12.36.29-md.png 749w"></figure>
<figcaption >TinkerCAD diagram for a simple "Neopixel" strip</figcaption>
</figure>
<p>The wiring diagram for using a smart LED is incredibly simple. Simply connect the 5V terminal of the strip to the corresponding 5V on your SSTuino, GND to GND, and DIN (data in) to a data pin of your choice.</p>
<p class="msg msg--warning"><strong>Warning</strong>: smart LED strips can draw a lot of current! Your SSTuino can usually power up to 40 of these smart LEDs before requiring an external 5V power source. If you need to build a project with extremely long smart LED strips (&gt;100), multiple power sources might need to be provided along the length of the LED strip to prevent dimming and power loss.</p>
<h2 id="mcetoc_1ga0ld9r2ag">Code</h2>
<h3 id="mcetoc_1ga0nbb3sjf">Software Setup</h3>
<p>You will need to install an external library to your Arduino IDE, called "Adafruit NeoPixel". Simply open the Library Manager under the Tools top bar menu and search for "neopixel". </p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/40/Screenshot-2022-08-09-at-15.04.18.png" alt="" width="799" height="450" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/40/responsive/Screenshot-2022-08-09-at-15.04.18-xs.png 300w ,https://knowledge.fourier.industries/media/posts/40/responsive/Screenshot-2022-08-09-at-15.04.18-sm.png 480w ,https://knowledge.fourier.industries/media/posts/40/responsive/Screenshot-2022-08-09-at-15.04.18-md.png 749w"></figure>
<h3 id="mcetoc_1ga0nbb3sjg">Example code</h3>
<p>This code below will import the Adafruit NeoPixel library, and set the maximum number of LEDs in your LED strip to 12 bulbs in <code>#define NUMPIXELS 12</code> (remember, the maximum your SSTuino can go is 40 bulbs, any more and the LED strip will require external power, or limit its own brightness).</p>
<p>In the <code>setup()</code> section, simply initialise the library.</p>
<p>Afterwards, you will create a custom function called <code>setColor()</code> which picks a random value between 0 and 255 (completely off and completely on) for each of the colours: red, green and blue.</p>
<p>Within <code>loop()</code>, you will call <code>setColor()</code> once to set the colour values inside the variables <code>redColor</code>, <code>greenColor</code> and <code>blueColor</code>, but not actually show the colours on the LED strip yet. Afterwards, create a for loop that goes through each of the LEDs ("pixels", as termed by Adafruit) and actually displays the colour. </p>
<pre><code class="language-cpp">#include &lt;Adafruit_NeoPixel.h&gt;

#define PIN 2	 // input pin Neopixel is attached to

#define NUMPIXELS      12 // number of neopixels in strip

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 100; // timing delay in milliseconds

int redColor = 0;
int greenColor = 0;
int blueColor = 0;

void setup() {
  // Initialise the NeoPixel library.
  pixels.begin();
}

void loop() {
  setColor();

  for (int i=0; i &lt; NUMPIXELS; i++) {
    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(i, pixels.Color(redColor, greenColor, blueColor));

    // This sends the updated pixel color to the hardware.
    pixels.show();

    // Delay for a period of time (in milliseconds).
    delay(delayval);
  }
}

// setColor()
// picks random values to set for RGB
void setColor(){
  redColor = random(0, 255);
  greenColor = random(0,255);
  blueColor = random(0, 255);
}</code></pre>
<h2 id="mcetoc_1ga0ldmuaak">Troubleshooting</h2>
<ul>
<li><strong>My smart LED bulbs are flickering/not giving the correct output!</strong>: This is most likely an issue with your LED strips. As smart LED strips require the signal to be propagated from one LED to the next like a game of Telephone, if one of the LEDs is faulty, it will result in a corrupted signal for the next LED. You will need to replace your smart LED strip.</li>
</ul>
<h2 id="mcetoc_1ga0ld9r2ah">Resources and Going Further</h2>
<p>Smart LEDs like the WS2812B are commonly used in many projects requiring fancy, individually addressable LED lighting solutions. The Adafruit NeoPixel library we showed in this example is the easiest way to get started, but if you desire higher levels of functionality, you should use FastLED, a more powerful and advanced library for use with microcontrollers. </p>
<ul>
<li><strong><a href="https://fastled.io" target="_blank" rel="noopener noreferrer">FastLED Official Site and Documentation</a></strong></li>
</ul>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Use SSTuino II&#x27;s Onboard RGB LED</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/how-to-use-sstuino-iis-onboard-rgb-led.html"/>
        <id>https://knowledge.fourier.industries/how-to-use-sstuino-iis-onboard-rgb-led.html</id>
            <category term="Beginner"/>
            <category term="Actuators"/>

        <updated>2022-08-09T15:16:24+08:00</updated>
            <summary>
                <![CDATA[
                    Overview Ever notice that your SSTuino II has an RGB&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1ga0j33qu8c">Overview</a></li>
<li><a href="#mcetoc_1ga0j88bc9s">Wiring it up</a></li>
<li><a href="#mcetoc_1ga0j88bc9t">Code</a>
<ul>
<li><a href="#mcetoc_1ga0j33qu8e">Switching it up</a></li>
<li><a href="#mcetoc_1ga0j33qu8f">Completed code</a></li>
</ul>
</li>
<li><a href="#mcetoc_1ga0j88bc9u">Resources and Going Further</a></li>
</ul>
</div>
<h2 id="mcetoc_1ga0j33qu8c">Overview</h2>
<p>Ever notice that your SSTuino II has an RGB LED on the board itself? This tutorial will walk you through how to use it!</p>
<p>The RGB LED is physically connected to the Wi-Fi chip (ESP32) and must be controlled through the WiFiNINA interface, which has a special function to set the LED's brightness.</p>
<h2 id="mcetoc_1ga0j88bc9s">Wiring it up</h2>
<p>There is no need to wire anything externally to your SSTuino II. It can even operate completely independently of the Explorer board. The ESP32 Wi-Fi chip is physically wired to the ATmega4809 main microcontroller via SPI pins and communicates solely via SPI. </p>
<h2 id="mcetoc_1ga0j88bc9t">Code</h2>
<p>Open an existing Arduino sketch, or create a new sketch and ensure that you have imported the two necessary libraries for operating with the Wi-Fi chip:</p>
<pre><code class="language-cpp">#include &lt;SPI.h&gt;
#include &lt;WiFiNINA.h&gt;
</code></pre>
<p>Afterwards, you can use the function below to change the brightness of the RGB LED however you like:</p>
<pre><code class="language-cpp">WiFi.setLEDs(255, 255, 255);
</code></pre>
<p>The 3 parameters represent the value of red, green and blue respectively. If you have previously used <code>analogWrite()</code>, this is very similar. The maximum and minimum values are 255 and 0 respectively, with 255 being the LED at maximum brightness and 0 switching off the LED.</p>
<h3 id="mcetoc_1ga0j33qu8e">Switching it up</h3>
<p>Do you want to make it look similar to what the SSTuino II looked like when you first connected it? Well, you can do that!</p>
<p>There are two parts to the program used for the code. At first, the LED will cycle all its colours independently: red, green, followed by blue. Place this code in the <code>setup()</code> part of your sketch to do exactly that.</p>
<pre><code class="language-cpp">WiFi.setLEDs(32, 0, 0);
delay(500);
WiFi.setLEDs(0, 32, 0);
delay(500);
WiFi.setLEDs(0, 0, 32);
delay(500);</code></pre>
<p>Afterwards, you want your LED to slowly fade from one colour to the next. Let's go through the logic: slowly increase the brightness of one colour while decreasing the other one, until the first one reaches maximum brightness while the previous colour reaches 0 (completely turns off). Now, the colour will need to change (if it was originally red to green, it will now need to be green to blue, and then blue to red, and so on and so forth). </p>
<p class="msg msg--highlight "><strong>Note:</strong> notice that we are only using 32 in our example and not the highest possible value, 255. Why is that so? The reason is that 255 is typically way too bright, and we found that 32 was a good amount that could be seen in most lighting conditions.</p>
<p>Firstly, you will need an array to contain the values (0-255) of the 3 colours. An array is a special type of variable that stores multiple other variables. Think of it like a pill box organiser:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/39/pill_organizer_feature_getty_creative.jpeg" alt="" width="457" height="257" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/39/responsive/pill_organizer_feature_getty_creative-xs.jpeg 300w ,https://knowledge.fourier.industries/media/posts/39/responsive/pill_organizer_feature_getty_creative-sm.jpeg 480w ,https://knowledge.fourier.industries/media/posts/39/responsive/pill_organizer_feature_getty_creative-md.jpeg 749w"></figure>
<p>A pill box organiser like the one you see above has 7 slots, one for each day. You can put pills in each box, take them out, or simply leave that slot empty. </p>
<p>For our case, we only need to contain 3 colours (red, green and blue) and hence we will only need an array with 3 "slots". Set all the slots to 0 except the first slot (red), which we will put as 32. </p>
<pre><code class="language-cpp">  int rgbColour[3];
  // Start off with red (set red to 32/255)
  rgbColour[0] = 32;
  rgbColour[1] = 0;
  rgbColour[2] = 0;</code></pre>
<p>Next, you should make a for loop to cycle through all the possible colours (specifically, the colours that are supposed to decrease in brightness). There are only 3 colours in total, so limit the for loop to stop at 3.</p>
<p>Next, the program will need to select a colour that should be increasing. For example, if the current decreasing colour is red, the increasing colour should be green, and then blue, and then back to red. For this task, we wrote a one-line ternary operator: <code>int incColour = decColour == 2 ? 0 : decColour + 1;</code>. This one line does the same thing as the 6 lines of code below:</p>
<pre><code class="language-cpp">int incColour;
if (decColour == 2) {
  incColour = 0;
} else {
  incColour = decColour + 1;
}</code></pre>
<p>Finally, you can start to write the inner loop for actually fading the colours, by decrementing the value of 1 colour and incrementing the value of another colour. </p>
<pre><code class="language-cpp">for (int i = 0; i &lt; 32; i += 1)
{
  rgbColour[decColour] -= 1;
  rgbColour[incColour] += 1;

  WiFi.setLEDs(rgbColour[0], rgbColour[1], rgbColour[2]);
  delay(60);
}</code></pre>
<p>At last, your program <code>loop()</code> should look something like this:</p>
<pre><code class="language-cpp">void loop()
{
  // This code increases the intensity of one colour, while
  // fading the other colour, and cycles to another colour
  // once the initial one is finished

  int rgbColour[3];
  // Start off with red (set red to 32/255)
  rgbColour[0] = 32;
  rgbColour[1] = 0;
  rgbColour[2] = 0;

  // Choose the colours to increment and decrement.
  for (int decColour = 0; decColour &lt; 3; decColour += 1)
  {
    int incColour = decColour == 2 ? 0 : decColour + 1;

    // cross-fade the two colours.
    for (int i = 0; i &lt; 32; i += 1)
    {
      rgbColour[decColour] -= 1;
      rgbColour[incColour] += 1;

      WiFi.setLEDs(rgbColour[0], rgbColour[1], rgbColour[2]);
      delay(60);
    }
  }
}
</code></pre>
<h3 id="mcetoc_1ga0j33qu8f">Completed code</h3>
<pre><code class="language-cpp">/*
  RGB LED program for the SSTuino II
  
  Flashes all the LEDs inside the RGB LED
  one by one, and then cross fades two colours

  Written by Pan Ziyue for FourierIndustries
  Licensed under the Creative Commons 0 (CC0) License and
  released to public domain
  &lt;http://creativecommons.org/publicdomain/zero/1.0/&gt;
 */

#include &lt;SPI.h&gt;
#include &lt;WiFiNINA.h&gt;

void setup()
{
  // Perform a single 1/8th strength cycle through on 
  // pure colours, max value possible is 255
  WiFi.setLEDs(32, 0, 0);
  delay(500);
  WiFi.setLEDs(0, 32, 0);
  delay(500);
  WiFi.setLEDs(0, 0, 32);
  delay(500);
}

void loop()
{
  // This code increases the intensity of one colour, while
  // fading the other colour, and cycles to another colour
  // once the initial one is finished

  int rgbColour[3];
  // Start off with red (set red to 32/255)
  rgbColour[0] = 32;
  rgbColour[1] = 0;
  rgbColour[2] = 0;

  // Choose the colours to increment and decrement.
  for (int decColour = 0; decColour &lt; 3; decColour += 1)
  {
    int incColour = decColour == 2 ? 0 : decColour + 1;

    // cross-fade the two colours.
    for (int i = 0; i &lt; 32; i += 1)
    {
      rgbColour[decColour] -= 1;
      rgbColour[incColour] += 1;

      WiFi.setLEDs(rgbColour[0], rgbColour[1], rgbColour[2]);
      delay(60);
    }
  }
}
</code></pre>
<h2 id="mcetoc_1ga0j88bc9u">Resources and Going Further</h2>
<p>If you wish to explore more about the Wi-Fi chip's specific features that you can invoke in the WiFiNINA library, you can check out some of the resources below:</p>
<ul>
<li><a href="https://www.arduino.cc/reference/en/libraries/wifinina/" target="_blank" rel="noopener noreferrer">Arduino Official Reference - WiFiNINA</a></li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Terms of Service</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/terms-of-service.html"/>
        <id>https://knowledge.fourier.industries/terms-of-service.html</id>

        <updated>2022-06-07T20:27:38+08:00</updated>
            <summary>
                <![CDATA[
                    Return and Refund Policy We only allow the return of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g4v24aos7q">Return and Refund Policy</a></li>
<li><a href="#mcetoc_1g4v24aos7r">Warranty</a></li>
<li><a href="#mcetoc_1g4v24aos7s">“Be Nice” Policy</a></li>
<li><a href="#mcetoc_1g4v24aos7t">Safety</a></li>
<li><a href="#mcetoc_1g4v24aos7u">Privacy Policy</a></li>
<li><a href="#mcetoc_1g4v24aos7v">Feedback on Policies</a></li>
</ul>
</div>
<h2 id="mcetoc_1g4v24aos7q">Return and Refund Policy</h2>
<p>We only allow the return of unopened products, within 30 days of the order (including shipping days). Refunds will be completed once we confirm that the product was received in good condition. Return shipment is the responsibility of the customer. Please contact us directly for returns! We will try our best to cater to your needs. </p>
<h2 id="mcetoc_1g4v24aos7r">Warranty</h2>
<p>We warrant that all FourierIndustries LLP products will be free from manufacturing defects for a period of thirty (30) days following the date of delivery to you. We will replace, repair, or credit you for any confirmed defective product at our option. </p>
<p>Warranty will not apply if the Product fails or is damaged after delivery to you due to accident, abuse or misuse.</p>
<p>For extended warranty covering enterprises or educational institutions, please reach out to us at hello@fourier.industries.</p>
<p>TO THE MAXIMUM EXTENT ALLOWED UNDER APPLICABLE LAW, EXCEPT FOR THE EXPRESS LIMITED WARRANTIES SET FORTH ABOVE, PRODUCTS ARE PROVIDED “AS IS” AND “AS AVAILABLE” AND FOURIERINDUSTRIES LLP AND ITS SUPPLIERS MAKE NO WARRANTIES UNDER THIS AGREEMENT, EXPRESS, IMPLIED, OR STATUTORY, BY OPERATION OF LAW OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR ANY IMPLIED WARRANTIES ARISING OUT OF COURSE OF PERFORMANCE, COURSE OF DEALING OR USAGE OF TRADE UNDER OR IN CONNECTION WITH THE PRODUCTS. FOURIERINDUSTRIES LLP DOES NOT WARRANT THAT THE PRODUCTS AND CONTENT WILL OPERATE ERROR-FREE, UNINTERRUPTED, OR THAT THEY WILL BE SECURE OR VIRUS-FREE. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY FOURIERINDUSTRIES LLP, ITS AGENTS OR OTHER REPRESENTATIVES OR EMPLOYEES SHALL IN ANY WAY INCREASE THE SCOPE OF FOURIERINDUSTRIES LLP'S WARRANTIES UNDER THIS AGREEMENT. WITHOUT LIMITING THE GENERALITY OF THE FORGOING, FOURIERINDUSTRIES LLP AND ITS SUPPLIERS DO NOT MAKE, AND EXPRESSLY DISCLAIM, ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED, RELATED TO ANY THIRD PARTY INTELLECTUAL PROPERTY, TECHNOLOGY OR INFORMATION PROVIDED AS PART OF THE PRODUCT OR DOCUMENTATION.</p>
<h2 id="mcetoc_1g4v24aos7s">“Be Nice” Policy</h2>
<p>Our community is important to us here at FourierIndustries. The “Be Nice” policy applies to all members: employees, customers, educators, makers, content creators and many more. This policy applies to all of the interactions that affect the communities that we have all built together: posting in Discord/WhatsApp, technical support tickets, and treatment of our support staff. </p>
<p>As such, we hold ourselves and members of our community to high standards of excellence. Every member is valuable to us and we are committed to maintaining a positive environment where people from all walks of life can engage, learn and share their work. In the vast majority of circumstances, our members are respectful and awesome. That is something worth protecting. </p>
<p>Once in a while, we do encounter someone who has decided to cause problems, is not reasonable, or chooses not to be solutions-oriented. If a customer swears, uses abusive language, refuses to work with our staff in forums such as Discord/WhatsApp, cannot work together positively with other members, or otherwise ignores the “Be Nice” code of conduct, we will redirect the customer to another supplier for future purchases. When appropriate, we may choose to ban the former customer from making future purchases or engaging with our communities. We reserve the right at all times to remove any information or materials that are unlawful, threatening, abusive, libellous, defamatory, obscene, vulgar, pornographic, profane, indecent or otherwise objectionable. These cases are rare, but we believe this is an important step to take to ensure the safety of our employees, other customers, and all other wonderful members of our community.</p>
<p>What we expect of our community members:</p>
<ul>
<li>Be inclusive: We believe in a diverse community and will not tolerate any conduct or speech that excludes, discriminates, or is intolerant against others. Any of such behaviour will not be tolerated. Do not intimidate or harass others.</li>
<li>Be respectful: You might not agree with us or other community members, but that is not an excuse for disrespectful behaviour. If you have disagreements, please channel that into more positive and conducive discussions and refrain from personal attacks. </li>
<li>Be patient: Not everyone has the same skill level. Always be patient when explaining a new concept to someone else, who may not have the same skill level as you. Teaching is the best way to learn!</li>
<li>Communicate carefully: If you are unsure, clarify with one another. Effective communication is the best way to solve any misunderstandings.</li>
</ul>
<h2 id="mcetoc_1g4v24aos7t">Safety</h2>
<p>Technology is constantly changing and evolving, and so does the laws and content creation that surrounds them. As such, some of the projects described in our knowledge bases may not work as intended, or may even damage or adversely impact certain equipment. Your safety is your own responsibility, including proper use of equipment and safety Personal Protective Equipment (PPE). Some of the projects described in our knowledge base might involve power tools, electricity and other resources that can be considered dangerous. They must be used with the proper safety precautions and PPE. The photos used to illustrate projects may not contain the safety equipment required in order to better show the project steps. These kinds of projects are not meant to be built by children and should involve a trained adult to assist or build steps that are more hazardous. Use of the instructions on this website is at your own risk, and FourierIndustries LLP disclaims all responsibility for any resulting damage, injury or expense. If you feel uncomfortable with assembling or building any of our products, simply contact us to request for a full refund. FourierIndustries LLP is not responsible for further certifications should you integrate our products into your design. </p>
<h2 id="mcetoc_1g4v24aos7u">Privacy Policy</h2>
<p>We do our best to retain the minimum amount of personal information that will only be used to ship goods to you and to contact you if there is an issue with your shipment. Payment information like credit card numbers, expiration dates and CVV codes are never stored with us. We do not, and will never, sell or give any of your information to any third party or send you any unsolicited advertisements.</p>
<h2 id="mcetoc_1g4v24aos7v">Feedback on Policies</h2>
<p>If you have any feedback you wish to make regarding these policies, please contact us at <a href="mailto:hello@fourier.industries">hello@fourier.industries</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>SSTuino II - Frequently Asked Questions (FAQ)</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/frequently-asked-questions-faq-sstuino-ii.html"/>
        <id>https://knowledge.fourier.industries/frequently-asked-questions-faq-sstuino-ii.html</id>

        <updated>2023-05-11T14:17:35+08:00</updated>
            <summary>
                <![CDATA[
                    This article contains the most commonly asked questions and basic&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>This article contains the most commonly asked questions and basic troubleshooting tips for your SSTuino II product.</p>
<h2>Problems with Uploading Code</h2>
<h3>I get a warning that says <code>avrdude: jtagmkII_initialize(): Cannot locate “flash” and “boot” memories in description</code></h3>
<p>This warning message will not affect your code uploads, and you do not need to worry as long as Arduino IDE shows that your upload is completed. If you wish to see the code upload progress bar, you can turn on verbose mode for code upload:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/32/Screenshot-2022-04-19-at-1.34.03-PM.png" alt="" width="423" height="307" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/32/responsive/Screenshot-2022-04-19-at-1.34.03-PM-xs.png 300w ,https://knowledge.fourier.industries/media/posts/32/responsive/Screenshot-2022-04-19-at-1.34.03-PM-sm.png 480w ,https://knowledge.fourier.industries/media/posts/32/responsive/Screenshot-2022-04-19-at-1.34.03-PM-md.png 749w"></figure>
<p><strong>Solution</strong>: As of 2022/08/31, you can update your SSTuino II board through the Board Manager to version 1.1.2, which permanently fixes this issue.</p>
<h3>My code refuses to upload with the error <code>avrdude: jtagmkII_close(): timeout/error communicating with programmer (status -1)</code></h3>
<p>If your error looks like the one in this <a href="https://forum.arduino.cc/t/sketch-upload-problems/855649" target="_blank" rel="noopener noreferrer">Arduino forum post</a>, your SSTuino II might be faulty. If you still experience this issue even after unplugging everything from the board (except the USB cord, of course), and the board is within warranty, please contact us through the <a href="http://fourierindustries.atlassian.net/servicedesk/customer/portals" target="_blank" rel="noopener noreferrer">Help Centre</a> and quote your board's serial number. </p>
<h3>I have a compiler error of "<code>bad CPU type</code>"!</h3>
<p>If your compiler error says <code>Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/bin/avr-g++: bad CPU type in executable</code>, this means that you have not installed Rosetta 2 for your Mac.</p>
<p><strong>Solution</strong>: Simply open Terminal, and enter the command <code>softwareupdate --install-rosetta</code> and follow the on-screen instructions to install Rosetta.</p>
<h3>I cannot upload my code, and it has an error that says "RSP_ILLEGAL_MCU_STATE"</h3>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/32/RSP_ILLEGAL_MCU_STATE-Error.png" alt="" width="1398" height="338" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/32/responsive/RSP_ILLEGAL_MCU_STATE-Error-xs.png 300w ,https://knowledge.fourier.industries/media/posts/32/responsive/RSP_ILLEGAL_MCU_STATE-Error-sm.png 480w ,https://knowledge.fourier.industries/media/posts/32/responsive/RSP_ILLEGAL_MCU_STATE-Error-md.png 749w"></figure>
<p><strong>Solution</strong>: This error will require specialised hardware to resolve, usually an official programmer from Microchip. The following tutorial uses a lightly modified ATMega4809 Curiosity Nano.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/32/gallery/IMG_7678.jpg" data-size="2000x1500"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/32/gallery/IMG_7678-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Connect the 5V and GND cables</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/32/gallery/IMG_7679.jpg" data-size="2000x1500"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/32/gallery/IMG_7679-thumbnail.jpg" alt="" width="749" height="562"></a>
<figcaption>Connect the clipper pin</figcaption>
</figure>
</div></div>
<p><strong>Firstly</strong>, connect the VBUS (5V) port of the Curiosity Nano to the SSTuino 5V pin</p>
<p><strong>Secondly</strong>, connect the GND port of the Curiosity Nano to the SSTuino GND pin</p>
<p><strong>Third</strong>, connect the D0 port of the Curiosity Nano to the 6th pin (counting from the right, with the dot as the indicator for the 1st pin).</p>
<p><strong>Run</strong> the following command:</p>
<pre><code class="language-bash"><span class="s1">~/Library/Arduino15/packages/SSTuino\ II\ Series\ Boards/tools/avrdude/7.0.0-arduino2/bin/avrdude -C ~/Library/Arduino15/packages/SSTuino\ II\ Series\ Boards/hardware/megaavr/1.1.2/avrdude.conf -v -patmega4809 -ccuriosity_updi -Pusb -e -F</span></code></pre>
<p>You should see the text:</p>
<pre>...<br>         Programmer Type : JTAGICE3_UPDI<br>         Description     : Curiosity in UPDI mode<br>         ICE HW version  : 0<br>         ICE FW version  : 1.21 (rel. 37)<br>         Serial number   : MCHP3094071800003537<br>         Vtarget         : 3.30 V<br>         PDI/UPDI clock Xmega/megaAVR : 100 kHz<br><br>avrdude: Partial Family_ID returned: "mega"<br>avrdude: AVR device initialized and ready to accept instructions<br><br>Reading |                                                    | 0% 0.00savrdude: Device is locked! Chip erase required to unlock.<br>avr_read(): error reading address 0x0000<br>    read operation failed for memory "signature"<br>avrdude: error reading signature data for part "ATmega4809", rc=-68<br>avrdude: System Information Block: "megaAVR P:0D:1-3"<br>avrdude: Received FamilyID: "megaAVR"<br>avrdude: erasing chip<br><br>Reading | ################################################## | 100% 0.01s<br><br>avrdude: Device signature = 0x1e9651 (probably m4809)<br><br>avrdude done.  Thank you.</pre>
<p>Simply <strong>run the command again</strong> to ensure the chip is unlocked. </p>
<h2>Issues with hardware</h2>
<h3>The debug lights (lights on the top row) flicker when I touch the bottom of the board!</h3>
<p>This is a normal side effect of how microcontrollers and transistors behave, and will not cause issues to your hardware. </p>
<p>If you are interested to know the reasons behind the phenomenon, it is because every digital pin of the Explorer board is wired to a transistor called a <a href="https://reibot.org/2011/09/06/a-beginners-guide-to-the-mosfet/" target="_blank" rel="noopener noreferrer">MOSFET</a>. These transistors are very sensitive to tiny variations in electrical pulses, and even a minor voltage difference such as the one caused by your fingers can cause it to connect the circuit and turn on the LED. </p>
<h3>My SSTuino II restarts itself when I use a servo/LED strip/(insert high power peripheral here)</h3>
<p>The SSTuino is equipped with a polyfuse (a special type of fuse that can reset itself) that limits the maximum current to 1A. In addition, if you connect your SSTuino to a computer, most computers will limit the maximum power consumption to 0.5A.</p>
<p><strong>Solution</strong>: If you need to power high-power devices, you will need to supply an external 5V directly to the 5V line on the SSTuino. </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Capstone Project</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/mobile-apps-part-3.html"/>
        <id>https://knowledge.fourier.industries/mobile-apps-part-3.html</id>

        <updated>2022-04-22T19:37:06+08:00</updated>
            <summary>
                <![CDATA[
                    In the recent Singapore Budget Debate of 2022, a total&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In the recent Singapore Budget Debate of 2022, a total of <a href="https://www.straitstimes.com/singapore/politics/budget-debate-mnd-to-fund-technologies-to-green-buildings-sustainability-solutions" target="_blank" rel="noopener noreferrer">$64 million was invested under the Cities of Tomorrow programme</a> to spur the innovative use of energy-efficient technologies. </p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/meric-dagli-Uii70ORiFPE-unsplash.jpg" alt="" width="510" height="287" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/meric-dagli-Uii70ORiFPE-unsplash-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/meric-dagli-Uii70ORiFPE-unsplash-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/meric-dagli-Uii70ORiFPE-unsplash-md.jpg 749w"></figure>
<p> </p>
<figure class="post__image post__image--left"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/solarnova-03.jpg" alt="" width="379" height="285" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/solarnova-03-xs.jpg 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/solarnova-03-sm.jpg 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/solarnova-03-md.jpg 749w"></figure>HDB housing blocks are <a href="https://www.straitstimes.com/politics/parliament-10-year-plan-to-make-hdb-towns-more-liveable-and-sustainable" target="_blank" rel="noopener noreferrer">adopting reflective paint and smart lighting</a> to reduce energy consumption in our housing estates, and <a href="https://www.straitstimes.com/singapore/politics/budget-debate-30m-grant-for-building-owners-to-adopt-technologies-for-facilities-management" target="_blank" rel="noopener noreferrer">$30 million in grants were allocated for building owners </a>to build or renovate buildings with smarter infrastructure with sensors to monitor the building and increase energy efficiency.</p>
<p>With the recent instability in fuel prices, many Singaporean Food and Beverage (F&amp;B) outlets had to pass on the <a href="https://www.todayonline.com/singapore/electricity-prices-inflation-coffee-shops-1842886" target="_blank" rel="noopener noreferrer">increase in electricity bills</a> to their customers buying their food. </p>
<h2>Objectives</h2>
<p>A Kopitiam owner in Singapore wishes to save on energy costs by turning off the fans when the Kopitiam is cool enough or when there’s nobody at the Kopitiam. In addition, he also wishes to be able to remotely control the lights so that the lights turn on and off automatically through an IoT automation. For our final project, you have been tasked to design and build a prototype of an Internet of Things hub for a Smart Kopitiam. Let’s get started!</p>
<p>Our device will need to do two things:</p>
<ul>
<li style="font-weight: 400;" aria-level="1">Sense the temperature and human presence to determine if the fans in the Kopitiam need to be turned on. The fans are connected to another IoT device and are not connected to this hub physically, so we only need to send temperature and presence data.</li>
<li style="font-weight: 400;" aria-level="1">Receive commands from the Internet to turn lights on and off. The lights are connected to this hub physically so we will need to toggle a pin on and off to demonstrate this.</li>
</ul>
<p>Given the objectives, we will need 2 sensors (input) and 1 actuator (output). The TMP36 temperature sensor and the Passive Infrared (PIR) sensor will be used to detect temperature and human movement respectively. For the output side of things, we will have a single LED to represent the light that we are controlling.</p>
<h2>Ubidots Setup</h2>
<p>In our previous examples, we have already set up two Variables in Ubidots: Temperature and Light. We just need to add one more variable to represent human movement, called “Motion”.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-1.png" alt="" width="2132" height="1448" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-1-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-1-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-1-md.png 749w"></figure>
<p>After this, let’s create a new Dashboard called “Smart Kopitiam” so that you can have an overview of all the controls and values. (Don’t forget to set the default time range to Last 1 Hour so it’s easy to see your data coming in!)</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-2.png" alt="" width="2116" height="1444" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-2-md.png 749w"></figure>
<p>We now need to populate the dashboard with components to show controls for all 3 of the Variables: Temperature, Motion and Light.</p>
<p>Add 3 widgets and link them to the Variables mentioned above: <strong>Thermometer</strong> (to show temperature), <strong>Indicator</strong> (to show human movement), and <strong>Switch</strong> (to control the light).</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-3.png" alt="" width="2130" height="710" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-3-md.png 749w"></figure>
<h2>Hooking up your SSTuino</h2>
<p class="msg msg--warning"><strong>Warning:</strong> To prevent damage to your Learning Device or your components, please <strong>do not connect the SSTuino to your LD or power supply</strong> when you are wiring up your circuit. </p>
<p>Let’s start to connect your SSTuino with the sensors we need for this project. </p>
<ul>
<li>PIR sensor: Pin 6</li>
<li>LED: Pin 2</li>
<li>TMP36 temperature sensor: Pin A0</li>
</ul>
<p>You may start connecting your device like the diagram below: </p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-4.png" alt="" width="1494" height="1096" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-4-md.png 749w"></figure>
<h2>Programming the SSTuino</h2>
<p>With the circuit connections done, it’s time to start programming your SSTuino to send and receive data from Ubidots. For this section, you will need to tweak the previous example code you have already built for sending data in both ways. Try it out!</p>
<h3>Hints</h3>
<ul>
<li>The previous code you made has 1 Variable sending and 1 Variable receiving. In this project, you need to send 2 Variables, and receive 1 Variable. </li>
<li>Use what you have learnt in <a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-10-2.html">From Blocks to Code Part II</a>, how would you avoid using the <code>delay()</code> function and use <code>millis()</code> instead?</li>
</ul>
<p>By the end, you should see something like this appearing on your Smart Kopitiam dashboard, and you should also be able to control the light using the Switch widget on the dashboard.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-5.png" alt="" width="2130" height="702" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-5-md.png 749w"></figure>
<h2>Making an app to control it 😄</h2>
<p>Once you are satisfied with your program, it’s time to make an app to control it! </p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-6.png" alt="" width="313" height="488" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-6-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-6-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-6-md.png 749w"></figure>
<p>We have provided an app template with the basic functions to connect to Ubidots and the general layout of the app:</p>
<p class="align-center"><a href="https://x.thunkable.com/copy/d75c2d13ec8bbda6550356833a196b24" target="_blank" rel="noopener noreferrer" class="btn">Smart Kopitiam App Template</a></p>
<p>You will need to link up the rest of the code yourself. We have placed the 3 important controls on the app, named:</p>
<ul>
<li><strong>Switch_Light</strong> - Light switch</li>
<li><strong>Label_Motion</strong> - Text label indicating motion</li>
<li><strong>Label_Temp</strong> - Text label indicating temperature</li>
</ul>
<p class="msg msg--info"><strong>Hint</strong>: If you want to fetch a Variable automatically from Ubidots and display it on a label, you can use something like the code below:<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/31/Thunkable-9-CapstoneSetup-7.png" alt="" width="436" height="282" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/31/responsive/Thunkable-9-CapstoneSetup-7-md.png 749w"></figure>
<h2>Conclusion</h2>
<p>If you have completed your Capstone project with a fully working mobile app, circuit and program, congratulations! You have completed the SSTuino II Essentials Track. </p>
<p>Please help us out by completing this short 5-minute survey about your experience learning about the Internet of Things and how to use an Arduino. Thank you! 😀</p>
<p class="align-center"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfeytRFQjktCTV007iZLaYcHlpn8XW5iiY9yqx4_40R6Cm_dg/viewform?usp=sf_link" target="_blank" rel="noopener noreferrer" class="btn">Click here to Submit Feedback</a></p>
<p>If you feel like you are up for a challenge, or just wish to learn more about how to build different solutions with your SSTuino II, we have something in store for you! Our team is currently working on the Advanced Tracks, which will give in-depth tutorials on using the SSTuino II in scientific inquiry, or building advanced mobile apps with Swift Playgrounds. Stay tuned 😊</p>
<p><a href="https://knowledge.fourier.industries/mobile-apps-part-2.html" class="btn btn--outline">⬅️ Back</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mobile Apps, Part II</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/mobile-apps-part-2.html"/>
        <id>https://knowledge.fourier.industries/mobile-apps-part-2.html</id>

        <updated>2022-04-22T19:37:01+08:00</updated>
            <summary>
                <![CDATA[
                    In our previous tutorial, we have gone through all of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In our previous tutorial, we have gone through all of the basics of making a Thunkable app. Now, we are going to actually create an app that links to Ubidots. Don't worry, we have made a whole bunch of functions that make it much easier to integrate. </p>
<p>Click on the button below to clone the template.</p>
<p class="align-center"><a href="https://x.thunkable.com/copy/bfc99f8dc5f002c3ee19889b6e1227a0" target="_blank" rel="noopener noreferrer" class="btn">Clone the Thunkable IoT App Template</a></p>
<h2>Trying out the basics</h2>
<p>The template app is built similarly to the app you made in Part 1 of this tutorial, with a Home and Settings page. Let’s try out this app! Click the Play button (Web Preview).</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-7-Basics-1E-2.png" alt="" width="2130" height="206" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-1E-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-1E-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-1E-2-md.png 749w"></figure>
<p>We need to copy the credentials from Ubidots to our app. Click the Settings tab to go to the settings of the app first. </p>
<p>Go to your SSTuino II device and copy the Token and API Label to your app as shown below:</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-7-Basics-2E.png" data-size="942x1404"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-7-Basics-2E-thumbnail.png" alt="" width="749" height="1116"></a>
<figcaption>Transfer the text from here...</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-7-Basics-3E.png" data-size="798x1380"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-7-Basics-3E-thumbnail.png" alt="" width="749" height="1295"></a>
<figcaption>...to here!</figcaption>
</figure>
</div></div>
<p>Don't forget to press Save!</p>
<h3>Retrieving Variables from Ubidots</h3>
<p>Time to go back to the Home screen and try getting a Variable from Ubidots! You just need to type the name of your Ubidots Variable (like “temperature” or “light”) into the “Variable Label” text box and press “Get Variable”.</p>
<p>If everything goes right, Ubidots should respond with the last value that was received:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-7-Basics-4E.png" alt="" width="307" height="518" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-4E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-4E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-4E-md.png 749w"></figure>
<p>If you didn’t see the above, you might want to double-check some of your settings with the Common Issues list below:</p>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 45.2252%;"><strong>Error</strong></td>
<td style="width: 54.7748%;"><strong>Solution</strong></td>
</tr>
<tr>
<td style="width: 45.2252%;">The server responds with <code>{"code": 404001, "message":"The request was not found."}</code></td>
<td style="width: 54.7748%;">You might have entered one of the following things wrongly: the Variable Label on the Home screen, or the Device Label on the Settings screen.</td>
</tr>
<tr>
<td style="width: 45.2252%;">The server responds with <code>{"code": 401002, "message": "Incorrect authentication credentials."}</code></td>
<td style="width: 54.7748%;">You have entered an incorrect Authentication Token on the Settings screen</td>
</tr>
<tr>
<td style="width: 45.2252%;">The response is empty (e.g. it just shows <code>Response: </code>)</td>
<td style="width: 54.7748%;">Double-check your Variable in Ubidots, was any data ever created on that Variable channel? This happens when there are no pre-existing data for that Variable.</td>
</tr>
</tbody>
</table>
<h3>Sending Variables to Ubidots</h3>
<p>To send data to a Ubidots Variable, we need to also fill in the “Variable Content” field below on what we want to send to Ubidots. In our example, we can send a temperature value of 28.9 to Ubidots by pressing the “Push Variable” button to send this value to the Variable in Ubidots.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-7-Basics-5.png" alt="" width="276" height="474" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-5-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-5-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-7-Basics-5-md.png 749w"></figure>
<pre>Video coming soon! Thank you :) Temperature will be changing on the dashboard as the phone sends data</pre>
<p>If all goes well, you should see the message above telling you that the value has been recorded. If not, check out some of the Common Issues listed below:</p>
<table style="border-collapse: collapse; width: 100%;" border="1">
<tbody>
<tr>
<td style="width: 62.7494%;"><strong>Error</strong></td>
<td style="width: 37.3933%;"><strong>Solution</strong></td>
</tr>
<tr>
<td style="width: 62.7494%;">The server tells me I don’t have permissions to create a new variable: Error: <code>{"error": {"message": "The user has not permissions to create a new variable.","code":403001}}</code></td>
<td style="width: 37.3933%;">You might have keyed in the wrong Device Label in the Settings screen</td>
</tr>
<tr>
<td style="width: 62.7494%;">The server responds with <code>{"code": 401002, "message": "Incorrect authentication credentials."}</code></td>
<td style="width: 37.3933%;">You have entered an incorrect Authentication Token on the Settings screen</td>
</tr>
<tr>
<td style="width: 62.7494%;">The server responds with <code>{"error": {"message": "The value NaN is not in a valid range.”,"code":4000013331}}</code> or <code>{"code":400001," message": "The payload sent is not a valid json document."}</code></td>
<td style="width: 37.3933%;">Looks like you entered some text in the Variable Content field! Remember that Ubidots only accepts numbers.</td>
</tr>
</tbody>
</table>
<h2>Understanding the code</h2>
<p>We can now start to look at the code in Thunkable piece by piece to understand what it does, and how it works. There are a few sections of the block codes to understand:</p>
<ol>
<li>Stored Variables</li>
<li>Button Click</li>
<li>What's an Object?</li>
<li>Getting Data from Ubidots</li>
<li>Sending Data to Ubidots</li>
</ol>
<h3>Stored Variables</h3>
<p>Stored Variables are very much like the App Variables we previously used, but they will persist even after you close and reopen the app. App Variables, on the other hand, get reset after the app is closed.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-1.png" data-size="840x148"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-1-thumbnail.png" alt="" width="749" height="132"></a>
<figcaption>Declaring a stored variable</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-2.png" data-size="540x148"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-2-thumbnail.png" alt="" width="540" height="148"></a>
<figcaption>Getting a stored variable</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-3.png" data-size="958x88"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-3-thumbnail.png" alt="" width="749" height="69"></a>
<figcaption>Setting the value of a stored variable</figcaption>
</figure>
</div></div>
<h3>Button Click</h3>
<p>This part is almost entirely similar to what you did in the previous exercise in Part 1. </p>
<p>Firstly, the app needs to detect the button click from the two buttons to either retrieve or send a data point. (See <strong>"Detect Button Press"</strong> in the diagram)</p>
<p>After that, it sets a variable to be equal to the result of the request from Ubidots. At this point, your app will connect to Ubidots and ask for the information. (<strong>"Get Variable from Ubidots"</strong> in the diagram)</p>
<p>Once the information has been downloaded, it is stored in an object which has two properties: “error” and “text”. The property “error” is a boolean (true/false value) that indicates whether an issue has happened with the connection and “text” is a string (alphanumeric text) that contains the response of the server (if no error occurred) or the error message (if an error occurred).</p>
<p>Our program here checks whether “error” is true, and shows the message with the words “Error:” in front of it. If not, the words “Response:” will be added in front of the incoming message and displayed on a label. (See <strong>"Check if error occurred"</strong> and <strong>"Output text onto screen"</strong> in the diagram)</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-8-Understanding-4E.png" alt="" width="1984" height="732" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-4E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-4E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-4E-md.png 749w"></figure>
<h3>What’s an Object?</h3>
<p>At this point, you might be asking, what is an Object? An Object in Thunkable is a special kind of variable that can store many other variables inside it and you can retrieve the variables inside through names. The “names” that are used to retrieve variables are called “properties”. </p>
<p>For example, if I create an Object called “person” to represent a person, I would want it to have several properties like:</p>
<ul>
<li>Name</li>
<li>Birthday</li>
<li>Gender</li>
</ul>
<p>..and the same applies for Thunkable! You can set and retrieve properties of an object using the “get property of object” function, and you can construct objects with the “create objects with fields” function.</p>
<div class="gallery-wrapper gallery-wrapper--full"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-5.png" data-size="1278x168"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-5-thumbnail.png" alt="" width="749" height="98"></a>
<figcaption>Retrieving info from an object</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-6.png" data-size="582x282"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/30/gallery/Thunkable-8-Understanding-6-thumbnail.png" alt="" width="582" height="282"></a>
<figcaption>Creating an object</figcaption>
</figure>
</div></div>
<p><span style="font-weight: 400;">In this app, we use Objects to contain multiple variables (“error” and “text”) within one variable so that a function can output it (Remember that functions cannot output multiple variables).</span></p>
<h2>Getting Data from Ubidots</h2>
<p>This template makes use of custom functions to connect to Ubidots. Let’s start with getting data from Ubidots with the “get Ubidots variable” function.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-8-Understanding-7.png" alt="" width="543" height="89" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-7-md.png 749w"></figure>
<p>For this function, there is only 1 input on the right side: the variable name. On the left side, the function outputs an Object with “error” (true/false, to indicate if an error happened) and “text” (the response from the server).</p>
<h2>Sending Data to Ubidots</h2>
<p>To send the data you want to Ubidots, you will need to use the “set Ubidots variable” function.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/30/Thunkable-8-Understanding-8.png" alt="" width="518" height="118" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-8-xs.png 300w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-8-sm.png 480w ,https://knowledge.fourier.industries/media/posts/30/responsive/Thunkable-8-Understanding-8-md.png 749w"></figure>
<p>This function takes 2 inputs on the right side: variable name and variable content. Variable content must be a number as Ubidots only allows numbers. The function outputs the same Object as the “get Ubidots variable” function. If you wish to check if your data has been sent, you just have to simply check if the “error” parameter is false.</p>
<h2>Conclusion</h2>
<p>Over the past 2 tutorials, you have learnt the basics of building a mobile application using Thunkable and linking it to IoT services like Ubidots. In our next tutorial, you will be building a full IoT solution to increase energy efficiency in our heartland: kopitiams!</p>
<p><a href="https://knowledge.fourier.industries/mobile-apps-part-1.html" class="btn btn--outline">⬅️ Back</a><a style="float: right;" href="https://knowledge.fourier.industries/mobile-apps-part-3.html" class="btn btn--green">Next ➡️</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Transmit and Receive</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/transmit-and-receive.html"/>
        <id>https://knowledge.fourier.industries/transmit-and-receive.html</id>

        <updated>2022-08-31T10:55:06+08:00</updated>
            <summary>
                <![CDATA[
                    In this lesson, we will be learning how to send&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this lesson, we will be learning how to send and receive data to and from Ubidots. Let’s go!</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g04lk9pg2bn">"Publishing" Data to Ubidots MQTT</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2bo">Arduino Hookup</a></li>
<li><a href="#mcetoc_1g04lk9pg2bp">Transplanting Code</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2bq">Step 1: Declaration</a></li>
<li><a href="#mcetoc_1g04lk9pg2br">Step 2: Setup</a></li>
<li><a href="#mcetoc_1g04lk9pg2bs">Step 3: Loop</a></li>
<li><a href="#mcetoc_1g04lk9pg2bt">Step 4: Publish</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#mcetoc_1g04lk9pg2bu">"Subscribing" data from Ubidots MQTT</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2bv">Ubidots Setup</a></li>
<li><a href="#mcetoc_1g04lk9pg2c0">Code</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2c1">Step 1: Declaration</a></li>
<li><a href="#mcetoc_1g04lk9pg2c2">Step 2:  Setup</a></li>
<li><a href="#mcetoc_1g04lk9pg2c3">Step 3: Loop</a></li>
<li><a href="#mcetoc_1g04lk9pg2c4">Step 4: Message Received</a></li>
<li><a href="#mcetoc_1g04lk9pg2c5">Step 5: Subscribe</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#mcetoc_1g04lk9pg2c6">Both at the same time!</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2c7">Arduino Hookup</a></li>
<li><a href="#mcetoc_1g04lk9pg2c8">Code</a>
<ul>
<li><a href="#mcetoc_1g04lk9pg2c9">Step 1: Declarations</a></li>
<li><a href="#mcetoc_1g04lk9pg2ca">Step 2: Setup</a></li>
<li><a href="#mcetoc_1g04lk9pg2cb">Step 3: Loop</a></li>
<li><a href="#mcetoc_1g04lk9pg2cc">Step 4: Message Received</a></li>
<li><a href="#mcetoc_1g04lk9pg2cd">Step 5: Subscribe</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#mcetoc_1g068rr6ph">In the next lesson...</a></li>
</ul>
</div>
<h2 id="mcetoc_1g04lk9pg2bn">"Publishing" Data to Ubidots MQTT</h2>
<p>Let us send (“publish”) some data to Ubidots! We will be sending the ambient temperature to Ubidots with our TMP36 temperature sensor.</p>
<p>Open the previous Arduino code where we went through all the Wi-Fi passwords and Ubidots tokens (you should have saved it as “Connect”), and save it as a new project (name it something like “Publish”).</p>
<h3 id="mcetoc_1g04lk9pg2bo">Arduino Hookup</h3>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/27/arduinoPot40.png" alt="" width="1837" height="854" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-md.png 749w"></figure>
<p>You will need to connect your SSTuino according to the diagram above, with the TMP36 sensor's output connected to Analog In A0.</p>
<h3 id="mcetoc_1g04lk9pg2bp">Transplanting Code</h3>
<p>Now, let’s look at the TMP36 code that we built previously in TinkerCAD. It should look something like this:</p>
<pre><code class="language-cpp">// C++ code
//
int temp = 0;

void setup()
{
  pinMode(A0, INPUT);
  Serial.begin(9600);
}

void loop()
{
  temp = (-40 + 0.488155 * (analogRead(A0) - 20) + 0);
  Serial.println(temp);
  delay(10); // Delay a little bit to improve simulation performance
}</code></pre>
<p>Based on what we have learned in <a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html">From Blocks To Code - Part I</a>, we will be transplanting the 3 important sections of this code to the IoT template that we are using to connect: <strong>Declaration</strong>, <strong>Setup</strong> and <strong>Loop</strong>. Transplanting code is easy because the example has already marked out where to put your code 😄. Find the parts marked by <code>/********* This is where you put your own code *********/</code>.</p>
<h4 id="mcetoc_1g04lk9pg2bq">Step 1: Declaration</h4>
<p>The first part to transplant would be the variable <code>temp</code> for temperature so that we have this variable in our IoT code.</p>
<pre><code class="language-cpp">…
WiFiClient network;
MQTTClient client;

// declaration

/********* This is where you put your own code *********/

// Timer for multitasking. Default is 10000 ms (10 seconds)
RBD::Timer timer(10000);
int temp = 0;

/**************** End of your own code *****************/
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2br">Step 2: Setup</h4>
<p><span style="font-weight: 400;">The second part would be our <code>setup()</code> function, to set Analog Pin A0 as an input. We can ignore the <code>Serial.begin</code> safely as we already set up our Serial connection in the example, so we only need to copy over <code>pinMode()</code>.</span></p>
<pre><code class="language-cpp">…
void setup()
{
  Serial.begin(9600);

  /********* This is where you put your own code *********/
    
  pinMode(A0, INPUT);
    
  /**************** End of your own code *****************/

  connectToWiFiAndMQTT(network, SECRET_SSID, SECRET_PASS, client, subscribe, messageReceived);
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2bs">Step 3: Loop</h4>
<p>The third part is the <code>loop()</code> function, to calculate the temperature from the voltage. We only need to transplant the 1st line to our IoT example code, underneath <code>This is where you put your own code</code> and add a timer to only publish the value every 10 seconds. <code>timer.onRestart()</code> is the code used to check if the timer has reached 10 seconds, and also resets the timer once the time limit is reached.</p>
<pre><code class="language-cpp">…
void loop()
{
  connectionCheck(client, subscribe); // Check if connection is ok, must run on every loop

  /*
    If you need to publish data here, a publish is called 
    with a timer like this:

    if (timer.onRestart())
    {
      String dataString = String(data);
      publishUbidots(client, "topicName", dataString);
    }

    The value passed to publishUbidots must be a String
  */

  /********* This is where you put your own code *********/

  // Publish every 10 seconds
  if (timer.onRestart())
  {
    // Read the temperature
    temp = -40 + 0.488155 * (analogRead(A0) - 20);
  }

  /**************** End of your own code *****************/
}
…</code></pre>
<p>Great, now we are done with our transplanting and we are ready to write our first IoT code!</p>
<p>If you check out the file tab named <strong>‘helper.h’</strong> on the tab bar, you will find that we have written a lot of functions to make your life easier. Here’s a rundown of all the functions that you can use throughout your IoT programs:</p>
<ul>
<li><code>connectToWiFi(SSID, password)</code>: Connects to Wi-Fi, and automatically reconnects if the Wi-Fi disconnects</li>
<li><code>publishUbidots(client, topic, message)</code>: Publishes an MQTT message on a topic</li>
<li><code>subscribeUbidots(client, topic)</code>: Subscribes to an MQTT topic. You should only use this function at the last part of the <code>connect()</code> function</li>
<li><code>topicMatches(shortTopic, longTopic)</code>: Checks if your topic matches the topic sent by Ubidots</li>
<li><code>connect(client, subscribe)</code>: Connects to MQTT and automatically subscribes to topics designated in the <code>subscribe()</code> function</li>
</ul>
<p>Since MQTT only allows us to publish the data in the form of Strings, we need to convert our temperature number into a String. Make a new String variable called <code>temperatureString</code> with <code>temp</code> (recall lesson <a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html">From Blocks to Code - Part I</a>).</p>
<pre><code class="language-cpp">…
  temp = -40 + 0.488155 * (analogRead(A0) - 20);
    
  // Convert the temperature to a String
  String temperatureString = String(temp);
…
</code></pre>
<h4 id="mcetoc_1g04lk9pg2bt">Step 4: Publish</h4>
<p>Publishing to Ubidots using MQTT is as simple as calling the <code>publishUbidots()</code> function like so: <code>publishUbidots(client, “temperature”, temperatureString);</code>. </p>
<p>The code between the <code>/****/</code> in <code>loop()</code> should now look something like this:</p>
<pre><code class="language-cpp">…
void loop()<br>{
  …

  /********* This is where you put your own code *********/

  // Publish every 10 seconds
  if (timer.onRestart())
  {
    // Read the temperature
    temp = -40 + 0.488155 * (analogRead(A0) - 20);
    
    // Convert the temperature to a String
    String temperatureString = String(temp);
    publishUbidots(client, "temperature", temperatureString);
  }

  /**************** End of your own code *****************/
}
…</code></pre>
<p>Before you upload your program, don't forget to double-check the 'arduino_secrets.h' file to ensure that you have the correct Wi-Fi password and Ubidots account details.</p>
<pre>Video coming soon! Thank you :) Use your finger to manually raise the temperature of the TMP36</pre>
<p>Connect your SSTuino, upload your program, open your Serial Monitor and go to your Ubidots dashboard. You can now see the current temperature on the dashboard! </p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/27/Ubidots-5-Dashboard-7E.png" alt="" width="564" height="390" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-5-Dashboard-7E-md.png 749w"></figure>
<p>Well done, now you have made your first Internet-connected temperature sensor in 4 steps (Declaration, Setup, Loop, Publish). This simple example can be extended to many other sensors that you may want to build, like motion detectors, air quality sensors, and so on.</p>
<h2 id="mcetoc_1g04lk9pg2bu">"Subscribing" data from Ubidots MQTT</h2>
<p>Now that we have sent, or “published” data to Ubidots, let’s try receiving data by “subscribing”! </p>
<p>We will be making a very simple example: a smart light switch. Arduino represents a HIGH signal with the number 1, and a LOW signal with the number 0, which means that we can simply represent the state of the light switch as 0s and 1s. Our light switch will use one of the debug lights on the board, meaning that you do not need to connect anything externally for it to work.</p>
<h3 id="mcetoc_1g04lk9pg2bv">Ubidots Setup</h3>
<p>Get started by creating a new Variable under your existing Device with the name “Light” as shown:</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/27/Ubidots-6-Subscribe-1E.png" alt="" width="662" height="452" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/Ubidots-6-Subscribe-1E-md.png 749w"></figure>
<p>Next, let’s create a switch on our dashboard so that we can control this light switch. Press the + button on top and create a new switch, then link it to the “Light” Variable of your device.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-2.png" data-size="2134x1474"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-2-thumbnail.png" alt="" width="749" height="517"></a>
<figcaption>Select 'Switch' to add to your dashboard</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-3.png" data-size="2136x1478"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-3-thumbnail.png" alt="" width="749" height="518"></a>
<figcaption>Add the Variable called "light"</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-4.png" data-size="1208x838"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/27/gallery/Ubidots-6-Subscribe-4-thumbnail.png" alt="" width="749" height="520"></a>
<figcaption>Done!</figcaption>
</figure>
</div></div>
<p>We are now done with Ubidots.</p>
<h3 id="mcetoc_1g04lk9pg2c0">Code</h3>
<p>We can open the code that we used to connect to MQTT previously (should be named Connect) and save it as a new project (name it something like “Subscribe”). You can also open the Publish code you just built as a side-by-side reference if you need to.</p>
<p>We can now start building our code for subscribing with 5 major steps: <strong>Declaration</strong>, <strong>Setup</strong>, <strong>Loop</strong>, <strong>Message Received</strong> and <strong>Subscribe</strong>. Compared to the previous Publish example, it has 1 extra and 1 changed step.</p>
<h4 id="mcetoc_1g04lk9pg2c1">Step 1: Declaration</h4>
<p>You will first need to store the state of the light, in other words, whether it is on or off (in Arduino terms, <code>HIGH</code> or <code>LOW</code>). Make an integer variable called <code>light</code> and set it to <code>LOW</code> initially.</p>
<pre><code class="language-cpp">…
WiFiClient network;
MQTTClient client;

/********* This is where you put your own code *********/

// Timer for multitasking. Default is 10000 ms (10 seconds)
RBD::Timer timer(10000);

// Variables
int light = LOW;

/**************** End of your own code *****************/

void setup()
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2c2">Step 2:  Setup</h4>
<p>In our setup, we need to tell our SSTuino that the pin that we want our light to be an output. We will use Pin 2 in our case as it’s the first pin with an LED. Use <code>pinMode</code> to set Pin 2 as an output.</p>
<pre><code class="language-cpp">…
void setup()<br>{
  Serial.begin(9600);

  /********* This is where you put your own code *********/

  pinMode(2, OUTPUT);

  /**************** End of your own code *****************/

  connectToWiFiAndMQTT(network, SECRET_SSID, SECRET_PASS, client, subscribe, messageReceived);
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2c3">Step 3: Loop</h4>
<p>Inside the loop, we have to respond to changes to the <code>light</code> variable by properly toggling the light on pin 2 on or off. Whenever a message from the subscribed topic comes in, another function will change the <code>light</code> variable, and over here, we need to “apply” this change by actually using the <code>digitalWrite()</code> function.</p>
<pre><code class="language-cpp">…
void loop()
{
  …

  /********* This is where you put your own code *********/

  digitalWrite(2, light);

  /**************** End of your own code *****************/
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2c4">Step 4: Message Received</h4>
<p>Inside this special function is where the MQTT subscribe message is actually received. We have to check if it’s really the correct message by checking the topic, and then changing the value of <code>light</code> based on the value received. </p>
<p>We do this check by using the <code>topicMatches(shortTopic, longTopic)</code> helper function, which breaks down Ubidot’s long and hard-to-understand topic format of <code>/v1.6/devices/{API LABEL}/{VARIABLE}/lv</code> into just <code>{VARIABLE}</code>.</p>
<p>If the topic is the one we want (i.e. outcome of this function is <code>true</code>), we will change the <code>light</code> variable based on the payload of the message. To do that, we have to convert the payload from a String to an integer. Recall the <a href="https://knowledge.fourier.industries/programming-the-sstuino-ii-5.html">From Blocks to Code lesson</a>, where we converted data from one type to another. To convert a String to int, we just need to use <code>.toInt()</code> behind the String!</p>
<pre><code class="language-cpp">…
void messageReceived(String &amp;topic, String &amp;payload)
{
  Serial.println("Incoming data: " + topic + " - " + payload);

  /*
    All the messages your MQTT service receives can be
    loaded here. You should check if the message is the
    correct topic and convert the message from String
    to the data type you need

    For example:
    if (topicMatches("light", topic) == true)
    {
      light = payload.toInt(); // convert incoming message from String to int
    }

    *NOTE*: Do not use this function to publish, subscribe
    or unsubscribe as it may cause deadlocks
  */

  /********* This is where you put your own code *********/

  if (topicMatches("light", topic) == true)
  {
    // You can do something with the payload, which is a String
    light = payload.toInt(); // convert the incoming message from String to int
  }

  /**************** End of your own code *****************/
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2c5">Step 5: Subscribe</h4>
<p>At long last, we have come to the last part we have to change: the <code>subscribe()</code> function. This function is responsible for subscribing to the topics that we want to receive messages from. </p>
<p>Simply call the <code>subscribeUbidots()</code> function from the helper by coding <code>subscribeUbidots(client, "light");</code> and you’re done!</p>
<pre><code class="language-cpp">…
void subscribe()
{
  /*
    For example, a subscribe is called like:
    subscribeUbidots(client, "light");
  */
 
  /********* This is where you put your own code *********/

  subscribeUbidots(client, "light");

  /**************** End of your own code *****************/
}
…</code></pre>
<p>All 5 steps are done now, so it’s time to run your project. Plug in your SSTuino, upload this code, open the Serial Monitor and let it connect. Once it is fully connected, you can try press the switch on your Ubidots dashboard to see the LED on Pin 2 light up!</p>
<pre>Video coming soon! :) Simply press switch on Ubidots and pin 2 should light up</pre>
<h2 id="mcetoc_1g04lk9pg2c6">Both at the same time!</h2>
<p>Now that we have both Publish and Subscribe, let's try to do both at the same time. Use the Save As function to make a copy of your "Publish" project and name it "Both". Keep the Subscribe project on one side of your screen so that you can always refer to it. </p>
<h3 id="mcetoc_1g04lk9pg2c7">Arduino Hookup</h3>
<p>This practise will use the exact same circuit as the Publish example.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/27/arduinoPot40.png" alt="" width="1837" height="854" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-xs.png 300w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-sm.png 480w ,https://knowledge.fourier.industries/media/posts/27/responsive/arduinoPot40-md.png 749w"></figure>
<h3 id="mcetoc_1g04lk9pg2c8">Code</h3>
<p>We are going to walk through this tutorial the same way as we did for Subscribe, which is to break it down into 5 steps: <strong>Declaration</strong>, <strong>Setup</strong>, <strong>Loop</strong>, <strong>Message Received</strong> and <strong>Subscribe</strong>.</p>
<p>In addition, as our program is now time-sensitive, we will need to multitask our Arduino! To make things simpler, a 10 second (10000 millisecond) timer has already been created for you with the line of code <code style="font-weight: var(--font-weight-normal);">RBD::Timer timer(10000);</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">.</span></p>
<h4 id="mcetoc_1g04lk9pg2c9">Step 1: Declarations</h4>
<p>Firstly, you want to merge the variables at the top of the code above <code>setup()</code>, having both <code>temp</code> and <code>light</code> for temperature and light switch respectively.</p>
<pre><code class="language-cpp">…
WiFiClient network;
MQTTClient client;

// declaration

/********* This is where you put your own code *********/

// Variables
int temp = 0;
int light = LOW;

// Timer for multitasking. Default is 10000 ms (10 seconds)
RBD::Timer timer(10000);

/**************** End of your own code *****************/
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2ca">Step 2: Setup</h4>
<p>Next, within the <code>setup()</code> function, add another function call to <code>pinMode</code> so that you designate Pin 2 (the same pin that we used in our Subscribe example) as an output pin. </p>
<pre><code class="language-cpp">…
void setup()
{
  Serial.begin(9600);

  /********* This is where you put your own code *********/

  pinMode(A0, INPUT);
  pinMode(2, OUTPUT);

  /**************** End of your own code *****************/

  connectToWiFiAndMQTT(network, SECRET_SSID, SECRET_PASS, client, subscribe, messageReceived);
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2cb">Step 3: Loop</h4>
<p>Within the <code>loop()</code> function, we have to periodically set Pin 2’s signal to be on/off, depending on what the variable <code>light</code> is at the moment. We will do this with a <code>digitalWrite(2, light)</code>.</p>
<p>Notice how that the <code>digitalWrite</code> function is outside the <code>if (timer.onRestart())</code> brackets that are responsible for checking if the delay time has passed, which means that it will be called every single time when the loop is run, instead of every 10 seconds.</p>
<p>Here's the code for the <code>loop()</code> function in full:</p>
<pre><code class="language-cpp">…
void loop()
{
  connectionCheck(client, subscribe); // Check if connection is ok, must run on every loop

  /*
    …
  */

  /********* This is where you put your own code *********/

  // Publish every 10 seconds
  if (timer.onRestart())
  {
    // Read the temperature
    temp = -40 + 0.488155 * (analogRead(A0) - 20);

    // Convert the temperature to a String
    String temperatureString = String(temp);
    publishUbidots(client, "temperature", temperatureString);
  }

  digitalWrite(2, light);

  /**************** End of your own code *****************/
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2cc">Step 4: Message Received</h4>
<p>In the <code>messageReceived()</code> function, we have to check for our incoming message just like what we did previously. Copy from the beginning to the end of the if statement and paste it between <code>This is where you put our code</code> markers.</p>
<pre><code class="language-cpp">…
void messageReceived(String &amp;topic, String &amp;payload)
{
  Serial.println("Incoming data: " + topic + " - " + payload);

  /*
    …
  */

  /********* This is where you put your own code *********/

  if (topicMatches("light", topic) == true)
  {
    // You can do something with the payload, which is a String
    light = payload.toInt(); // convert the incoming message from String to int
  }

  /**************** End of your own code *****************/
}
…</code></pre>
<h4 id="mcetoc_1g04lk9pg2cd">Step 5: Subscribe</h4>
<p>Finally, don’t forget to actually subscribe to the topic in question, which should be named <code>light</code>, in the <code>subscribe()</code> function.</p>
<pre><code class="language-cpp">…
void subscribe()
{
  /*
    For example, a subscribe is called like:
    subscribeUbidots(client, "light");
  */
 
  /********* This is where you put your own code *********/

  subscribeUbidots(client, "light");

  /**************** End of your own code *****************/
}
…</code></pre>
<p>With all of the code done, it’s time to plug in your SSTuino and upload the code. Try playing around with the switch on your dashboard to see if the debug LED on Pin 2 turns on and off.</p>
<pre>Video coming soon! Thank you :)</pre>
<p>If everything works out, awesome! You have successfully made an IoT controller for a smart home, with a temperature sensor to tell you how hot or cold your room is, and an internet-controlled light that you can trigger using other Internet controlled functions. You can explore how to integrate this with IFTTT (If This Then That) or other smart solutions to link your existing devices like a Google Home Mini with your SSTuino based IoT controller. </p>
<h2 id="mcetoc_1g068rr6ph">In the next lesson...</h2>
<p>In our next two tutorials, we will be building a mobile app with Thunkable, a “code-lite” mobile app creator. It is <strong>highly recommended</strong> that you watch some of Thunkable’s tutorials at home, as well as try out the next tutorial (<a href="https://knowledge.fourier.industries/mobile-apps-part-1.html">Mobile Apps, Part 1</a>). All of these videos are bite-sized, 1-2 minute videos so it’s really quick to get up to speed with how Thunkable works! The next tutorial will only cover a shortened version to get you up to speed.</p>
<p><strong>Essential Tutorials:</strong></p>
<ol>
<li><a href="https://www.youtube.com/watch?v=dQQsvQr-f1U">Introduction to Drag and Drop</a></li>
<li><a href="https://www.youtube.com/watch?v=0NrkKiCGaxk">Build a Translator App with Thunkable</a></li>
<li><a href="https://www.youtube.com/watch?v=TqIVHGYdi54">How Screens and Navigation works in Thunkable</a></li>
<li><a href="https://www.youtube.com/watch?v=3M9F3X1bCnA">Using App Variables</a></li>
<li><a href="https://www.youtube.com/watch?v=3jS3F3IRQB0">Using Functions</a></li>
</ol>
<p><strong>Optional Tutorials:</strong></p>
<ol>
<li><a href="https://www.youtube.com/watch?v=qotZVqzTUpg">Using Logic Blocks</a></li>
<li><a href="https://www.youtube.com/watch?v=FxrXdZPRTLw">Understanding Web (HTTP) APIs in Thunkable</a></li>
</ol>
<p><a href="https://knowledge.fourier.industries/getting-started-with-iot.html" class="btn btn--outline">⬅️ Back</a><a style="float: right;" href="https://knowledge.fourier.industries/mobile-apps-part-1.html" class="btn btn--green">Next ➡️</a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mobile Apps, Part I</title>
        <author>
            <name>FourierIndustries LLP</name>
        </author>
        <link href="https://knowledge.fourier.industries/mobile-apps-part-1.html"/>
        <id>https://knowledge.fourier.industries/mobile-apps-part-1.html</id>

        <updated>2022-04-22T19:36:51+08:00</updated>
            <summary>
                <![CDATA[
                    In this tutorial, we will create a mobile app with&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>In this tutorial, we will create a mobile app with Thunkable and connect your IoT applications with them! Thunkable is an easy to use “code-lite” mobile app creator, in which you can make mobile apps with only block-based code with no need to write text-based code. You can then upload this to your phone or even publish them on actual app stores if you wish to distribute your app.</p>
<p class="msg msg--info"><strong>Note: </strong>It is strongly recommended that this tutorial be done at home</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1g04lks6i2dn">Signing up to Thunkable</a></li>
<li><a href="#mcetoc_1g04lks6i2do">Hello World!</a></li>
<li><a href="#mcetoc_1g04lks6i2dp">Drag and Drop</a>
<ul>
<li><a href="#mcetoc_1g04lks6i2dq">Adjusting the properties of the label</a></li>
<li><a href="#mcetoc_1g04lks6i2dr">Advanced inputs</a></li>
</ul>
</li>
<li><a href="#mcetoc_1g04lks6i2ds">Activating Buttons</a></li>
<li><a href="#mcetoc_1g04lks6i2dt">Navigating with a tab bar</a></li>
<li><a href="#mcetoc_1g04lks6i2du">Using functions</a></li>
<li><a href="#mcetoc_1g04lks6i2dv">Finishing touches</a></li>
<li><a href="#mcetoc_1g04lks6i2e0">Resources and Going Further</a></li>
</ul>
</div>
<h2 id="mcetoc_1g04lks6i2dn">Signing up to Thunkable</h2>
<p>We can sign up for Thunkable with our SST Google Account by clicking “Sign up with Google”. It’s that simple!</p>
<p class="align-center"><a href="https://x.thunkable.com/signup?referrerId=random.rrr3r7" target="_blank" rel="noopener noreferrer" class="btn">Sign up to Thunkable</a></p>
<p>Once you have completed signup, you can click the links below on your mobile phone to download Thunkable Live so that you can upload the app to your mobile phone:</p>
<figure class="post__image align-center"><a href="https://apps.apple.com/sg/app/thunkable-live/id1223262700" target="_blank" rel="noopener noreferrer"></a><a href="https://apps.apple.com/sg/app/thunkable-live/id1223262700" target="_blank" rel="noopener noreferrer"><img  src="https://knowledge.fourier.industries/media/posts/28/5a902db97f96951c82922874.png" alt="" width="179" height="60" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/5a902db97f96951c82922874-md.png 749w"></figure></a><a href="https://apps.apple.com/sg/app/thunkable-live/id1223262700" target="_blank" rel="noopener noreferrer"></a>               <a href="https://play.google.com/store/apps/details?id=com.thunkable.live" target="_blank" rel="noopener noreferrer"><figure class="post__image align-center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/en_badge_web_generic-4.png" alt="" width="200" height="59" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/en_badge_web_generic-4-md.png 749w"></figure></a></p>
<p>After signing up, you can start creating your first project. For the category, you can put “Just testing”.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-1-NewProj-1.png" alt="" width="516" height="359" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-1-NewProj-1-md.png 749w"></figure>
<p>It is highly recommended that you watch some of Thunkable’s tutorials at the link below, before you start this lesson to have a good idea of how to use Thunkable: </p>
<p class="align-center"><a href="https://docs.thunkable.com/v/drag-and-drop/tutorials" target="_blank" rel="noopener noreferrer" class="btn">Thunkable Drag and Drop Tutorials</a></p>
<h2 id="mcetoc_1g04lks6i2do">Hello World!</h2>
<p>Time to start creating our first Thunkable app! This part of the tutorial will assume that you already understand how to operate the user interface of Thunkable and are familiar with some of the key concepts in Thunkable. </p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-2-Layout-1E.png" alt="" width="2124" height="1474" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-2-Layout-1E-md.png 749w"></figure>
<p>Now that you are on your app screen, let’s get familiar with the interface of Thunkable. On the left, you have the Screens and the Add Components menus. </p>
<p>The Screens menu is for you to add new screens and views to your app. The Add Components menu allows you to easily drag and drop components to your screen. </p>
<p>On the right side, you can change the properties of the individual components on your screen. For instance, you can change the words or colour of a label, or disable a button, and so on. </p>
<p>On the top bar, you can see two tabs: Design and Blocks. Design is the tab you are currently in, and lets you design your app screens. Blocks allow you to create the program behind each screen in your app, using block coding just like what you did previously in TinkerCAD.</p>
<h2 id="mcetoc_1g04lks6i2dp">Drag and Drop</h2>
<p>Let us try dragging and dropping some components into your app! The very first basic, but important component is the Label, which simply displays text on your screen. Drag it directly to the middle of your app.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-1E.png" alt="" width="526" height="491" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-1E-md.png 749w"></figure>
<p>If you want to delete your label, simply press the trash can button on the Screens menu to delete the label. This is the same for other components in your app as well. </p>
<h3 id="mcetoc_1g04lks6i2dq">Adjusting the properties of the label</h3>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-2E-2.png" alt="" width="469" height="451" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-2E-2-md.png 749w"></figure>
<p>Click on the Label and you can now adjust the properties for that Label on the right side of the screen. You can change the contents, font, how big the words are, and so on. Try changing the label to say <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program" target="_blank" rel="noopener noreferrer">“Hello World”</a>!</p>
<h3 id="mcetoc_1g04lks6i2dr">Advanced inputs</h3>
<p>Let’s try dragging in a <strong>Button</strong> and <strong>Text Input</strong> this time. You can play around with the position and text on the Button and Text Input for now. When you’re done, change the text on the different components and drag them into the order shown below:</p>
<figure class="post__image post__image--full" ><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-3E.png" alt="" width="2120" height="1472" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-3E-md.png 749w">
<figcaption >Drag the elements on the screen into something like this</figcaption>
</figure>
<h2 id="mcetoc_1g04lks6i2ds">Activating Buttons</h2>
<p>We are going to make a super simple app: replacing the text of the Label with the text inside your Text Input, the moment that the Button is pressed. Click on the Blocks tab on the top bar to switch to blocks editing.</p>
<p>We can click on each of the components on the left bar to see the different functions we can use to change the components (e.g. changing the text on a Label, or reading the text from a Text Input):</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-4.png" data-size="1360x1478"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-4-thumbnail.png" alt="" width="749" height="814"></a>
<figcaption>Text Input</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-5.png" data-size="1271x1480"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-5-thumbnail.png" alt="" width="749" height="872"></a>
<figcaption>Button</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-6.png" data-size="1262x1466"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-6-thumbnail.png" alt="" width="749" height="870"></a>
<figcaption>Label</figcaption>
</figure>
</div></div>
<p>For our simple app, we would need to do 3 things:</p>
<ol>
<li>Detect when the button is clicked</li>
<li>Read the text from the Text Input</li>
<li>Set the contents of the Label to the same contents of the Text Input</li>
</ol>
<p>Starting with the first point, we can click the component for our Button and drag the <a href="#" class="btn btn--yellow">when Button1 Click</a> block into our blocks editor. Everything that goes into this block will be acted upon when you click that button.</p>
<figure class="post__image post__image--full" ><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-7E.png" alt="" width="2112" height="1472" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-7E-md.png 749w">
<figcaption >For completion of point 1, drag the Button Click event block into the editor</figcaption>
</figure>
<p>To complete point 2, we can use a variable to temporarily store the text that was read from the Text Input. Start by clicking the Variables option and dragging the <a href="#" class="btn btn--yellow">set ‘app’ variable ‘name’ to __</a> block into the editor.</p>
<figure class="post__image post__image--full" ><figure class="post__image"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-8E.png" alt="" width="2110" height="1448" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-8E-md.png 749w"></figure>
<figcaption >To complete point 2, drag the variable block in</figcaption>
</figure>
<p>Let’s give this variable a name like “text”. Keep this name in mind because we will be using it later.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-9-2.png" alt="" width="435" height="114" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-9-2-md.png 749w"></figure>
<p>The last part of point 2 will be to actually read the text from the Text Input and store it into this variable. </p>
<p>We can do that by clicking the Text Input component and dragging the “Text” property of the component into the rear part of the statement.</p>
<figure class="post__image post__image--full" ><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-10E.png" alt="" width="2114" height="1454" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-10E-md.png 749w">
<figcaption >Drag the text of Text_Input1 into the rear part of the "set app variable" block</figcaption>
</figure>
<p>Finally, onto point 3: to set the contents of the Label to the “text” variable that we have just set. Click on your Label component on the left and drag the <a href="#" class="btn btn--yellow">set Label1’s text to ___</a> block into the block editor, and drag the “app variable” block to the end of the “set” block, so that the code will set the text of your Label to the value of the “text” variable.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-11E.png" data-size="2112x1452"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-11E-thumbnail.png" alt="" width="749" height="515"></a>
<figcaption>Add the "set label text block"...</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-12E.png" data-size="2110x1450"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-3-Drag-12E-thumbnail.png" alt="" width="749" height="515"></a>
<figcaption>...and set the label to the "text" variable</figcaption>
</figure>
</div></div>
<p>Fantastic! You have now completed your basic app that handles text input, a user action through a button, and the display of output. Next up, we are going to extend our app by processing the input text using some of Thunkable’s built-in functions and adding a tab bar at the bottom.</p>
<figure ><figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-3-Drag-13E.png" alt="" width="2136" height="422" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-3-Drag-13E-md.png 749w"></figure>
<figcaption >Press the Play button to start your app!</figcaption>
</figure>
<h2 id="mcetoc_1g04lks6i2dt">Navigating with a tab bar</h2>
<p>Many of you may have seen apps with a tab bar at the bottom, like Apple’s Music app, or the Android Clock app. Now we are going to make an app with a tab bar just like that. </p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/tab-ios.jpeg" data-size="1170x2532"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/tab-ios-thumbnail.jpeg" alt="" width="749" height="1621"></a></figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/tab-android.jpg" data-size="1080x2412"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/tab-android-thumbnail.jpg" alt="" width="749" height="1673"></a></figure>
</div></div>
<p>We will now extend our app by giving it a Settings page so that we can choose which type of text processing we want our app to do.</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-1E.png" alt="" width="1580" height="720" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-1E-md.png 749w"></figure>
<p>Click the + button on the Screens menu and click “Bottom Tab Navigator” to add the tab navigator to our app.</p>
<figure class="post__image post__image--center" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-2E.png" alt="" width="306" height="300" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-2E-md.png 749w"></figure>
<figcaption >Click the trashcan icon to delete all the other screens except Setting</figcaption>
</figure>
<p>Wow, that’s a lot of buttons! Let’s delete the ones unnecessary for now. Since we are adding a Settings page, only Settings is relevant to us, so we can delete all of the rest by clicking the trashcan icon as above.</p>
<p>Next, drag our “Screen1” (which is the first screen that we created) under the Tab Navigators so it looks like this:</p>
<figure class="post__image post__image--center" ><figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-3.png" alt="" width="309" height="300" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-3-md.png 749w"></figure>
<figcaption >Drag Screen1 to be within the Tab Navigator</figcaption>
</figure>
<p>Click on “Screen1”, and you might notice that the bottom tab bar has an empty image that we don’t really want. Let’s get an icon to make it look better: copy and paste <code>https://img.icons8.com/fluency/48/000000/home.png</code> into the field called “Active Tab Icon”. Next, we want to rename “Screen1” to something that makes more sense. Click the Screen1 text and you can change it to Home so it matches the icon.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-4E.png" data-size="1328x1334"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-4E-thumbnail.png" alt="" width="749" height="752"></a>
<figcaption>Change the tab image here...</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-5E.png" data-size="1314x1334"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-5E-thumbnail.png" alt="" width="749" height="760"></a>
<figcaption>...and change the name of Screen1 to "Home"</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-6E.png" data-size="2120x1466"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-4-Tab-6E-thumbnail.png" alt="" width="749" height="518"></a>
<figcaption>Don't forget to change the image of the Settings tab!</figcaption>
</figure>
</div></div>
<p>Let us give the Settings page a nicer icon too! Click on the Setting screen on the left and change the link in the “Active Tab Icon” setting to <code>https://img.icons8.com/fluency/48/000000/settings.png</code>.</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-4-Tab-7.png" alt="" width="545" height="142" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-4-Tab-7-md.png 749w"></figure>
<p>Much better looking now!</p>
<h2 id="mcetoc_1g04lks6i2du">Using functions</h2>
<p>As we have a Settings page now, we can give it some options to turn certain types of text manipulation on and off. Starting with a simple one, we can trim/remove all the spaces to the left and right side of the text we typed in: something like <code>   abcde    </code> will become <code>abcde</code>. There is a built-in function for this, and we can try it out.</p>
<p>But first, we need to add a switch in Settings so that we can turn this feature on and off.</p>
<p>Add a Label and a Switch according to the diagram below, and set the default value of the Switch to “false”:</p>
<figure ><figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-1E.png" alt="" width="1578" height="1460" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-1E-md.png 749w"></figure>
<figcaption >Add a Label and Switch to the Settings page</figcaption>
</figure>
<p>Let’s switch over to blocks to add our code…We want the value of the Switch to be stored in a variable so that it can be read by our program on the Home tab. Drag the <a href="#" class="btn btn--yellow">when Switch1 on Value Change</a> block into the editor, and set a new variable called <code>removeSpaces</code> to whatever the <code>newValue</code> of the switch is. We are now done with the Settings screen!</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-2E.png" alt="" width="2108" height="1448" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-2E-md.png 749w"></figure>
<p><span style="font-weight: 400;">Moving back to the blocks for Home, we can add an <a href="#" class="btn btn--yellow">if</a> block to our button click event so that we check for that setting we just made previously. </span></p>
<p><span style="font-weight: 400;">After that, drag a Logic <a href="#" class="btn btn--green">__=__</a> block to check if the statement is equal to true, and drag a <a href="#" class="btn btn--green">true</a> block to the right-hand side of the equals sign.</span></p>
<p><span style="font-weight: 400;">Finally, drag the <a href="#" class="btn btn--yellow">app variable</a> block from the Variables menu to complete the if statement. Change the variable name to <code>removeSpaces</code> so it matches the name on the other screen.</span></p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-3E.png" data-size="2110x1456"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-3E-thumbnail.png" alt="" width="749" height="517"></a>
<figcaption>Drag in the "if" statement</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-4E.png" data-size="2108x1450"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-4E-thumbnail.png" alt="" width="749" height="515"></a>
<figcaption>Add in the = statement to check for true</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-5E.png" data-size="2110x1456"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-5-Func-5E-thumbnail.png" alt="" width="749" height="517"></a>
<figcaption>Finally add the "app variable" block</figcaption>
</figure>
</div></div>
<p>At this point, we want to reorder our program a bit so it makes more sense. Recalling that the intention of this app is to:</p>
<ol>
<li>Detect when the button is clicked</li>
<li>Read the text from the Text Input</li>
<li><strong>(NEW)</strong> Process the text IF the switch on Settings is on</li>
<li>Set the contents of the Label to the same contents of the Text Input</li>
</ol>
<p>We have inserted a new step between the 2nd and last step, which is to process the text IF the switch is active. As such, the program needs to be organised in the same way and here’s how:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-6E.png" alt="" width="1420" height="600" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-6E-md.png 749w"></figure>
<p>With these changes done, we can drop in the last piece of code that actually performs the change. In programming, we can actually assign a variable back to itself. For example, if you have a statement in Arduino that says <code>i = i+1;</code>, it is perfectly valid as it adds 1 to <code>i</code>. (Note that this is not valid in maths)</p>
<p>In our case, we can assign the variable called “text” back to itself after we have finished removing the spaces before and after it. We would need to drag 3 types of blocks into the editor: “set app variable” which allows you to set a variable, “app variable” which gets the contents of a variable, and “trim spaces from both sides” from the Text menu to actually trim the spaces.</p>
<p>Once complete, your code should look something like this:</p>
<figure class="post__image post__image--full"><img loading="lazy"  src="https://knowledge.fourier.industries/media/posts/28/Thunkable-5-Func-7E.png" alt="" width="2672" height="700" sizes="(max-width: 749px) 100vw, 749px" srcset="https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-xs.png 300w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-sm.png 480w ,https://knowledge.fourier.industries/media/posts/28/responsive/Thunkable-5-Func-7E-md.png 749w"></figure>
<p>Leave the “else” block empty since we don’t need to change the text when the switch is off.</p>
<h2 id="mcetoc_1g04lks6i2dv">Finishing touches</h2>
<p>We are almost entirely done with our app! For the finishing touches, let’s change the Border Width to 1 pixel, and Text Alignment to “Left” so that we can easily see the differences in the text output.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="2">
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-1.png" data-size="1366x1340"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-1-thumbnail.png" alt="" width="749" height="735"></a>
<figcaption>Change the border width to 1 so it has a border</figcaption>
</figure>
<figure class="gallery__item"><a href="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-2.png" data-size="1360x1424"><img loading="lazy" src="https://knowledge.fourier.industries/media/posts/28/gallery/Thunkable-6-Finish-2-thumbnail.png" alt="" width="749" height="784"></a>
<figcaption>Change text align to left so spaces are more obvious</figcaption>
</figure>
</div></div>
<p>With that done, your app should look a little bit like this…</p>
<figure class="post__video"><video loading="lazy" width="600" height="300" playsinline="" autoplay="autoplay" muted="" loop="loop" data-mce-fragment="1">
    <source src="media/files/Thunkable-6-Finish-3.mp4" type="video/mp4" /></video></figure>
<h2 id="mcetoc_1g04lks6i2e0">Resources and Going Further</h2>
<p>If you want some beautiful icons to use in your apps, projects and presentations, this is the icon suite that was used in this tutorial: <a href="https://icons8.com/icons/fluency" target="_blank" rel="noopener noreferrer">Icons8 Fluency Icons</a></p>
<p><a href="https://knowledge.fourier.industries/transmit-and-receive.html" class="btn btn--outline">⬅️ Back</a><a style="float: right;" href="https://knowledge.fourier.industries/mobile-apps-part-2.html" class="btn btn--green">Next ➡️</a></p>
            ]]>
        </content>
    </entry>
</feed>
